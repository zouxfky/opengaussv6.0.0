##########################################################################
# Enable options
##########################################################################

ENABLE_UT=OFF
ENABLE_MEMCHECK=OFF
ENABLE_GCOV=OFF
BUILD_TYPE=Debug

##########################################################################
# Meta configuration
##########################################################################
PROJECT_SOURCE_DIR = $(DCF_TOP_BUILDDIR)
3RD_LIB_PATH = $(PROJECT_SOURCE_DIR)/library
SCRIPT_PATH=$(DCF_TOP_BUILDDIR)/build
OUT_PATH=$(SCRIPT_PATH)/output
MAKE_INSTALL_PREFIX=$(OUT_PATH)
BUILD_MODE=Debug

G_LIB_VERSION = 1
LIB_MODE = comm
LIB_MODE_COMM = comm
CC = gcc

CFLAGS=
CPPFLAGS=
LDFLAGS=
LIBS=

ifeq ($(BUILD_TYPE), Debug)
    BUILD_MODE = Debug
    OPTIMIZE_LEVEL = -O0 -g
else ifeq ($(BUILD_TYPE), Release)
    BUILD_MODE = Release
    ENABLE_MEMCHECK = OFF
    ENABLE_UT=OFF
    OPTIMIZE_LEVEL = -O2 -g3
else
    $(error unsupported BUILD_TYPE is $(BUILD_TYPE))
endif

ifeq ($(ENABLE_MEMCHECK)_$(ENABLE_UT), ON_ON)
    $(error unsupported ENABLE_MEMCHECK and ENABLE_UT both true!)
endif

ifeq ($(ENABLE_MEMCHECK), ON)
    $(info ENABLE_MEMCHECK is on!)
endif

BUILD_TUPLE = $(shell uname -p)
ifeq ($(BUILD_TUPLE), x86_64)
    OS_OPTIONS = -msse4.2 -mcx16
    COMPILE_MACRO += -DUSE_SSE42_CRC32C_WITH_RUNTIME_CHECK
endif
ifeq ($(BUILD_TUPLE), aarch64)
    USE_SSE42_CRC32C_WITH_RUNTIME_CHECK = OFF
    OS_OPTIONS = -march=armv8-a+crc -mtune=cortex-a72 -fsigned-char -ggdb3 -march=armv8-a+crc -funwind-tables
endif


SECURE_OPTIONS = -g -ldl -pthread -fno-common -Wtrampolines -freg-struct-return -pipe -Wl,-Bsymbolic -rdynamic
SECURE_LINK_OPTS = -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now
PROTECT_OPTIONS = -fwrapv $(OPTIMIZE_LEVEL) -fPIC -Wall -MMD -fno-strict-aliasing -fsigned-char -fms-extensions -lpthread
WARNING_OPTIONS = -Wall -Wendif-labels -Werror
OPTIMIZE_OPTIONS = -fstack-protector-strong --param ssp-buffer-size=4 -fvisibility=hidden

SECURE_HOME = $(3RD_LIB_PATH)/huawei_security
SECURE_INC = $(SECURE_HOME)/include
SECURE_LIB = $(SECURE_HOME)/lib

SSL_HOME = $(3RD_LIB_PATH)/openssl
SSL_INC = $(SSL_HOME)/include
SSL_LIB = $(SSL_HOME)/lib

LZ4_HOME = $(3RD_LIB_PATH)/lz4
LZ4_INC = $(LZ4_HOME)/include
LZ4_LIB = $(LZ4_HOME)/lib

ZSTD_HOME = $(3RD_LIB_PATH)/zstd
ZSTD_INC = $(ZSTD_HOME)/include
ZSTD_LIB = $(ZSTD_HOME)/lib

CJSON_HOME = $(3RD_LIB_PATH)/cJSON
CJSON_INC = $(CJSON_HOME)/include
CJSON_LIB = $(CJSON_HOME)/lib

COMM_INC = $(SECURE_INC) \
           $(SSL_INC) \
           $(LZ4_INC) \
           $(ZSTD_INC) \
           $(CJSON_INC) \
           $(PROJECT_SOURCE_DIR)/src/callback \
           $(PROJECT_SOURCE_DIR)/src/common \
           $(PROJECT_SOURCE_DIR)/src/common/cm_concurrency \
           $(PROJECT_SOURCE_DIR)/src/common/cm_defines \
           $(PROJECT_SOURCE_DIR)/src/common/cm_network \
           $(PROJECT_SOURCE_DIR)/src/common/cm_security \
           $(PROJECT_SOURCE_DIR)/src/common/cm_struct \
           $(PROJECT_SOURCE_DIR)/src/common/cm_time \
           $(PROJECT_SOURCE_DIR)/src/common/cm_types \
           $(PROJECT_SOURCE_DIR)/src/common/cm_utils \
           $(PROJECT_SOURCE_DIR)/src/election \
           $(PROJECT_SOURCE_DIR)/src/interface \
           $(PROJECT_SOURCE_DIR)/src/metadata \
           $(PROJECT_SOURCE_DIR)/src/network \
           $(PROJECT_SOURCE_DIR)/src/network/compress \
           $(PROJECT_SOURCE_DIR)/src/network/mec \
           $(PROJECT_SOURCE_DIR)/src/network/protocol \
           $(PROJECT_SOURCE_DIR)/src/replication \
           $(PROJECT_SOURCE_DIR)/src/storage \
           $(PROJECT_SOURCE_DIR)/src/utils \

ifeq (x$(GCC_VERSION), x)
    GCC_VERSION = 7.3.0
endif

G_COMPILE_OPTIONS = -std=gnu99  $(OS_OPTIONS) $(OPTIMIZE_LEVEL) $(SECURE_OPTIONS) $(PROTECT_OPTIONS) $(WARNING_OPTIONS) $(OPTIMIZE_OPTIONS)

G_LINK_OPTIONS = $(SECURE_LINK_OPTS)
# secure opt
SKIP_RPATH = TRUE

COMPILE_OPTIONS += $(G_COMPILE_OPTIONS)
CFLAGS += $(COMPILE_OPTIONS)

COMPILE_MACRO += -DKNL_PREFIX -DWSEC_AES_GCM_SUPPORT -DWSEC_COMPILE_CAC_OPENSSL -DWSEC_COMPILE_SDP -DWSEC_USE_OPENSSL_110 -D_GNU_SOURCE -D_LARGEFILE64_SOURCE -D_REENTRANT -D__PERF_STAT__
CFLAGS += $(COMPILE_MACRO)
CFLAGS += $(DCF_LIB_VERSION_LDFLAG)
CPPFLAGS += $(addprefix -I,$(COMM_INC))
LDFLAGS += $(G_LINK_OPTIONS)

# 3rd things that we needed:


##########################################################################
# Recursive make support
##########################################################################
# ----------------------
# Instead of recursing through subdirectories with a for loop or
# repeated $(MAKE) -C whatever calls, this is a little smarter: it
# allows parallel make across directories and lets make -k and -q work
# correctly.

# We need the $(eval) function and order-only prerequisites, which are
# available in GNU make 3.80.  That also happens to be the version
# where the .VARIABLES variable was introduced, so this is a simple check.
ifndef .VARIABLES
$(error GNU make 3.80 or newer is required.  You are using version $(MAKE_VERSION))
endif

# This function is only for internal use below.  It should be called
# using $(eval).  It will set up a target so that it recurses into
# a given subdirectory.  Note that to avoid a nasty bug in make 3.80,
# this function has to avoid using any complicated constructs (like
# multiple targets on a line) and also not contain any lines that expand
# to more than about 200 bytes.  This is why we make it apply to just one
# subdirectory at a time, rather than to a list of subdirectories.
# $1: target name, e.g., all
# $2: subdir name
# $3: target to run in subdir, usually same as $1
standard_targets = all install installdirs uninstall distprep clean distclean maintainer-clean coverage check installcheck maintainer-check 2pccheck
define _create_recursive_target
.PHONY: $(1)-$(2)-recurse
$(1): $(1)-$(2)-recurse
$(1)-$(2)-recurse:
	$$(MAKE) -C $(2) $(3)
endef
# Note that the use of $$ on the last line above is important; we want
# $(MAKE) to be evaluated when the rule is run, not when the $(eval) is run
# to create the rule.  This is necessary to get make -q working.

# Call this function in a makefile that needs to recurse into subdirectories.
# In the normal case all arguments can be defaulted.
# $1: targets to make recursive (defaults to list of standard targets)
# $2: list of subdirs (defaults to SUBDIRS variable)
# $3: target to run in subdir (defaults to current element of $1)
recurse = $(foreach target,$(if $1,$1,$(standard_targets)),$(foreach subdir,$(if $2,$2,$(SUBDIRS)),$(eval $(call _create_recursive_target,$(target),$(subdir),$(if $3,$3,$(target))))))

# If a makefile's list of SUBDIRS varies depending on configuration, then
# any subdirectories excluded from SUBDIRS should instead be added to
# ALWAYS_SUBDIRS, and then it must call recurse_always as well as recurse.
# This ensures that distprep, distclean, etc will apply to all subdirectories.
# In the normal case all arguments will be defaulted.
# $1: targets to make recursive (defaults to standard_always_targets)
# $2: list of subdirs (defaults to ALWAYS_SUBDIRS variable)
# $3: target to run in subdir (defaults to current element of $1)
recurse_always = $(foreach target,$(if $1,$1,$(standard_always_targets)),$(foreach subdir,$(if $2,$2,$(ALWAYS_SUBDIRS)),$(eval $(call _create_recursive_target,$(target),$(subdir),$(if $3,$3,$(target))))))