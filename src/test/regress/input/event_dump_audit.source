--audit test

drop database if exists event_audit_b;
create database event_audit_b with dbcompatibility  'b';
\c event_audit_b

\! @abs_bindir@/gs_guc reload -D @abs_srcdir@/tmp_check/datanode1/ -c "audit_system_object=268435455" > /dev/null 2>&1
\! sleep 1s

drop event if exists e;
show audit_system_object;
create event e on schedule at '3000-01-01 00:00:00' disable do select 1;
select pg_sleep(1);
select detail_info from pg_query_audit(trunc((localtimestamp - interval '1' minute), 'second'), trunc(localtimestamp, 'second')) 
where database = 'event_audit_b' AND type='ddl_event';
drop event if exists e;
\! @abs_bindir@/gs_guc reload -D @abs_srcdir@/tmp_check/datanode1/ -c "audit_system_object" > /dev/null 2>&1

\c regression
drop database if exists event_audit_b;

--gs_dump
drop database if exists dump_ev;
create database dump_ev with dbcompatibility  'b';
\c dump_ev
create user event_dump_a with sysadmin password 'Test_event1';
set role  event_dump_a password 'Test_event1';
create event e on schedule at '3000-01-01 00:00:00' disable do select 1;
create event public.ea on schedule at '3000-01-01 00:00:00' disable do select 1;
select job_name from pg_job where dbname='dump_ev';

\c dump_ev
\! @abs_bindir@/gs_dump dump_ev -p @portstring@ -f @abs_bindir@/dump_ev.tar -n public -F t >/dev/null 2>&1; echo $?

drop database if exists restore_event_dump_db;
create database restore_event_dump_db with dbcompatibility  'b';

\! @abs_bindir@/gs_restore -d restore_event_dump_db -p @portstring@ @abs_bindir@/dump_ev.tar >/dev/null 2>&1; echo $?

\c restore_event_dump_db
select job_name, job_status,failure_msg from pg_job where dbname='restore_event_dump_db';

\c regression

drop database if exists dump_ev;
drop database if exists restore_event_dump_db;
