create table fulljoin_test(w_zip text);
create table fulljoin_test2(w_name varchar(20),w_tax int,w_street_2 varchar(50));
create table fulljoin_test3(d_id int);
create table fulljoin_test4(w_id int,w_ytd numeric(6,2));
SELECT
    fulljoin_test3.d_id
FROM
(
    SELECT
        alias2.w_name alias6 ,
        alias2.w_tax alias7,
        MOD(fulljoin_test4.w_id,
        fulljoin_test4.w_ytd + 10) alias8
    FROM
        fulljoin_test alias1
    FULL JOIN fulljoin_test2 alias2 ON
        alias1.w_zip = alias2.w_street_2,
        fulljoin_test4)alias9
FULL JOIN fulljoin_test3 ON
    alias9.alias7 != fulljoin_test3.d_id
WHERE
    alias9.alias8 = 2
    OR alias9.alias7 = 2;
 d_id 
------
(0 rows)

with alias11 as(select 1 alias1 from fulljoin_test),
alias25 as(select * from (with alias19 as (select rownum from fulljoin_test2)select * from alias19)alias18)
select * from alias11,alias25 full join fulljoin_test3 on 1=1 full join fulljoin_test4 on 1=1 where 1=1;
 alias1 | rownum | d_id | w_id | w_ytd 
--------+--------+------+------+-------
(0 rows)

explain (costs off) with alias11 as(select 1 alias1 from fulljoin_test),
alias25 as(select * from (with alias19 as (select rownum from fulljoin_test2)select * from alias19)alias18)
select * from alias11,alias25 full join fulljoin_test3 on 1=1 full join fulljoin_test4 on 1=1 where 1=1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Nested Loop
   CTE alias25
     ->  CTE Scan on alias19
           CTE alias19
             ->  Seq Scan on fulljoin_test2
   ->  Result
         ->  Append
               ->  Nested Loop Left Join
                     CTE alias25
                       ->  CTE Scan on alias19
                             CTE alias19
                               ->  Seq Scan on fulljoin_test2
                     ->  Result
                           ->  Append
                                 ->  Nested Loop Left Join
                                       CTE alias25
                                         ->  CTE Scan on alias19
                                               CTE alias19
                                                 ->  Seq Scan on fulljoin_test2
                                       ->  CTE Scan on alias25
                                       ->  Materialize
                                             ->  Seq Scan on fulljoin_test3
                                 ->  Nested Loop Left Anti Full Join
                                       CTE alias25
                                         ->  CTE Scan on alias19
                                               CTE alias19
                                                 ->  Seq Scan on fulljoin_test2
                                       ->  Seq Scan on fulljoin_test3
                                       ->  CTE Scan on alias25
                     ->  Materialize
                           ->  Seq Scan on fulljoin_test4
               ->  Nested Loop Left Anti Full Join
                     CTE alias25
                       ->  CTE Scan on alias19
                             CTE alias19
                               ->  Seq Scan on fulljoin_test2
                     ->  Seq Scan on fulljoin_test4
                     ->  Materialize
                           ->  Result
                                 ->  Append
                                       ->  Nested Loop Left Join
                                             CTE alias25
                                               ->  CTE Scan on alias19
                                                     CTE alias19
                                                       ->  Seq Scan on fulljoin_test2
                                             ->  CTE Scan on alias25
                                             ->  Materialize
                                                   ->  Seq Scan on fulljoin_test3
                                       ->  Nested Loop Left Anti Full Join
                                             CTE alias25
                                               ->  CTE Scan on alias19
                                                     CTE alias19
                                                       ->  Seq Scan on fulljoin_test2
                                             ->  Seq Scan on fulljoin_test3
                                             ->  CTE Scan on alias25
   ->  Materialize
         ->  Seq Scan on fulljoin_test
(57 rows)

drop table fulljoin_test;
drop table fulljoin_test2;
drop table fulljoin_test3;
drop table fulljoin_test4;
CREATE TABLE IF NOT EXISTS fj_t0(c0 int4range , c1 REAL PRIMARY KEY, CHECK(((upper_inf(fj_t0.c0))OR((((reverse(')<'))LIKE(md5(')]/fK')))) IS TRUE))), UNIQUE(c1));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fj_t0_pkey" for table "fj_t0"
CREATE UNLOGGED TABLE IF NOT EXISTS fj_t1(LIKE fj_t0);
CREATE TABLE IF NOT EXISTS fj_t2(LIKE fj_t0);
CREATE UNLOGGED TABLE fj_t3(LIKE fj_t1);
SELECT 1 FROM (SELECT  1  FROM fj_t3 LEFT OUTER JOIN (SELECT  (((upper(fj_t0.c0))+(length('1')))) FROM fj_t0)  ON (TRUE)  FULL OUTER JOIN (SELECT 1 FROM fj_t1 ) AS sub1 ON 1 FULL OUTER JOIN (SELECT 1 FROM fj_t2) AS sub2 ON 1) as res;
 ?column? 
----------
(0 rows)

drop table fj_t3;
drop table fj_t2;
drop table fj_t1;
drop table fj_t0;
create table fulltest(col int4 primary key ,w_col numeric(6,2));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fulltest_pkey" for table "fulltest"
create table fulltest2(w_id int4 primary key,w_ytd numeric(6,2),w_zip bpchar(27));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fulltest2_pkey" for table "fulltest2"
explain (verbose, costs off) select left(alias8.w_zip ,alias8.w_id) as alias10,true alias11,dense_rank() over(order by 1) alias12 from fulltest alias7 full join fulltest2 as alias8  on alias7.col!=alias8.w_ytd group by alias7.col,alias7.w_col ,alias8.w_id;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 WindowAgg
   Output: "left"((subquery.w_zip)::text, subquery.w_id), true, dense_rank() OVER (), subquery.col, subquery.w_col, subquery.w_id, (1)
   ->  HashAggregate
         Output: subquery.col, subquery.w_col, subquery.w_id, 1, subquery.w_zip
         Group By Key: subquery.col, subquery.w_col, subquery.w_id
         ->  Subquery Scan on subquery
               Output: subquery.col, subquery.w_col, subquery.w_id, subquery.w_zip
               ->  Result
                     Output: alias7.col, alias7.w_col, alias8.w_id, alias8.w_ytd, alias8.w_zip
                     ->  Append
                           ->  Nested Loop Left Join
                                 Output: alias7.col, alias7.w_col, alias8.w_id, alias8.w_ytd, alias8.w_zip
                                 Join Filter: ((alias7.col)::numeric <> alias8.w_ytd)
                                 ->  Seq Scan on public.fulltest alias7
                                       Output: alias7.col, alias7.w_col
                                 ->  Materialize
                                       Output: alias8.w_id, alias8.w_ytd, alias8.w_zip
                                       ->  Seq Scan on public.fulltest2 alias8
                                             Output: alias8.w_id, alias8.w_ytd, alias8.w_zip
                           ->  Nested Loop Left Anti Full Join
                                 Output: alias7.col, alias7.w_col, alias8.w_id, alias8.w_ytd, alias8.w_zip
                                 Join Filter: ((alias7.col)::numeric <> alias8.w_ytd)
                                 ->  Seq Scan on public.fulltest2 alias8
                                       Output: alias8.w_id, alias8.w_ytd, alias8.w_zip
                                 ->  Materialize
                                       Output: alias7.col, alias7.w_col
                                       ->  Seq Scan on public.fulltest alias7
                                             Output: alias7.col, alias7.w_col
(28 rows)

select left(alias8.w_zip ,alias8.w_id) as alias10,true alias11,dense_rank() over(order by 1) alias12 from fulltest alias7 full join fulltest2 as alias8  on alias7.col!=alias8.w_ytd group by alias7.col,alias7.w_col ,alias8.w_id;
 alias10 | alias11 | alias12 
---------+---------+---------
(0 rows)

drop table fulltest;
drop table fulltest2;
CREATE TABLE fj_table0 ( column32 INT , column36 INT ) ;
SELECT 1 FROM fj_table0 LEFT JOIN ( SELECT 1 column29 FROM fj_table0 FULL JOIN fj_table0 AS alias0 ON FALSE ) AS alias1 ON TRUE WHERE column29 = 1 ;
 ?column? 
----------
(0 rows)

explain (costs off) SELECT 1 FROM fj_table0 LEFT JOIN ( SELECT 1 column29 FROM fj_table0 FULL JOIN fj_table0 AS alias0 ON FALSE ) AS alias1 ON TRUE WHERE column29 = 1 ;
                      QUERY PLAN                      
------------------------------------------------------
 Nested Loop Left Join
   Filter: ((1) = 1)
   ->  Seq Scan on fj_table0
   ->  Materialize
         ->  Merge Full Join
               Join Filter: false
               ->  Seq Scan on fj_table0
               ->  Materialize
                     ->  Seq Scan on fj_table0 alias0
(9 rows)

drop table fj_table0;
-- contain system column, don't rewrite full join
explain (costs off) select t1.oid from pg_class t1 full join pg_constraint t2 on t1.relname = t2.conname;
                QUERY PLAN                
------------------------------------------
 Hash Full Join
   Hash Cond: (t1.relname = t2.conname)
   ->  Seq Scan on pg_class t1
   ->  Hash
         ->  Seq Scan on pg_constraint t2
(5 rows)

