/* unsupported */
create schema invisible_index;
set search_path to 'invisible_index';
create table t1 (a int, b int, constraint key1 primary key(a) visible);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "key1" for table "t1"
alter table t1 alter index key1 invisible;
alter table t1 add constraint key2 unique (b) visible;
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "key2" for table "t1"
create table t2 (a int, b int, constraint key3 primary key(a) invisible);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "key3" for table "t2"
alter table t2 alter index key3 visible;
alter table t2 add constraint key4 unique (b) invisible;
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "key4" for table "t2"
create table t3 (a int, b int);
create index key5 on t3(a) visible;
select indkey, indisvisible from pg_index where indrelid = 't3'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | t
(1 row)

alter index key5 invisible;
select indkey, indisvisible from pg_index where indrelid = 't3'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | f
(1 row)

create table t4 (a int, b int);
create index key6 on t4(a) invisible;
select indkey, indisvisible from pg_index where indrelid = 't4'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | f
(1 row)

alter index key6 visible;
select indkey, indisvisible from pg_index where indrelid = 't4'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | t
(1 row)

reset search_path;
drop schema invisible_index cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table invisible_index.t1
drop cascades to table invisible_index.t2
drop cascades to table invisible_index.t3
drop cascades to table invisible_index.t4
create database invisible_index_db dbcompatibility 'B';
\c invisible_index_db
-- create table with index
create table t1 (a int, b int, constraint key_a primary key(a) visible);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "key_a" for table "t1"
create index key_b on t1 (b) invisible;
alter table t1 alter index key_b visible, alter index key_b invisible;
select indkey, indisvisible from pg_index where indrelid = 't1'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | t
 2      | f
(2 rows)

create table t3 (a int, b int);
create index key5 on t3(a) visible;
select indkey, indisvisible from pg_index where indrelid = 't3'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | t
(1 row)

alter index key5 invisible;
select indkey, indisvisible from pg_index where indrelid = 't3'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | f
(1 row)

create table t4 (a int, b int);
create index key6 on t4(a) invisible;
select indkey, indisvisible from pg_index where indrelid = 't4'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | f
(1 row)

alter index key6 visible;
select indkey, indisvisible from pg_index where indrelid = 't4'::regclass order by indkey;
 indkey | indisvisible 
--------+--------------
 1      | t
(1 row)

insert into t1 values (generate_series(1, 100), generate_series(1, 100));
analyze t1;
set enable_seqscan = off;
-- error
alter table key_b alter index key_b invisible;
ERROR:  can not set visible for relation key_b, as it is not a ordinary table
create view v1 as select * from t1;
alter table v1 alter index key_b invisible;
ERROR:  can not set visible for relation v1, as it is not a ordinary table
-- modify invisible status
explain (costs off) select * from t1 where a < 10;
          QUERY PLAN          
------------------------------
 [Bypass]
 Index Scan using key_a on t1
   Index Cond: (a < 10)
(3 rows)

alter table t1 alter index key_a invisible;
explain (costs off) select * from t1 where a < 10;
     QUERY PLAN     
--------------------
 Seq Scan on t1
   Filter: (a < 10)
(2 rows)

explain (costs off) select * from t1 where b < 10;
     QUERY PLAN     
--------------------
 Seq Scan on t1
   Filter: (b < 10)
(2 rows)

alter table t1 alter index key_b visible;
explain (costs off) select * from t1 where b < 10;
          QUERY PLAN          
------------------------------
 [Bypass]
 Index Scan using key_b on t1
   Index Cond: (b < 10)
(3 rows)

-- test alter table add constraint with visible
drop index key_b;
alter table t1 add constraint key_b unique (b) visible;
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "key_b" for table "t1"
explain (costs off) select * from t1 where b < 10;
          QUERY PLAN          
------------------------------
 [Bypass]
 Index Scan using key_b on t1
   Index Cond: (b < 10)
(3 rows)

alter table t1 alter index key_b invisible;
explain (costs off) select * from t1 where b < 10;
     QUERY PLAN     
--------------------
 Seq Scan on t1
   Filter: (b < 10)
(2 rows)

-- hybrid test unusable and invisible
alter index key_b unusable;
alter table t1 alter index key_b visible;
explain (costs off) select * from t1 where b < 10;
     QUERY PLAN     
--------------------
 Seq Scan on t1
   Filter: (b < 10)
(2 rows)

alter index key_b rebuild;
explain (costs off) select * from t1 where b < 10;
          QUERY PLAN          
------------------------------
 [Bypass]
 Index Scan using key_b on t1
   Index Cond: (b < 10)
(3 rows)

-- test partitioned table
CREATE TABLE t_partition(a int, b int)
PARTITION BY RANGE (a)
(
    PARTITION P1 VALUES LESS THAN(50),
    PARTITION P2 VALUES LESS THAN(100),
    PARTITION P3 VALUES LESS THAN(150)
);
insert into t_partition values (generate_series(1, 100), generate_series(1, 100));
analyze t_partition;
create index global_idx on t_partition(b) global;
explain (costs off) select * from t_partition where b < 10;
              QUERY PLAN               
---------------------------------------
 Bitmap Heap Scan on t_partition
   Recheck Cond: (b < 10)
   ->  Bitmap Index Scan on global_idx
         Index Cond: (b < 10)
(4 rows)

alter table t_partition alter index global_idx invisible;
explain (costs off) select * from t_partition where b < 10;
                QUERY PLAN                 
-------------------------------------------
 Partition Iterator
   Iterations: 3
   ->  Partitioned Seq Scan on t_partition
         Filter: (b < 10)
         Selected Partitions:  1..3
(5 rows)

drop index global_idx;
create index local_idx on t_partition(b) local;
explain (costs off) select * from t_partition partition (p1) where b < 10;
                    QUERY PLAN                    
--------------------------------------------------
 Partitioned Bitmap Heap Scan on t_partition
   Recheck Cond: (b < 10)
   Selected Partitions:  1
   ->  Partitioned Bitmap Index Scan on local_idx
         Index Cond: (b < 10)
         Selected Partitions:  1
(6 rows)

alter table t_partition alter index local_idx invisible;
explain (costs off) select * from t_partition partition (p1) where b < 10;
             QUERY PLAN              
-------------------------------------
 Partitioned Seq Scan on t_partition
   Filter: (b < 10)
   Selected Partitions:  1
(3 rows)

-- test oriented-column table
create table c1 (a int, b int, constraint ckey_a primary key(a) visible) with (orientation = column);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ckey_a" for table "c1"
insert into c1 values (generate_series(1, 100), generate_series(1, 100));
analyze c1;
set enable_seqscan = off;
-- modify invisible status
explain (costs off) select * from c1 where a < 10;
                 QUERY PLAN                 
--------------------------------------------
 Row Adapter
   ->  CStore Index Scan using ckey_a on c1
         Index Cond: (a < 10)
(3 rows)

alter table c1 alter index ckey_a invisible;
explain (costs off) select * from c1 where a < 10;
        QUERY PLAN        
--------------------------
 Row Adapter
   ->  CStore Scan on c1
         Filter: (a < 10)
(3 rows)

-- test other index type
alter table t1 drop constraint key_b;
create index key_b on t1 using hash (b) visible;
explain (costs off) select * from t1 where b = 10;
          QUERY PLAN          
------------------------------
 Index Scan using key_b on t1
   Index Cond: (b = 10)
(2 rows)

alter table t1 alter index key_b invisible;
explain (costs off) select * from t1 where b = 10;
     QUERY PLAN     
--------------------
 Seq Scan on t1
   Filter: (b = 10)
(2 rows)

create table test_cgin_t1(id int, name varchar(1000)) with (orientation=column);
insert into test_cgin_t1 values(1, 'apple');
insert into test_cgin_t1 values(2, 'pear');
insert into test_cgin_t1 values(3, 'apple pear');
create index cgin_idx_1 on test_cgin_t1 using gin(to_tsvector('ngram',name)) with (fastupdate = on);
explain (costs off) select count(*) from test_cgin_t1 where to_tsvector('ngram',name)@@to_tsquery('ngram','pear');
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Index Heap Scan on test_cgin_t1
               Recheck Cond: (to_tsvector('ngram'::regconfig, (name)::text) @@ '''pe'' & ''ea'' & ''ar'''::tsquery)
               ->  CStore Index Ctid Scan on cgin_idx_1
                     Index Cond: (to_tsvector('ngram'::regconfig, (name)::text) @@ '''pe'' & ''ea'' & ''ar'''::tsquery)
(6 rows)

alter table test_cgin_t1 alter index cgin_idx_1 invisible;
explain (costs off) select count(*) from test_cgin_t1 where to_tsvector('ngram',name)@@to_tsquery('ngram','pear');
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on test_cgin_t1
               Filter: (to_tsvector('ngram'::regconfig, (name)::text) @@ '''pe'' & ''ea'' & ''ar'''::tsquery)
(4 rows)

\c regression
drop database invisible_index_db;
