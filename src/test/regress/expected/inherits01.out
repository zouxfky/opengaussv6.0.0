-- inherit
CREATE DATABASE inherit_base;
\c inherit_base;
--analyze
CREATE TABLE dep AS SELECT mod(i,10000) a,
                              mod(i,10000) b
                        FROM generate_series(1,100000) s(i);
CREATE TABLE dep_son() inherits(dep);
INSERT INTO dep_son(a,b) SELECT (10000 * random())::int a,
                              (10000 * random())::int b
                            FROM generate_series(1,100000) s(i);
analyze;
EXPLAIN ANALYZE SELECT a FROM dep WHERE b < 5000 GROUP BY a;
--?.*
--?.*
--?.*
   Group By Key: public.dep.a
--?.*
--?.*
               Filter: (b < 5000)
               Rows Removed by Filter: 50000
--?.*
               Filter: (b < 5000)
--?.*
--?.*
(10 rows)

EXPLAIN ANALYZE SELECT a FROM ONLY dep WHERE b < 5000 GROUP BY a;
--?.*
--?.*
--?.*
   Group By Key: a
--?.*
         Filter: (b < 5000)
--?.*
--?.*
(6 rows)

drop table dep cascade;
NOTICE:  drop cascades to table dep_son
-- iud view
create table grandfather
( id int not null,
  grandfather1_name varchar(64),
  g_age int  DEFAULT 80,
  primary key(id)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grandfather_pkey" for table "grandfather"
insert into grandfather
(id, grandfather1_name)values
(0,'A0');
create table father
( father1_name varchar(64),
  f_age int DEFAULT 60
)inherits(grandfather);
insert into father
(id, grandfather1_name, father1_name)values
(1,'A1','B1'),
(2,'A2','B2');
CREATE VIEW g_v AS select * from grandfather;
CREATE VIEW f_v AS select * from father;
select * from g_v; 
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
(3 rows)

select * from f_v;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
(2 rows)

insert into f_v
(id, grandfather1_name, father1_name)values
(3,'A3','B3');
select * from g_v; 
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
  3 | A3                |    80
(4 rows)

select * from f_v;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
  3 | A3                |    80 | B3           |    60
(3 rows)

delete from g_v where id=3;
select * from g_v; 
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
(3 rows)

select * from f_v;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
(2 rows)

update g_v set grandfather1_name='A9' where id=2;
select * from g_v; 
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A9                |    80
(3 rows)

select * from f_v;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A9                |    80 | B2           |    60
(2 rows)

DROP VIEW g_v;
DROP VIEW f_v;
DROP TABLE grandfather CASCADE;
NOTICE:  drop cascades to table father
-- column
CREATE TABLE grandfather1
( id int not null,
  grandfather1_name varchar(64),
  g_age int DEFAULT 80,
  primary key(id)
) WITH (ORIENTATION = COLUMN);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grandfather1_pkey" for table "grandfather1"
insert into grandfather1
(id, grandfather1_name)values
(0,'A0');
CREATE TABLE father1
( father1_name varchar(64),
  f_age int DEFAULT 60
)inherits(grandfather1) WITH (ORIENTATION = COLUMN);-- error
ERROR:  Unsupport feature
DETAIL:  cstore/timeseries don't support relation defination with inheritance.
DROP TABLE grandfather1 CASCADE;
-- normal table inherit temporary
create temporary table tmp1(col1 int, col2 int);
create table normal(col3 int)inherits(tmp1);-- error
ERROR:  cannot inherit from temporary relation "tmp1"
drop table tmp1;
-- temporary table inherit normal
create table normal(col1 int);
create temporary table tmp1(col1 int, col2 int)inherits(normal);
NOTICE:  merging column "col1" with inherited definition
create temporary table tmp2(col0 int)inherits(tmp1);
create temporary table tmp3()inherits(normal, tmp1);
NOTICE:  merging multiple inherited definitions of column "col1"
\d tmp1
--?.*
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 col2   | integer | 
Inherits: normal
Number of child tables: 2 (Use \d+ to list them.)

\d normal
    Table "public.normal"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
Number of child tables: 2 (Use \d+ to list them.)

alter table normal add column sex Boolean;
NOTICE:  merging definition of column "sex" for child "tmp3"
\d tmp1
--?.*
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 col2   | integer | 
 sex    | boolean | 
Inherits: normal
Number of child tables: 2 (Use \d+ to list them.)

\d normal
    Table "public.normal"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 sex    | boolean | 
Number of child tables: 2 (Use \d+ to list them.)

alter table tmp2 add constraint test_pkey primary key(col0);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_pkey" for table "tmp2"
\d tmp2
--?.*
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 col2   | integer | 
 col0   | integer | not null
 sex    | boolean | 
Indexes:
    "test_pkey" PRIMARY KEY, btree (col0) TABLESPACE pg_default
Inherits: tmp1

\d normal
    Table "public.normal"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 sex    | boolean | 
Number of child tables: 2 (Use \d+ to list them.)

alter table normal add constraint test2_pkey primary key(col1);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test2_pkey" for table "normal"
\d tmp1
--?.*
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 col2   | integer | 
 sex    | boolean | 
Inherits: normal
Number of child tables: 2 (Use \d+ to list them.)

\d tmp2
--?.*
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | 
 col2   | integer | 
 col0   | integer | not null
 sex    | boolean | 
Indexes:
    "test_pkey" PRIMARY KEY, btree (col0) TABLESPACE pg_default
Inherits: tmp1

\d normal
    Table "public.normal"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col1   | integer | not null
 sex    | boolean | 
Indexes:
    "test2_pkey" PRIMARY KEY, btree (col1) TABLESPACE pg_default
Number of child tables: 2 (Use \d+ to list them.)

drop table tmp3;
drop table tmp2;
drop table tmp1;
drop table normal;
-- partition
CREATE TABLE plt_father1
( id int not null,
  primary key(id)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "plt_father1_pkey" for table "plt_father1"
CREATE TABLE plt(
 id serial primary key,
 col1 varchar(8)) inherits(plt_father1)
 partition by range(id)
 (
   partition p1 values less than(10),
   partition p2 values less than(20),
   partition p3 values less than(30),
   partition p4 values less than(maxvalue)
 );-- error
NOTICE:  CREATE TABLE will create implicit sequence "plt_id_seq" for serial column "plt.id"
ERROR:  unsupport inherits clause for partitioned table
DROP TABLE plt_father1 CASCADE;
CREATE TABLE plt(
 id serial primary key,
 col1 varchar(8))
 partition by range(id)
 (
   partition p1 values less than(10),
   partition p2 values less than(20),
   partition p3 values less than(30),
   partition p4 values less than(maxvalue)
 );
NOTICE:  CREATE TABLE will create implicit sequence "plt_id_seq" for serial column "plt.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "plt_pkey" for table "plt"
CREATE TABLE plt_son
( id int not null,
  primary key(id)
) inherits(plt);-- error
ERROR:  inherited relation "plt" is a partitioned table
DETAIL:  can not inherit from partitioned table
DROP TABLE plt CASCADE;
-- origin
CREATE TABLE grandfather1
( id int not null,
  grandfather1_name varchar(64),
  g_age int DEFAULT 80,
  primary key(id)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grandfather1_pkey" for table "grandfather1"
INSERT INTO grandfather1
(id, grandfather1_name) VALUES
(0,'A0');
CREATE TABLE father1
( father1_name varchar(64),
  f_age int DEFAULT 60
)inherits(grandfather1);
INSERT INTO father1
(id, grandfather1_name, father1_name) VALUES
(1,'A1','B1'),
(2,'A2','B2');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
(3 rows)

SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
(2 rows)

DELETE FROM grandfather1 WHERE ID=2;
SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
(1 row)

UPDATE grandfather1 SET grandfather1_name='A100' WHERE ID=0;
UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;
                                ^
UPDATE grandfather1 SET grandfather1_name='A99' WHERE ID=1;
UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;
                                ^
UPDATE father1 SET father1_name='B99' WHERE ID=1;
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
(2 rows)

CREATE TABLE son1
( son1_name varchar(64),
  s_age int DEFAULT 30
)inherits(father1);
INSERT INTO son1
(id, grandfather1_name, father1_name, son1_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A3                |    80
  4 | A4                |    80
(4 rows)

SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
  4 | A4                |    80 | B4           |    60 | C4        |    30
(2 rows)

DELETE FROM grandfather1 WHERE ID=4;
SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
(1 row)

UPDATE grandfather1 SET grandfather1_name='A300' WHERE ID=3;
UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;
                                ^
UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;-- error
ERROR:  column "son1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;
                                ^
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A300              |    80
(3 rows)

ALTER TABLE grandfather1 RENAME TO grandfather0;
ALTER TABLE grandfather0 DROP COLUMN s_age CASCADE;-- error
ERROR:  column "s_age" of relation "grandfather0" does not exist
ALTER TABLE grandfather0 rename COLUMN f_age TO father_age;-- error
ERROR:  column "f_age" does not exist
ALTER TABLE grandfather0 rename COLUMN g_age TO grandfather_age;
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

ALTER TABLE ONLY grandfather0 rename COLUMN grandfather_age TO grand_age;-- error
ERROR:  inherited column "grandfather_age" must be renamed in child tables too
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

SELECT * FROM only grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
(1 row)

DROP TABLE grandfather0 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table father1
drop cascades to table son1
CREATE TABLE father2
( id int not null,
  father2_name varchar(64),
  f2_age int DEFAULT 60
);
CREATE TABLE father3
( id int not null,
  father3_name varchar(64),
  f3_age int DEFAULT 60
);
CREATE TABLE son2
( son2_name varchar(64),
  s_age int DEFAULT 30
)inherits(father2,father3);
NOTICE:  merging multiple inherited definitions of column "id"
INSERT INTO son2
(id, father2_name, father3_name, son2_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 id | father2_name | f2_age 
----+--------------+--------
  3 | A3           |     60
  4 | A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

ALTER TABLE father2 DROP COLUMN id CASCADE;
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A3           |     60
 A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

DELETE FROM father3 WHERE son2_name='C4';-- error
ERROR:  column "son2_name" does not exist
LINE 1: DELETE FROM father3 WHERE son2_name='C4';
                                  ^
DELETE FROM father3 WHERE id=3;
SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A4           |     60
(1 row)

DROP TABLE IF EXISTS son2 cascade;
DROP TABLE IF EXISTS father2 cascade;
DROP TABLE IF EXISTS father3 cascade;
SET enable_indexonlyscan = off;
CREATE TABLE events (event_id int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "events_pkey" for table "events"
CREATE TABLE other_events (event_id int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "other_events_pkey" for table "other_events"
CREATE TABLE events_child1 () inherits (events);
INSERT INTO events_child1 (event_id) VALUES (5);
INSERT INTO events_child1 (event_id) VALUES (1);
INSERT INTO events (event_id) VALUES (2);
INSERT INTO other_events(event_id) VALUES (3);
-- order by
SELECT event_id
 FROM (SELECT event_id FROM events
       union all
       SELECT event_id FROM other_events) ss
 order by event_id;
 event_id 
----------
        1
        2
        3
        5
(4 rows)

DROP TABLE events_child1, events, other_events;
RESET enable_indexonlyscan;
-- inherit multi tables
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father_z82rgvsefn PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father_z82rgvsefn" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2_z82rgvsefn PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2_z82rgvsefn" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3_z82rgvsefn PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3_z82rgvsefn" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2022() inherits(father,father2,father3);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father2 including all) inherits(father,father2,father3);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "kid_2021_pkey" for table "kid_2021"
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "kid_2021_pkey" PRIMARY KEY, btree (id) TABLESPACE pg_default
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

DROP TABLE father CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table kid_2022
drop cascades to table kid_2021
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
-- like father and including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father) inherits(father);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
CREATE TABLE kid_2022(like father including all) inherits(father);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
NOTICE:  merging constraint "father_salary_check" with inherited definition
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "kid_2022_pkey" for table "kid_2022"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "kid_2022_md_attr_key" for table "kid_2022"
CREATE TABLE kid_2023(like father) inherits(father);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "kid_2022_pkey" PRIMARY KEY, btree (id) TABLESPACE pg_default
    "kid_2022_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
SELECT count(*) FROM father;
 count 
-------
     7
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 505 | 22      |      1 |   2 |       
 503 | 52      |      2 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(7 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 505 | 22
 503 | 52
 506 | 23
 507 | 23
(7 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  cannot drop inherited constraint "father_salary_check" of relation "kid_2022"
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  cannot rename inherited constraint "father_salary_check"
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "new_constraint_namepk" PRIMARY KEY, btree (id) TABLESPACE pg_default
    "kid_2022_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child have num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "new_constraint_namepk" PRIMARY KEY, btree (id) TABLESPACE pg_default
    "kid_2022_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "new_constraint_namepk" PRIMARY KEY, btree (id) TABLESPACE pg_default
    "kid_2022_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
-- not like father not including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021() inherits(father);
CREATE TABLE kid_2022() inherits(father);
CREATE TABLE kid_2023() inherits(father);
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
SELECT count(*) FROM father;
 count 
-------
     7
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 505 | 22      |      1 |   2 |       
 503 | 52      |      2 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(7 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 505 | 22
 503 | 52
 506 | 23
 507 | 23
(7 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  cannot drop inherited constraint "father_salary_check" of relation "kid_2022"
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  cannot rename inherited constraint "father_salary_check"
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;-- error
ERROR:  constraint "kid_2022_pkey" for table "kid_2022" does not exist
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child without num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";-- error
ERROR:  constraint "new_constraint_namepk" of relation "kid_2022" does not exist
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
\c regression
DROP DATABASE inherit_base;
-- ustore
CREATE DATABASE inherit_ustore;
\c inherit_ustore;
CREATE TABLE grandfather1
( id int not null,
  grandfather1_name varchar(64),
  g_age int DEFAULT 80,
  primary key(id)
) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grandfather1_pkey" for table "grandfather1"
INSERT INTO grandfather1
(id, grandfather1_name) VALUES
(0,'A0');
CREATE TABLE father1
( father1_name varchar(64),
  f_age int DEFAULT 60
)inherits(grandfather1) WITH (storage_type=ustore);
INSERT INTO father1
(id, grandfather1_name, father1_name) VALUES
(1,'A1','B1'),
(2,'A2','B2');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
(3 rows)

SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
(2 rows)

DELETE FROM grandfather1 WHERE ID=2;
SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
(1 row)

UPDATE grandfather1 SET grandfather1_name='A100' WHERE ID=0;
UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;
                                ^
UPDATE grandfather1 SET grandfather1_name='A99' WHERE ID=1;
UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;
                                ^
UPDATE father1 SET father1_name='B99' WHERE ID=1;
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
(2 rows)

CREATE TABLE son1
( son1_name varchar(64),
  s_age int DEFAULT 30
)inherits(father1) WITH (storage_type=ustore);
INSERT INTO son1
(id, grandfather1_name, father1_name, son1_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A3                |    80
  4 | A4                |    80
(4 rows)

SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
  4 | A4                |    80 | B4           |    60 | C4        |    30
(2 rows)

DELETE FROM grandfather1 WHERE ID=4;
SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
(1 row)

UPDATE grandfather1 SET grandfather1_name='A300' WHERE ID=3;
UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;
                                ^
UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;-- error
ERROR:  column "son1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;
                                ^
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A300              |    80
(3 rows)

ALTER TABLE grandfather1 RENAME TO grandfather0;
ALTER TABLE grandfather0 DROP COLUMN s_age CASCADE;-- error
ERROR:  column "s_age" of relation "grandfather0" does not exist
ALTER TABLE grandfather0 rename COLUMN f_age TO father_age;-- error
ERROR:  column "f_age" does not exist
ALTER TABLE grandfather0 rename COLUMN g_age TO grandfather_age;
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

ALTER TABLE ONLY grandfather0 rename COLUMN grandfather_age TO grand_age;-- error
ERROR:  inherited column "grandfather_age" must be renamed in child tables too
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

SELECT * FROM only grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
(1 row)

DROP TABLE grandfather0 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table father1
drop cascades to table son1
CREATE TABLE father2
( id int not null,
  father2_name varchar(64),
  f2_age int DEFAULT 60
) WITH (storage_type=ustore);
CREATE TABLE father3
( id int not null,
  father3_name varchar(64),
  f3_age int DEFAULT 60
) WITH (storage_type=ustore);
CREATE TABLE son2
( son2_name varchar(64),
  s_age int DEFAULT 30
)inherits(father2,father3) WITH (storage_type=ustore);
NOTICE:  merging multiple inherited definitions of column "id"
INSERT INTO son2
(id, father2_name, father3_name, son2_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 id | father2_name | f2_age 
----+--------------+--------
  3 | A3           |     60
  4 | A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

ALTER TABLE father2 DROP COLUMN id CASCADE;
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A3           |     60
 A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

DELETE FROM father3 WHERE son2_name='C4';-- error
ERROR:  column "son2_name" does not exist
LINE 1: DELETE FROM father3 WHERE son2_name='C4';
                                  ^
DELETE FROM father3 WHERE id=3;
SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A4           |     60
(1 row)

DROP TABLE IF EXISTS son2 cascade;
DROP TABLE IF EXISTS father2 cascade;
DROP TABLE IF EXISTS father3 cascade;
SET enable_indexonlyscan = off;
CREATE TABLE events (event_id int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "events_pkey" for table "events"
CREATE TABLE other_events (event_id int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "other_events_pkey" for table "other_events"
CREATE TABLE events_child1 () inherits (events);
INSERT INTO events_child1 (event_id) VALUES (5);
INSERT INTO events_child1 (event_id) VALUES (1);
INSERT INTO events (event_id) VALUES (2);
INSERT INTO other_events(event_id) VALUES (3);
-- order by
SELECT event_id
 FROM (SELECT event_id FROM events
       union all
       SELECT event_id FROM other_events) ss
 order by event_id;
 event_id 
----------
        1
        2
        3
        5
(4 rows)

DROP TABLE events_child1, events, other_events;
RESET enable_indexonlyscan;
-- inherit multi tables
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (storage_type=ustore);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father_z82rgvsefn PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father_z82rgvsefn" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2_z82rgvsefn PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2_z82rgvsefn" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3_z82rgvsefn PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3_z82rgvsefn" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2022() inherits(father,father2,father3) WITH (storage_type=ustore);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father2 including all) inherits(father,father2,father3) WITH (storage_type=ustore);-- error
ERROR:  unsupport "like clause including reloptions" together with "with"
DETAIL:  use either "like clause including reloptions" or "with" clause
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

\d kid_2021
DROP TABLE father CASCADE;
NOTICE:  drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
-- ustore like father and including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (storage_type=ustore);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3) WITH (storage_type=ustore);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father) inherits(father) WITH (storage_type=ustore);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
CREATE TABLE kid_2022(like father including all) inherits(father) WITH (storage_type=ustore);-- error
ERROR:  unsupport "like clause including reloptions" together with "with"
DETAIL:  use either "like clause including reloptions" or "with" clause
CREATE TABLE kid_2023(like father) inherits(father) WITH (storage_type=ustore);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);-- error
ERROR:  relation "kid_2022" does not exist on datanode1
LINE 1: INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
                    ^
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(5 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 506 | 23
 507 | 23
(5 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  relation "kid_2022" does not exist
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  relation "kid_2022" does not exist
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;
ERROR:  relation "kid_2022" does not exist
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child have num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";-- error
ERROR:  relation "kid_2022" does not exist
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
-- ustore not like father not including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (storage_type=ustore);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    ) WITH (storage_type=ustore);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3) WITH (storage_type=ustore);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021() inherits(father) WITH (storage_type=ustore);
CREATE TABLE kid_2022() inherits(father) WITH (storage_type=ustore);
CREATE TABLE kid_2023() inherits(father) WITH (storage_type=ustore);
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
SELECT count(*) FROM father;
 count 
-------
     7
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 505 | 22      |      1 |   2 |       
 503 | 52      |      2 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(7 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 505 | 22
 503 | 52
 506 | 23
 507 | 23
(7 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  cannot drop inherited constraint "father_salary_check" of relation "kid_2022"
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  cannot rename inherited constraint "father_salary_check"
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;-- error
ERROR:  constraint "kid_2022_pkey" for table "kid_2022" does not exist
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child without num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, ubtree (id) WITH (storage_type=ustore) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, ubtree (md_attr) WITH (storage_type=ustore) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";-- error
ERROR:  constraint "new_constraint_namepk" of relation "kid_2022" does not exist
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
\c regression
DROP DATABASE inherit_ustore;
-- segment
CREATE DATABASE inherit_segment;
\c inherit_segment;
CREATE TABLE grandfather1
( id int not null,
  grandfather1_name varchar(64),
  g_age int DEFAULT 80,
  primary key(id)
) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grandfather1_pkey" for table "grandfather1"
INSERT INTO grandfather1
(id, grandfather1_name) VALUES
(0,'A0');
CREATE TABLE father1
( father1_name varchar(64),
  f_age int DEFAULT 60
)inherits(grandfather1) WITH (segment=on);
INSERT INTO father1
(id, grandfather1_name, father1_name) VALUES
(1,'A1','B1'),
(2,'A2','B2');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A0                |    80
  1 | A1                |    80
  2 | A2                |    80
(3 rows)

SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
  2 | A2                |    80 | B2           |    60
(2 rows)

DELETE FROM grandfather1 WHERE ID=2;
SELECT * FROM father1;
 id | grandfather1_name | g_age | father1_name | f_age 
----+-------------------+-------+--------------+-------
  1 | A1                |    80 | B1           |    60
(1 row)

UPDATE grandfather1 SET grandfather1_name='A100' WHERE ID=0;
UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B100' WHERE ID=0;
                                ^
UPDATE grandfather1 SET grandfather1_name='A99' WHERE ID=1;
UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B99' WHERE ID=1;
                                ^
UPDATE father1 SET father1_name='B99' WHERE ID=1;
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
(2 rows)

CREATE TABLE son1
( son1_name varchar(64),
  s_age int DEFAULT 30
)inherits(father1) WITH (segment=on);
INSERT INTO son1
(id, grandfather1_name, father1_name, son1_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A3                |    80
  4 | A4                |    80
(4 rows)

SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
  4 | A4                |    80 | B4           |    60 | C4        |    30
(2 rows)

DELETE FROM grandfather1 WHERE ID=4;
SELECT * FROM son1;
 id | grandfather1_name | g_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-------+--------------+-------+-----------+-------
  3 | A3                |    80 | B3           |    60 | C3        |    30
(1 row)

UPDATE grandfather1 SET grandfather1_name='A300' WHERE ID=3;
UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;-- error
ERROR:  column "father1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET father1_name='B300' WHERE ID=3;
                                ^
UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;-- error
ERROR:  column "son1_name" of relation "grandfather1" does not exist
LINE 1: UPDATE grandfather1 SET son1_name='C300' WHERE ID=3;
                                ^
SELECT * FROM grandfather1;
 id | grandfather1_name | g_age 
----+-------------------+-------
  0 | A100              |    80
  1 | A99               |    80
  3 | A300              |    80
(3 rows)

ALTER TABLE grandfather1 RENAME TO grandfather0;
ALTER TABLE grandfather0 DROP COLUMN s_age CASCADE;-- error
ERROR:  column "s_age" of relation "grandfather0" does not exist
ALTER TABLE grandfather0 rename COLUMN f_age TO father_age;-- error
ERROR:  column "f_age" does not exist
ALTER TABLE grandfather0 rename COLUMN g_age TO grandfather_age;
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

ALTER TABLE ONLY grandfather0 rename COLUMN grandfather_age TO grand_age;-- error
ERROR:  inherited column "grandfather_age" must be renamed in child tables too
SELECT * FROM son1;
 id | grandfather1_name | grandfather_age | father1_name | f_age | son1_name | s_age 
----+-------------------+-----------------+--------------+-------+-----------+-------
  3 | A300              |              80 | B3           |    60 | C3        |    30
(1 row)

SELECT * FROM grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
  1 | A99               |              80
  3 | A300              |              80
(3 rows)

SELECT * FROM only grandfather0;
 id | grandfather1_name | grandfather_age 
----+-------------------+-----------------
  0 | A100              |              80
(1 row)

DROP TABLE grandfather0 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table father1
drop cascades to table son1
CREATE TABLE father2
( id int not null,
  father2_name varchar(64),
  f2_age int DEFAULT 60
) WITH (segment=on);
CREATE TABLE father3
( id int not null,
  father3_name varchar(64),
  f3_age int DEFAULT 60
) WITH (segment=on);
CREATE TABLE son2
( son2_name varchar(64),
  s_age int DEFAULT 30
)inherits(father2,father3) WITH (segment=on);
NOTICE:  merging multiple inherited definitions of column "id"
INSERT INTO son2
(id, father2_name, father3_name, son2_name) VALUES
(3,'A3','B3','C3'),
(4,'A4','B4','C4');
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 id | father2_name | f2_age 
----+--------------+--------
  3 | A3           |     60
  4 | A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

ALTER TABLE father2 DROP COLUMN id CASCADE;
SELECT * FROM son2;
 id | father2_name | f2_age | father3_name | f3_age | son2_name | s_age 
----+--------------+--------+--------------+--------+-----------+-------
  3 | A3           |     60 | B3           |     60 | C3        |    30
  4 | A4           |     60 | B4           |     60 | C4        |    30
(2 rows)

SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A3           |     60
 A4           |     60
(2 rows)

SELECT * FROM father3;
 id | father3_name | f3_age 
----+--------------+--------
  3 | B3           |     60
  4 | B4           |     60
(2 rows)

DELETE FROM father3 WHERE son2_name='C4';-- error
ERROR:  column "son2_name" does not exist
LINE 1: DELETE FROM father3 WHERE son2_name='C4';
                                  ^
DELETE FROM father3 WHERE id=3;
SELECT * FROM father2;
 father2_name | f2_age 
--------------+--------
 A4           |     60
(1 row)

DROP TABLE IF EXISTS son2 cascade;
DROP TABLE IF EXISTS father2 cascade;
DROP TABLE IF EXISTS father3 cascade;
SET enable_indexonlyscan = off;
CREATE TABLE events (event_id int primary key) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "events_pkey" for table "events"
CREATE TABLE other_events (event_id int primary key) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "other_events_pkey" for table "other_events"
CREATE TABLE events_child1 () inherits (events) WITH (segment=on);
INSERT INTO events_child1 (event_id) VALUES (5);
INSERT INTO events_child1 (event_id) VALUES (1);
INSERT INTO events (event_id) VALUES (2);
INSERT INTO other_events(event_id) VALUES (3);
-- order by
SELECT event_id
 FROM (SELECT event_id FROM events
       union all
       SELECT event_id FROM other_events) ss
 order by event_id;
 event_id 
----------
        1
        2
        3
        5
(4 rows)

DROP TABLE events_child1, events, other_events;
RESET enable_indexonlyscan;
-- inherit multi tables
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (segment=on);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father_z82rgvsefn PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father_z82rgvsefn" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2_z82rgvsefn PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2_z82rgvsefn" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3_z82rgvsefn PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3_z82rgvsefn" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2022() inherits(father,father2,father3) WITH (segment=on);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father2 including all) inherits(father,father2,father3) WITH (segment=on);-- error
ERROR:  unsupport "like clause including reloptions" together with "with"
DETAIL:  use either "like clause including reloptions" or "with" clause
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

\d kid_2021
DROP TABLE father CASCADE;
NOTICE:  drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
-- segment like father and including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (segment=on);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3) WITH (segment=on);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021(like father) inherits(father) WITH (segment=on);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
CREATE TABLE kid_2022(like father including all) inherits(father) WITH (segment=on);-- error
ERROR:  unsupport "like clause including reloptions" together with "with"
DETAIL:  use either "like clause including reloptions" or "with" clause
CREATE TABLE kid_2023(like father) inherits(father) WITH (segment=on);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "md_attr" with inherited definition
NOTICE:  merging column "wai_id" with inherited definition
NOTICE:  merging column "num" with inherited definition
NOTICE:  merging column "salary" with inherited definition
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);-- error
ERROR:  relation "kid_2022" does not exist on datanode1
LINE 1: INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
                    ^
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(5 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 506 | 23
 507 | 23
(5 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  relation "kid_2022" does not exist
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  relation "kid_2022" does not exist
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;
ERROR:  relation "kid_2022" does not exist
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child have num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 2 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";-- error
ERROR:  relation "kid_2022" does not exist
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
-- segment not like father not including all
CREATE TABLE fa_wai(
   ID  INT    PRIMARY KEY  NOT NULL,
   NAME TEXT    NOT NULL
) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fa_wai_pkey" for table "fa_wai"
CREATE TABLE kid_wai(like fa_wai) inherits(fa_wai) WITH (segment=on);
NOTICE:  merging column "id" with inherited definition
NOTICE:  merging column "name" with inherited definition
CREATE TABLE father(
        id int NOT NULL,
        md_attr CHARACTER VARYING(32) UNIQUE,
        wai_id int references fa_wai(ID),
        num int DEFAULT 2,
        SALARY         REAL    CHECK(SALARY > 0),
        CONSTRAINT pk_father PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father" for table "father"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father_md_attr_key" for table "father"
CREATE TABLE father2(
        id int UNIQUE,
	md_attr CHARACTER VARYING(32) not null,
        CONSTRAINT pk_father2 PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father2" for table "father2"
CREATE TABLE father3(
        id int CHECK(id > 3),
        md_attr CHARACTER VARYING(32) UNIQUE,
        CONSTRAINT pk_father3 PRIMARY KEY (id)
    ) WITH (segment=on);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_father3" for table "father3"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "father3_md_attr_key" for table "father3"
CREATE TABLE kid_2020() inherits(father,father2,father3) WITH (segment=on);
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
NOTICE:  merging multiple inherited definitions of column "id"
NOTICE:  merging multiple inherited definitions of column "md_attr"
CREATE TABLE kid_2021() inherits(father) WITH (segment=on);
CREATE TABLE kid_2022() inherits(father) WITH (segment=on);
CREATE TABLE kid_2023() inherits(father) WITH (segment=on);
\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

INSERT INTO fa_wai VALUES(1,'a'),(2,'b');
INSERT INTO kid_wai VALUES(3,'c'),(4,'d');
INSERT INTO father VALUES(1,20,1),(2,30,2);
INSERT INTO kid_2021 VALUES(501,21,1),(502,31,2);
INSERT INTO kid_2021 VALUES(504,20,3);
SELECT count(*) FROM father;
 count 
-------
     5
(1 row)

INSERT INTO kid_2022 VALUES(505,22,1),(503,52,2);
SELECT count(*) FROM father;
 count 
-------
     7
(1 row)

INSERT INTO kid_2023 VALUES(506,23,1),(507,23,2);
SELECT * FROM father WHERE id>10;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |       
 502 | 31      |      2 |   2 |       
 504 | 20      |      3 |   2 |       
 505 | 22      |      1 |   2 |       
 503 | 52      |      2 |   2 |       
 506 | 23      |      1 |   2 |       
 507 | 23      |      2 |   2 |       
(7 rows)

SELECT id, md_attr FROM father* WHERE id>500;
 id  | md_attr 
-----+---------
 501 | 21
 502 | 31
 504 | 20
 505 | 22
 503 | 52
 506 | 23
 507 | 23
(7 rows)

update father SET salary =90;
SELECT * FROM kid_2021;
 id  | md_attr | wai_id | num | salary 
-----+---------+--------+-----+--------
 501 | 21      |      1 |   2 |     90
 502 | 31      |      2 |   2 |     90
 504 | 20      |      3 |   2 |     90
(3 rows)

ALTER TABLE kid_2022 DROP CONSTRAINT "father_salary_check";-- error
ERROR:  cannot drop inherited constraint "father_salary_check" of relation "kid_2022"
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check TO new_constraint_check;-- error
ERROR:  cannot rename inherited constraint "father_salary_check"
CREATE TABLESPACE example1 RELATIVE LOCATION 'tablespace22/tablespace_22';
ALTER INDEX pk_father SET TABLESPACE example1; --child index won't change
ALTER TABLE kid_2020 ALTER COLUMN md_attr TYPE int;-- error
ERROR:  cannot alter inherited column "md_attr"
ALTER TABLE kid_2020 RENAME COlUMN num TO new1;-- error
ERROR:  cannot rename inherited column "num"
ALTER TABLE kid_2022 RENAME CONSTRAINT kid_2022_pkey TO new_constraint_namepk;-- error
ERROR:  constraint "kid_2022_pkey" for table "kid_2022" does not exist
ALTER TABLE father RENAME COlUMN md_attr TO new;
ERROR:  cannot rename inherited column "md_attr"
\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

ALTER TABLE kid_2020 ALTER COLUMN num SET DEFAULT 1;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER COLUMN new SET not NULL;
ERROR:  column "new" of relation "kid_2020" does not exist
\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2020 ALTER id DROP not null;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 num     | integer               | default 2
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 num     | integer               | default 1
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE father DROP COLUMN IF EXISTS num;-- father without num, child without num
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 4 (Use \d+ to list them.)

\d kid_2020
           Table "public.kid_2020"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | 
 md_attr | character varying(32) | not null
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father3_id_check" CHECK (id > 3)
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father,
          father2,
          father3

ALTER TABLE kid_2023 no inherit father;
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "pk_father" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER INDEX IF EXISTS pk_father rename to new_index_name; 
ALTER TABLE kid_2022 RENAME CONSTRAINT father_salary_check to new_salary_check
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE father ALTER COLUMN id TYPE int;
ERROR:  syntax error at or near "ALTER"
LINE 2: ALTER TABLE father ALTER COLUMN id TYPE int;
        ^
\d father
            Table "public.father"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Indexes:
    "new_index_name" PRIMARY KEY, btree (id) TABLESPACE example1
    "father_md_attr_key" UNIQUE CONSTRAINT, btree (md_attr) TABLESPACE pg_default
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Foreign-key constraints:
    "father_wai_id_fkey" FOREIGN KEY (wai_id) REFERENCES fa_wai(id)
Number of child tables: 3 (Use \d+ to list them.)

\d kid_2021
           Table "public.kid_2021"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2022
           Table "public.kid_2022"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)
Inherits: father

\d kid_2023
           Table "public.kid_2023"
 Column  |         Type          | Modifiers 
---------+-----------------------+-----------
 id      | integer               | not null
 md_attr | character varying(32) | 
 wai_id  | integer               | 
 salary  | real                  | 
Check constraints:
    "father_salary_check" CHECK (salary > 0::double precision)

ALTER TABLE kid_2022 DROP CONSTRAINT "new_constraint_namepk";-- error
ERROR:  constraint "new_constraint_namepk" of relation "kid_2022" does not exist
DROP TABLE father CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table kid_2020
drop cascades to table kid_2021
drop cascades to table kid_2022
DROP TABLE father2 CASCADE;
DROP TABLE father3 CASCADE;
DROP TABLE kid_2023 CASCADE;
DROP TABLE fa_wai CASCADE;
NOTICE:  drop cascades to table kid_wai
DROP TABLESPACE example1;
\c regression
DROP DATABASE inherit_segment;
-- multi_update
CREATE DATABASE inherit_multi_update DBCOMPATIBILITY = 'B';
\c inherit_multi_update;
-- five relation
DROP TABLE IF EXISTS t_t_mutil_t1;
NOTICE:  table "t_t_mutil_t1" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t2;
NOTICE:  table "t_t_mutil_t2" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t3;
NOTICE:  table "t_t_mutil_t3" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t4;
NOTICE:  table "t_t_mutil_t4" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t5;
NOTICE:  table "t_t_mutil_t5" does not exist, skipping
CREATE TABLE t_t_mutil_t1(col1 int,col2 int);
CREATE TABLE t_t_mutil_t2(col1 int,col2 int);
CREATE TABLE t_t_mutil_t3 () INHERITS(t_t_mutil_t1);
--?.*
CREATE TABLE t_t_mutil_t4 () INHERITS(t_t_mutil_t3);
--?.*
CREATE TABLE t_t_mutil_t5(col1 int,col2 int); 
INSERT INTO t_t_mutil_t1 VALUES(1,1),(1,1);
INSERT INTO t_t_mutil_t2 VALUES(1,1),(1,2);
INSERT INTO t_t_mutil_t3 VALUES(1,1),(1,3);
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: INSERT INTO t_t_mutil_t3 VALUES(1,1),(1,3);
                    ^
INSERT INTO t_t_mutil_t4 VALUES(1,1),(1,4);
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: INSERT INTO t_t_mutil_t4 VALUES(1,1),(1,4);
                    ^
INSERT INTO t_t_mutil_t5 VALUES(1,1),(1,5);
-- single inherits multi update
update t_t_mutil_t1 a,t_t_mutil_t2 b,t_t_mutil_t5 c SET b.col2=5,a.col2=4,c.col2=6 WHERE a.col1=b.col1 and b.col1=c.col1;-- error
update t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c SET b.col2=3,a.col2=2,c.col2=5 WHERE a.col1=b.col1 and b.col1=c.col1;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: update t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c SET b.co...
               ^
update t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c SET b.col2=2,a.col2=1,c.col2=4 WHERE a.col1=b.col1 and b.col1=c.col1;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: update t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c SET b.co...
               ^
SELECT * FROM t_t_mutil_t2;
 col1 | col2 
------+------
    1 |    5
    1 |    5
(2 rows)

SELECT * FROM t_t_mutil_t4;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: SELECT * FROM t_t_mutil_t4;
                      ^
SELECT * FROM t_t_mutil_t5;
 col1 | col2 
------+------
    1 |    6
    1 |    6
(2 rows)

update t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t3 c SET b.col2=2,a.col2=1,c.col2=3 WHERE a.col1=b.col1 and b.col1=c.col1;-- error
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: update t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t3 c SET b.co...
               ^
update t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t4 c SET b.col2=1,a.col2=11,c.col2=2 WHERE a.col1=b.col1 and b.col1=c.col1;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: update t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t4 c SET b.co...
               ^
update t_t_mutil_t1 a,t_t_mutil_t2 b SET a.col2=7,b.col2=8 WHERE a.col1=b.col1;-- error
update t_t_mutil_t3 a,t_t_mutil_t2 b SET a.col2=6,b.col2=5 WHERE a.col1=b.col1;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: update t_t_mutil_t3 a,t_t_mutil_t2 b SET a.col2=6,b.col2=5 W...
               ^
update t_t_mutil_t4 a,t_t_mutil_t2 b SET a.col2=5,b.col2=4 WHERE a.col1=b.col1;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: update t_t_mutil_t4 a,t_t_mutil_t2 b SET a.col2=5,b.col2=4 W...
               ^
SELECT * FROM t_t_mutil_t2;
 col1 | col2 
------+------
    1 |    8
    1 |    8
(2 rows)

SELECT * FROM t_t_mutil_t4;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: SELECT * FROM t_t_mutil_t4;
                      ^
update t_t_mutil_t4 a,t_t_mutil_t3 b SET a.col2=3,b.col2=2 WHERE a.col1=b.col1;-- error
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: update t_t_mutil_t4 a,t_t_mutil_t3 b SET a.col2=3,b.col2=2 W...
               ^
update t_t_mutil_t3 a,t_t_mutil_t4 b SET a.col2=2,b.col2=1 WHERE a.col1=b.col1;-- error;
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: update t_t_mutil_t3 a,t_t_mutil_t4 b SET a.col2=2,b.col2=1 W...
               ^
\c regression
DROP DATABASE inherit_multi_update;
CREATE DATABASE inherit_multi_delete DBCOMPATIBILITY = 'B';
\c inherit_multi_delete;
create table t_father_opengauss_inherit_alter_inherit_case0001_1 (id int,
f1_name varchar(20),
f1_age int
);
create table t_son_opengauss_inherit_alter_inherit_case0001_1 (id int,f1_name varchar(20),f1_age int,s_name varchar(20),s_age int);
alter table t_son_opengauss_inherit_alter_inherit_case0001_1 inherit t_father_opengauss_inherit_alter_inherit_case0001_1;
ERROR:  inherits is not support in B-format database, it conflicts with multi-relation update
drop table if exists t_father_opengauss_inherit_alter_inherit_case0001_1 cascade;
drop table if exists t_son_opengauss_inherit_alter_inherit_case0001_1 cascade;
-- five relation
DROP TABLE IF EXISTS t_t_mutil_t1;
NOTICE:  table "t_t_mutil_t1" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t2;
NOTICE:  table "t_t_mutil_t2" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t3;
NOTICE:  table "t_t_mutil_t3" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t4;
NOTICE:  table "t_t_mutil_t4" does not exist, skipping
DROP TABLE IF EXISTS t_t_mutil_t5;
NOTICE:  table "t_t_mutil_t5" does not exist, skipping
CREATE TABLE t_t_mutil_t1(col1 int,col2 int);
CREATE TABLE t_t_mutil_t2(col1 int,col2 int);
CREATE TABLE t_t_mutil_t3 () INHERITS(t_t_mutil_t1);
--?.*
CREATE TABLE t_t_mutil_t4 () INHERITS(t_t_mutil_t3);
--?.*
CREATE TABLE t_t_mutil_t5(col1 int,col2 int); 
INSERT INTO t_t_mutil_t1 VALUES(1,1),(1,1);
INSERT INTO t_t_mutil_t2 VALUES(1,1),(1,2);
INSERT INTO t_t_mutil_t3 VALUES(1,1),(1,3);
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: INSERT INTO t_t_mutil_t3 VALUES(1,1),(1,3);
                    ^
INSERT INTO t_t_mutil_t4 VALUES(1,1),(1,4);
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: INSERT INTO t_t_mutil_t4 VALUES(1,1),(1,4);
                    ^
INSERT INTO t_t_mutil_t5 VALUES(1,1),(1,5);
delete FROM t_t_mutil_t1 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
delete FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHE...
                    ^
begin;
delete FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHE...
                    ^
SELECT * FROM t_t_mutil_t2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block, firstChar[Q]
SELECT * FROM t_t_mutil_t4;
ERROR:  current transaction is aborted, commands ignored until end of transaction block, firstChar[Q]
SELECT * FROM t_t_mutil_t5;
ERROR:  current transaction is aborted, commands ignored until end of transaction block, firstChar[Q]
rollback;
-- delete xx FROM xxx;
delete t_t_mutil_t1 a FROM t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
delete t_t_mutil_t3 a FROM t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete t_t_mutil_t3 a FROM t_t_mutil_t2 b,t_t_mutil_t5 c WHE...
               ^
begin;
delete t_t_mutil_t4 a FROM t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete t_t_mutil_t4 a FROM t_t_mutil_t2 b,t_t_mutil_t5 c WHE...
               ^
rollback;
delete a FROM t_t_mutil_t1 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
delete a FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete a FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c W...
                      ^
begin;
delete a FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete a FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c W...
                      ^
rollback;
delete t_t_mutil_t1 a,t_t_mutil_t2 b FROM t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
delete t_t_mutil_t3 a,t_t_mutil_t2 b FROM t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete t_t_mutil_t3 a,t_t_mutil_t2 b FROM t_t_mutil_t5 c WHE...
               ^
begin;
delete t_t_mutil_t4 a,t_t_mutil_t2 b FROM t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete t_t_mutil_t4 a,t_t_mutil_t2 b FROM t_t_mutil_t5 c WHE...
               ^
rollback;
delete a,b FROM t_t_mutil_t1 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
delete a,b FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete a,b FROM t_t_mutil_t3 a,t_t_mutil_t2 b,t_t_mutil_t5 c...
                        ^
begin;
delete a,b FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c WHERE a.col2=b.col2 and b.col2=c.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete a,b FROM t_t_mutil_t4 a,t_t_mutil_t2 b,t_t_mutil_t5 c...
                        ^
rollback;
delete a FROM t_t_mutil_t1 a left join t_t_mutil_t2 b on a.col2=b.col2;-- error
delete a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.col2=b.col2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.c...
                      ^
begin;
delete a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.col2=b.col2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.c...
                      ^
rollback;
delete a FROM t_t_mutil_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
delete a FROM t_t_mutil_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a.col2; -- error
ERROR:  syntax error at or near "order"
LINE 1: ...il_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a...
                                                             ^
delete a FROM t_t_mutil_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 returning *; -- error
ERROR:  syntax error at or near "returning"
LINE 1: ...il_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 returning ...
                                                             ^
delete t_t_mutil_t1 a FROM t_t_mutil_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t1 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
delete a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
delete a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a.col2; -- error
ERROR:  syntax error at or near "order"
LINE 1: ...il_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a...
                                                             ^
delete a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 returning *; -- error
ERROR:  syntax error at or near "returning"
LINE 1: ...il_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 returning ...
                                                             ^
delete t_t_mutil_t3 a FROM t_t_mutil_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t3 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
delete a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
delete a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a.col2; -- error
ERROR:  syntax error at or near "order"
LINE 1: ...il_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 order by a...
                                                             ^
delete a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 returning *; -- error
ERROR:  syntax error at or near "returning"
LINE 1: ...il_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 returning ...
                                                             ^
delete t_t_mutil_t4 a FROM t_t_mutil_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1; -- error
ERROR:  syntax error at or near "limit"
LINE 1: ...util_t4 a left join t_t_mutil_t2 b on a.col2=b.col2 limit 1;
                                                               ^
-- condition is false
delete FROM t_t_mutil_t1 a,t_t_mutil_t2 b WHERE a.col1 = 1 and a.col1=2;-- error
delete FROM t_t_mutil_t3 a,t_t_mutil_t2 b WHERE a.col1 = 1 and a.col1=2;-- error
ERROR:  relation "t_t_mutil_t3" does not exist on datanode1
LINE 1: delete FROM t_t_mutil_t3 a,t_t_mutil_t2 b WHERE a.col1 = 1 a...
                    ^
delete FROM t_t_mutil_t4 a,t_t_mutil_t2 b WHERE a.col1 = 1 and a.col1=2;
ERROR:  relation "t_t_mutil_t4" does not exist on datanode1
LINE 1: delete FROM t_t_mutil_t4 a,t_t_mutil_t2 b WHERE a.col1 = 1 a...
                    ^
\c regression
DROP DATABASE inherit_multi_delete;
