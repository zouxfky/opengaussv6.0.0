create schema plpgsql_pipelined_unsupported;
set search_path to plpgsql_pipelined_unsupported;
-- return no collection
CREATE OR REPLACE FUNCTION return_no_collection() returns int pipelined LANGUAGE plpgsql AS
    $BODY$
begin
    pipe row (null);
end;
$BODY$;
ERROR:  pipeLined function must have a supported collection return type
CONTEXT:  compilation of PL/pgSQL function "return_no_collection" near line 1
-- with out param
CREATE OR REPLACE FUNCTION func_with_out_param(id OUT int) returns _int4 pipelined LANGUAGE plpgsql AS
    $BODY$
begin
    pipe row (null);
end;
$BODY$;
select func_with_out_param();
ERROR:  Function func_with_out_param has out arguments
CONTEXT:  referenced column: func_with_out_param
-- func with out param autonomous
CREATE OR REPLACE FUNCTION func_with_out_param_autonm(id OUT int) returns _int4 pipelined LANGUAGE plpgsql AS
    $BODY$
declare
    PRAGMA AUTONOMOUS_TRANSACTION;
begin
    pipe row (null);
end;
$BODY$;
select func_with_out_param_autonm();
ERROR:  Function func_with_out_param_autonm has out arguments
CONTEXT:  referenced column: func_with_out_param_autonm
-- index by test
CREATE OR REPLACE PACKAGE unsupported_pkg AS
    TYPE numset_tbl IS TABLE OF number index by binary_integer;
    FUNCTION func_test(n NUMBER) RETURN numset_tbl PIPELINED;
END unsupported_pkg;
/
ERROR:  pipeLined function must have a supported collection return type
CONTEXT:  compilation of PL/pgSQL package near line 1
-- return next 
CREATE OR REPLACE FUNCTION func_test(n NUMBER) RETURN _int4 PIPELINED IS
BEGIN
    RETURN next 1;
END;
/
ERROR:  cannot use RETURN NEXT in a non-SETOF function
LINE 2:     RETURN next 1;
            ^
QUERY:   DECLARE BEGIN
    RETURN next 1;
END
-- return query 
CREATE OR REPLACE FUNCTION func_test(n NUMBER) RETURN _int4 PIPELINED IS
BEGIN
    RETURN query select 1;
END;
/
ERROR:  cannot use RETURN QUERY in a non-SETOF function
LINE 2:     RETURN query select 1;
            ^
QUERY:   DECLARE BEGIN
    RETURN query select 1;
END
-- return something
CREATE OR REPLACE FUNCTION func_test(n NUMBER) RETURN _int4 PIPELINED IS
BEGIN
    return 1;
END;
/
ERROR:  RETURN statement in a pipelined function cannot contains an expression
DETAIL:  pipe error
CONTEXT:  compilation of PL/pgSQL function "func_test" near line 2
-- do not call return: success
CREATE OR REPLACE FUNCTION func_test(n NUMBER) RETURN _int4 PIPELINED IS
BEGIN
    /* do not return */
END;
/
--  no pipelined flag in package body
CREATE OR REPLACE PACKAGE unsupported_pkg AS
    TYPE numset_tbl IS TABLE OF NUMBER;
    FUNCTION func_test(n NUMBER) RETURN numset_tbl pipelined;
END unsupported_pkg;
/
CREATE OR REPLACE PACKAGE BODY unsupported_pkg AS
    FUNCTION func_test(n NUMBER) RETURN numset_tbl
        IS
        a numset_tbl := numset_tbl();
    BEGIN
        NULL;
    END;
END unsupported_pkg;
/
ERROR:  function declared in package specification and package body must be the same, function: func_test
-- pipelined flag only in package body
CREATE OR REPLACE PACKAGE unsupported_pkg AS
    TYPE numset_tbl IS TABLE OF NUMBER;
    FUNCTION func_test(n NUMBER) RETURN numset_tbl;
END unsupported_pkg;
/
CREATE OR REPLACE PACKAGE BODY unsupported_pkg AS
    FUNCTION func_test(n NUMBER) RETURN numset_tbl pipelined
        IS
        a numset_tbl := numset_tbl();
    BEGIN
        NULL;
    END;
END unsupported_pkg;
/
ERROR:  function declared in package specification and package body must be the same, function: func_test
--  setof
CREATE OR REPLACE PACKAGE unsupported_pkg IS
    TYPE numset_tbl IS TABLE OF INTEGER;
    FUNCTION func_test(n number) RETURN numset_tbl pipelined;
END unsupported_pkg;
/
CREATE OR REPLACE PACKAGE BODY unsupported_pkg AS
    FUNCTION func_test(n number) RETURN numset_tbl PIPELINED IS
    BEGIN
        FOR i IN 1..n
            LOOP
                pipe row (i);
            END LOOP;
    END;
END unsupported_pkg;
/
select *
from unsupported_pkg.func_test(generate_series(2, 4));
ERROR:  set-valued function called in context that cannot accept a set
select unsupported_pkg.func_test(generate_series(2, 4));
 func_test 
-----------
 {1,2}
 {1,2,3}
 {1,2,3,4}
(3 rows)

-- pipelined with setof function
CREATE OR REPLACE PACKAGE unsupported_pkg IS
    FUNCTION func_test(n number) RETURN setof
    number pipelined;
END unsupported_pkg;
/
ERROR:  Setof is not yet supported in pipelined function.
CREATE OR REPLACE FUNCTION func_test(n number) RETURN setof number pipelined IS
BEGIN
    FOR i IN 1..n
        LOOP
            pipe row (i);
        END LOOP;
END;
/
ERROR:  Setof is not yet supported in pipelined function.
-- procedure with pipelined
CREATE OR REPLACE procedure func_test(n NUMBER) PIPELINED IS BEGIN
    NULL;
RETURN;
END;
/
ERROR:  Pipelined is not yet supported in non-function.
-- procedure with pip row
CREATE OR REPLACE procedure func_test(n NUMBER) IS
BEGIN
    pipe row (1);
END;
/
ERROR:  PIPE statement cannot be used in non-pipelined functions
LINE 2:     pipe row (1);
            ^
DETAIL:  N/A
QUERY:   DECLARE BEGIN
    pipe row (1);
END
-- multiple pipelined
CREATE OR REPLACE FUNCTION func_test(n NUMBER) RETURN numberset PIPELINED PIPELINED IS
BEGIN
    RETURN;
END;
/
ERROR:  conflicting or redundant options
-- alter function pipelined: unsupported gramer
CREATE OR REPLACE FUNCTION alter_func_pipelined(n NUMBER) RETURN int IS
BEGIN
    RETURN NULL;
END;
/
alter function alter_func_pipelined(number) pipelined;
ERROR:  syntax error at or near "pipelined"
LINE 1: alter function alter_func_pipelined(number) pipelined;
                                                    ^
create or replace type tb_type_0013 as table of varchar2(2000);
drop table if exists t_pipelined_0013;
NOTICE:  table "t_pipelined_0013" does not exist, skipping
create table t_pipelined_0013(c1 int);
create or replace function func_pipelined_0013(count in number)
returns tb_type_0013 pipelined language plpgsql as
$BODY$
declare
begin
for i in 1 .. count loop
insert into t_pipelined_0013 values(i);
-- pipe row( 'insert into test values( ' || i || ') success');
perform pg_sleep(1);
update t_pipelined_0013 set c1 = 10 where c1 = i;
end loop;
-- pipe row( 'All done!' );
return;
end;
$BODY$;
-- cannot perform a DML operation inside a query
select func_pipelined_0013(3);
ERROR:  cannot perform a DML operation inside a query
CONTEXT:  SQL statement "insert into t_pipelined_0013 values(i)"
PL/pgSQL function func_pipelined_0013(numeric) line 5 at SQL statement
referenced column: func_pipelined_0013
reset search_path;
drop schema plpgsql_pipelined_unsupported cascade;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to function plpgsql_pipelined_unsupported.func_with_out_param()
drop cascades to function plpgsql_pipelined_unsupported.func_with_out_param_autonm()
drop cascades to function plpgsql_pipelined_unsupported.func_test(numeric)
--?.*
drop cascades to function plpgsql_pipelined_unsupported.func_test(numeric)
drop cascades to function plpgsql_pipelined_unsupported.alter_func_pipelined(numeric)
drop cascades to type plpgsql_pipelined_unsupported.tb_type_0013
drop cascades to table plpgsql_pipelined_unsupported.t_pipelined_0013
drop cascades to function plpgsql_pipelined_unsupported.func_pipelined_0013(numeric)
