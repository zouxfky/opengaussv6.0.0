create schema outerjoin_bugfix;
set search_path = outerjoin_bugfix;
drop table if exists foo_tab1;
NOTICE:  table "foo_tab1" does not exist, skipping
drop table if exists foo_tab2;
NOTICE:  table "foo_tab2" does not exist, skipping
create table foo_tab1(f1 int, f2 int);
insert into foo_tab1 values(1,1);
create table foo_tab2(c1 int, c2 int);
analyze foo_tab1;
analyze foo_tab2;
--
-- check handling of join aliases when flattening multiple levels of subquery
--
explain (verbose on, costs off)
select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from foo_tab1 i1) ss1
    ) foo2
   left join
    (select c1 as join_key from foo_tab2 i2) ss2
   using (join_key)
  ) foo3
using (join_key);
                            QUERY PLAN                            
------------------------------------------------------------------
 Nested Loop Left Join
   Output: "*VALUES*".column1, i1.f1, (666)
   Join Filter: ("*VALUES*".column1 = i1.f1)
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
   ->  Materialize
         Output: i1.f1, (666)
         ->  Hash Right Join
               Output: i1.f1, 666
               Hash Cond: (i2.c1 = i1.f1)
               ->  Seq Scan on outerjoin_bugfix.foo_tab2 i2
                     Output: i2.c1, i2.c2
               ->  Hash
                     Output: i1.f1
                     ->  Seq Scan on outerjoin_bugfix.foo_tab1 i1
                           Output: i1.f1
(16 rows)

select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from foo_tab1 i1) ss1
    ) foo2
   left join
    (select c1 as join_key from foo_tab2 i2) ss2
   using (join_key)
  ) foo3
using (join_key);
 foo1_id | foo3_id | bug_field 
---------+---------+-----------
       0 |         |          
       1 |       1 |       666
(2 rows)

-- check the original case
insert into foo_tab2 values(2,2);
set enable_hashjoin = off;
explain (verbose on, costs off)
select t2.c2, dt1.col2
from (
    select col1, col2
    from (
        select f1 as col1,
               case when f2 = 1 then 1
               else 999
               end as col2
        from foo_tab1
    ) dt1 join foo_tab2 t2 on dt1.col1 = t2.c1
) dt1 full join foo_tab2 t2 on dt1.col2 = t2.c2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Merge Full Join
   Output: t2.c2, (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
   Merge Cond: ((CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END) = t2.c2)
   ->  Sort
         Output: (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
         Sort Key: (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
         ->  Nested Loop
               Output: (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
               Join Filter: (foo_tab1.f1 = t2.c1)
               ->  Seq Scan on outerjoin_bugfix.foo_tab1
                     Output: foo_tab1.f1, CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END
               ->  Seq Scan on outerjoin_bugfix.foo_tab2 t2
                     Output: t2.c1, t2.c2
   ->  Sort
         Output: t2.c2
         Sort Key: t2.c2
         ->  Seq Scan on outerjoin_bugfix.foo_tab2 t2
               Output: t2.c2
(18 rows)

select t2.c2, dt1.col2
from (
    select col1, col2
    from (
        select f1 as col1,
               case when f2 = 1 then 1
               else 999
               end as col2
        from foo_tab1
    ) dt1 join foo_tab2 t2 on dt1.col1 = t2.c1
) dt1 full join foo_tab2 t2 on dt1.col2 = t2.c2;
 c2 | col2 
----+------
  2 |     
(1 row)

set enable_mergejoin = off;
explain (verbose on, costs off)
select t2.c2, dt1.col2
from (
    select col1, col2
    from (
        select f1 as col1,
               case when f2 = 1 then 1
               else 999
               end as col2
        from foo_tab1
    ) dt1 join foo_tab2 t2 on dt1.col1 = t2.c1
) dt1 full join foo_tab2 t2 on dt1.col2 = t2.c2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Hash Full Join
   Output: t2.c2, (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
   Hash Cond: (t2.c2 = (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END))
   ->  Seq Scan on outerjoin_bugfix.foo_tab2 t2
         Output: t2.c1, t2.c2
   ->  Hash
         Output: (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
         ->  Nested Loop
               Output: (CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END)
               Join Filter: (foo_tab1.f1 = t2.c1)
               ->  Seq Scan on outerjoin_bugfix.foo_tab1
                     Output: foo_tab1.f1, CASE WHEN (foo_tab1.f2 = 1) THEN 1 ELSE 999 END
               ->  Seq Scan on outerjoin_bugfix.foo_tab2 t2
                     Output: t2.c1, t2.c2
(14 rows)

select t2.c2, dt1.col2
from (
    select col1, col2
    from (
        select f1 as col1,
               case when f2 = 1 then 1
               else 999
               end as col2
        from foo_tab1
    ) dt1 join foo_tab2 t2 on dt1.col1 = t2.c1
) dt1 full join foo_tab2 t2 on dt1.col2 = t2.c2;
 c2 | col2 
----+------
  2 |     
(1 row)

drop schema outerjoin_bugfix cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table foo_tab1
drop cascades to table foo_tab2
