DROP SCHEMA hw_subpartition_add_drop_partition_1 CASCADE;
ERROR:  schema "hw_subpartition_add_drop_partition_1" does not exist
CREATE SCHEMA hw_subpartition_add_drop_partition_1;
SET CURRENT_SCHEMA TO hw_subpartition_add_drop_partition_1;
--
----list-hash table----
--
--prepare
CREATE TABLE list_hash_sales
(
    product_id     INT4 NOT NULL,
    customer_id    INT4 PRIMARY KEY,
    time_id        DATE,
    channel_id     CHAR(1),
    type_id        INT4,
    quantity_sold  NUMERIC(3),
    amount_sold    NUMERIC(10,2)
)
PARTITION BY LIST (channel_id) SUBPARTITION BY HASH (product_id)
(
    PARTITION channel1 VALUES ('0', '1', '2')
    (
        SUBPARTITION channel1_product1,
        SUBPARTITION channel1_product2,
        SUBPARTITION channel1_product3,
        SUBPARTITION channel1_product4
    ),
    PARTITION channel2 VALUES ('3', '4', '5')
    (
        SUBPARTITION channel2_product1,
        SUBPARTITION channel2_product2
    ),
    PARTITION channel3 VALUES ('6', '7'),
    PARTITION channel4 VALUES ('8', '9')
    (
        SUBPARTITION channel4_product1
    )
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "list_hash_sales_pkey" for table "list_hash_sales"
INSERT INTO list_hash_sales SELECT generate_series(1,1000),
                                   generate_series(1,1000),
                                   date_pli('2008-01-01', generate_series(1,1000)),
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%1000,
                                   generate_series(1,1000);
CREATE INDEX list_hash_sales_idx ON list_hash_sales(product_id) LOCAL;
--check for add partition/subpartition
--success, add 4 subpartition
ALTER TABLE list_hash_sales ADD PARTITION channel5 VALUES ('X')
    (
        SUBPARTITION channel5_product1,
        SUBPARTITION channel5_product2,
        SUBPARTITION channel5_product3,
        SUBPARTITION channel5_product4
    );
--fail, value conflict
ALTER TABLE list_hash_sales ADD PARTITION channel_temp1 VALUES ('0', 'Z', 'C');
ERROR:  list boundary of adding partition MUST NOT overlap with existing partition
--fail, value conflict
ALTER TABLE list_hash_sales ADD PARTITION channel_temp2 VALUES ('Z', 'Z', 'C');
ERROR:  list partition channel_temp2 has overlapped value
--fail, invalid format
ALTER TABLE list_hash_sales ADD PARTITION channel_temp3 VALUES LESS THAN ('Z');
ERROR:  can not add none-list partition to list partition table
--success, add 1 default subpartition
ALTER TABLE list_hash_sales ADD PARTITION channel6 VALUES (DEFAULT);
--fail, value conflict
ALTER TABLE list_hash_sales ADD PARTITION channel_temp4 VALUES ('M', 'X');
ERROR:  list boundary of adding partition MUST NOT overlap with existing partition
--fail, not support add hash
ALTER TABLE list_hash_sales MODIFY PARTITION channel1 ADD SUBPARTITION channel1_temp1;
ERROR:  syntax error at or near ";"
LINE 1: ...s MODIFY PARTITION channel1 ADD SUBPARTITION channel1_temp1;
                                                                      ^
--fail, invalid format
ALTER TABLE list_hash_sales MODIFY PARTITION channel4 ADD SUBPARTITION channel4_temp1 VALUES LESS THAN (1500);
ERROR:  can not add hash subpartition
--check for ok after add
SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='list_hash_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='list_hash_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 channel1                 | p        | l            | f           |             0 | 1       | {0,1,2}
 channel2                 | p        | l            | f           |             0 | 1       | {3,4,5}
 channel3                 | p        | l            | f           |             0 | 1       | {6,7}
 channel4                 | p        | l            | f           |             0 | 1       | {8,9}
 channel5                 | p        | l            | f           |             0 | 1       | {X}
 channel6                 | p        | l            | f           |             0 | 1       | {NULL}
 list_hash_sales          | r        | l            | f           |             0 | 4       | 
 channel1_product1        | s        | h            | t           |             0 |         | {0}
 channel1_product2        | s        | h            | t           |             0 |         | {1}
 channel1_product3        | s        | h            | t           |             0 |         | {2}
 channel1_product4        | s        | h            | t           |             0 |         | {3}
 channel2_product1        | s        | h            | t           |             0 |         | {0}
 channel2_product2        | s        | h            | t           |             0 |         | {1}
 channel3_subpartdefault1 | s        | h            | t           |             0 |         | {0}
 channel4_product1        | s        | h            | t           |             0 |         | {0}
 channel5_product1        | s        | h            | t           |             0 |         | {0}
 channel5_product2        | s        | h            | t           |             0 |         | {1}
 channel5_product3        | s        | h            | t           |             0 |         | {2}
 channel5_product4        | s        | h            | t           |             0 |         | {3}
 channel6_subpartdefault1 | s        | h            | t           |             0 |         | {0}
(20 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='list_hash_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 channel1_product1_product_id_idx        | x        | n            | t           | t
 channel1_product2_product_id_idx        | x        | n            | t           | t
 channel1_product3_product_id_idx        | x        | n            | t           | t
 channel1_product4_product_id_idx        | x        | n            | t           | t
 channel2_product1_product_id_idx        | x        | n            | t           | t
 channel2_product2_product_id_idx        | x        | n            | t           | t
 channel3_subpartdefault1_product_id_idx | x        | n            | t           | t
 channel4_product1_product_id_idx        | x        | n            | t           | t
 channel5_product1_product_id_idx        | x        | n            | t           | t
 channel5_product2_product_id_idx        | x        | n            | t           | t
 channel5_product3_product_id_idx        | x        | n            | t           | t
 channel5_product4_product_id_idx        | x        | n            | t           | t
 channel6_subpartdefault1_product_id_idx | x        | n            | t           | t
(13 rows)

\d+ list_hash_sales
                    Table "hw_subpartition_add_drop_partition_1.list_hash_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "list_hash_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default
    "list_hash_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By LIST(channel_id) Subpartition By HASH(product_id)
Number of partitions: 6 (View pg_partition to check each partition range.)
Number of subpartitions: 13 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--check for drop partition/subpartition (for)
--success, drop partition channel2
ALTER TABLE list_hash_sales DROP PARTITION channel2;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, not support drop hash
ALTER TABLE list_hash_sales DROP SUBPARTITION channel1_product1;
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--fail, not support drop hash
ALTER TABLE list_hash_sales DROP SUBPARTITION channel4_product1;
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--success, drop partition channel3
ALTER TABLE list_hash_sales DROP PARTITION FOR ('6');
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, number not equal to the number of partkey
ALTER TABLE list_hash_sales DROP PARTITION FOR ('6', '2010-01-01');
ERROR:  number of boundary items NOT EQUAL to number of partition keys
--fail, invalid type
ALTER TABLE list_hash_sales DROP PARTITION FOR (10);
ERROR:  value too long for type character(1)
--fail, not support drop hash
ALTER TABLE list_hash_sales DROP SUBPARTITION FOR('X', 6);
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--check for ok after drop
SELECT count(*) FROM list_hash_sales;
 count 
-------
   500
(1 row)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='list_hash_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='list_hash_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 channel1                 | p        | l            | f           |             0 | 1       | {0,1,2}
 channel4                 | p        | l            | f           |             0 | 1       | {8,9}
 channel5                 | p        | l            | f           |             0 | 1       | {X}
 channel6                 | p        | l            | f           |             0 | 1       | {NULL}
 list_hash_sales          | r        | l            | f           |             0 | 4       | 
 channel1_product1        | s        | h            | t           |             0 |         | {0}
 channel1_product2        | s        | h            | t           |             0 |         | {1}
 channel1_product3        | s        | h            | t           |             0 |         | {2}
 channel1_product4        | s        | h            | t           |             0 |         | {3}
 channel4_product1        | s        | h            | t           |             0 |         | {0}
 channel5_product1        | s        | h            | t           |             0 |         | {0}
 channel5_product2        | s        | h            | t           |             0 |         | {1}
 channel5_product3        | s        | h            | t           |             0 |         | {2}
 channel5_product4        | s        | h            | t           |             0 |         | {3}
 channel6_subpartdefault1 | s        | h            | t           |             0 |         | {0}
(15 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='list_hash_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 channel1_product1_product_id_idx        | x        | n            | t           | t
 channel1_product2_product_id_idx        | x        | n            | t           | t
 channel1_product3_product_id_idx        | x        | n            | t           | t
 channel1_product4_product_id_idx        | x        | n            | t           | t
 channel4_product1_product_id_idx        | x        | n            | t           | t
 channel5_product1_product_id_idx        | x        | n            | t           | t
 channel5_product2_product_id_idx        | x        | n            | t           | t
 channel5_product3_product_id_idx        | x        | n            | t           | t
 channel5_product4_product_id_idx        | x        | n            | t           | t
 channel6_subpartdefault1_product_id_idx | x        | n            | t           | t
(10 rows)

\d+ list_hash_sales
                    Table "hw_subpartition_add_drop_partition_1.list_hash_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "list_hash_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default UNUSABLE
    "list_hash_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By LIST(channel_id) Subpartition By HASH(product_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 10 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--
----hash-range table----
--
--prepare
CREATE TABLE hash_range_sales
(
    product_id     INT4 NOT NULL,
    customer_id    INT4 PRIMARY KEY,
    time_id        DATE,
    channel_id     CHAR(1),
    type_id        INT4,
    quantity_sold  NUMERIC(3),
    amount_sold    NUMERIC(10,2)
)
PARTITION BY HASH (product_id) SUBPARTITION BY RANGE (customer_id)
(
    PARTITION product1
    (
        SUBPARTITION product1_customer1 VALUES LESS THAN (200),
        SUBPARTITION product1_customer2 VALUES LESS THAN (500),
        SUBPARTITION product1_customer3 VALUES LESS THAN (800),
        SUBPARTITION product1_customer4 VALUES LESS THAN (1200)
    ),
    PARTITION product2
    (
        SUBPARTITION product2_customer1 VALUES LESS THAN (500),
        SUBPARTITION product2_customer2 VALUES LESS THAN (MAXVALUE)
    ),
    PARTITION product3,
    PARTITION product4
    (
        SUBPARTITION product4_customer1 VALUES LESS THAN (1200)
    )
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "hash_range_sales_pkey" for table "hash_range_sales"
INSERT INTO hash_range_sales SELECT generate_series(1,1000),
                                    generate_series(1,1000),
                                    date_pli('2008-01-01', generate_series(1,1000)),
                                    generate_series(1,1000)%10,
                                    generate_series(1,1000)%10,
                                    generate_series(1,1000)%1000,
                                    generate_series(1,1000);
CREATE INDEX hash_range_sales_idx ON hash_range_sales(product_id) LOCAL;
--check for add partition/subpartition
--fail, not support add hash
ALTER TABLE hash_range_sales ADD PARTITION product_temp1
    (
        SUBPARTITION product_temp1_customer1 VALUES LESS THAN (200),
        SUBPARTITION product_temp1_customer2 VALUES LESS THAN (500),
        SUBPARTITION product_temp1_customer3 VALUES LESS THAN (800),
        SUBPARTITION product_temp1_customer4 VALUES LESS THAN (1200)
    );
ERROR:  syntax error at or near "("
LINE 2:     (
            ^
--fail, not support add hash
ALTER TABLE hash_range_sales ADD PARTITION product_temp2;
ERROR:  syntax error at or near ";"
LINE 1: ALTER TABLE hash_range_sales ADD PARTITION product_temp2;
                                                                ^
--success, add 1 subpartition
ALTER TABLE hash_range_sales MODIFY PARTITION product1 ADD SUBPARTITION product1_customer5 VALUES LESS THAN (1800);
--fail, out of range
ALTER TABLE hash_range_sales MODIFY PARTITION product2 ADD SUBPARTITION product2_temp1 VALUES LESS THAN (1800);
ERROR:  upper boundary of adding partition MUST overtop last existing partition
--fail, invalid format
ALTER TABLE hash_range_sales MODIFY PARTITION product4 ADD SUBPARTITION product4_temp1 VALUES (DEFAULT);
ERROR:  can not add none-range subpartition to range subpartition table
--success, add 1 subpartition
ALTER TABLE hash_range_sales MODIFY PARTITION product4 ADD SUBPARTITION product4_customer2 VALUES LESS THAN (MAXVALUE);
--check for ok after add
SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_range_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_range_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 product1                 | p        | h            | f           |             0 | 2       | {0}
 product2                 | p        | h            | f           |             0 | 2       | {1}
 product3                 | p        | h            | f           |             0 | 2       | {2}
 product4                 | p        | h            | f           |             0 | 2       | {3}
 hash_range_sales         | r        | h            | f           |             0 | 1       | 
 product1_customer1       | s        | r            | t           |             0 |         | {200}
 product1_customer2       | s        | r            | t           |             0 |         | {500}
 product1_customer3       | s        | r            | t           |             0 |         | {800}
 product1_customer4       | s        | r            | t           |             0 |         | {1200}
 product1_customer5       | s        | r            | t           |             0 |         | {1800}
 product2_customer1       | s        | r            | t           |             0 |         | {500}
 product2_customer2       | s        | r            | t           |             0 |         | {NULL}
 product3_subpartdefault1 | s        | r            | t           |             0 |         | {NULL}
 product4_customer1       | s        | r            | t           |             0 |         | {1200}
 product4_customer2       | s        | r            | t           |             0 |         | {NULL}
(15 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_range_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_customer1_product_id_idx       | x        | n            | t           | t
 product1_customer2_product_id_idx       | x        | n            | t           | t
 product1_customer3_product_id_idx       | x        | n            | t           | t
 product1_customer4_product_id_idx       | x        | n            | t           | t
 product1_customer5_product_id_idx       | x        | n            | t           | t
 product2_customer1_product_id_idx       | x        | n            | t           | t
 product2_customer2_product_id_idx       | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_customer1_product_id_idx       | x        | n            | t           | t
 product4_customer2_product_id_idx       | x        | n            | t           | t
(10 rows)

\d+ hash_range_sales
                   Table "hw_subpartition_add_drop_partition_1.hash_range_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_range_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default
    "hash_range_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By RANGE(customer_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 10 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--check for drop partition/subpartition (for)
--fail, not support drop hash
ALTER TABLE hash_range_sales DROP PARTITION product2;
ERROR:  Droping hash partition is unsupported.
--success, drop subpartition product1_customer1
ALTER TABLE hash_range_sales DROP SUBPARTITION product1_customer1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--success, drop subpartition product4_customer1
ALTER TABLE hash_range_sales DROP SUBPARTITION product4_customer1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, the only subpartition in product4
ALTER TABLE hash_range_sales DROP SUBPARTITION product4_customer2;
ERROR:  Cannot drop the only subpartition of a partitioned table
DETAIL:  N/A
--fail, not support drop hash
ALTER TABLE hash_range_sales DROP PARTITION FOR(0);
ERROR:  Droping hash partition is unsupported.
--fail, not support drop hash
ALTER TABLE hash_range_sales DROP PARTITION FOR(0, 100);
ERROR:  Droping hash partition is unsupported.
--fail, number not equal to the number of partkey
ALTER TABLE hash_range_sales DROP SUBPARTITION FOR(0);
ERROR:  Number of boundary items NOT EQUAL to number of partition keys
DETAIL:  There must be 2 boundary items for DROP SUBPARTITION in a subpartitioned table
--fail, invalid type
ALTER TABLE hash_range_sales DROP SUBPARTITION FOR('2010-01-01', 100);
ERROR:  invalid input syntax for integer: "2010-01-01"
--success, drop subpartition product1_customer2, but not suggest to do this operation
ALTER TABLE hash_range_sales DROP SUBPARTITION FOR(0, 100);
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, no subpartition find
ALTER TABLE hash_range_sales DROP SUBPARTITION FOR(0, 2300);
ERROR:  The subpartition number is invalid or out-of-range
DETAIL:  N/A
--check for ok after drop
SELECT count(*) FROM hash_range_sales;
 count 
-------
   628
(1 row)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_range_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_range_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 product1                 | p        | h            | f           |             0 | 2       | {0}
 product2                 | p        | h            | f           |             0 | 2       | {1}
 product3                 | p        | h            | f           |             0 | 2       | {2}
 product4                 | p        | h            | f           |             0 | 2       | {3}
 hash_range_sales         | r        | h            | f           |             0 | 1       | 
 product1_customer3       | s        | r            | t           |             0 |         | {800}
 product1_customer4       | s        | r            | t           |             0 |         | {1200}
 product1_customer5       | s        | r            | t           |             0 |         | {1800}
 product2_customer1       | s        | r            | t           |             0 |         | {500}
 product2_customer2       | s        | r            | t           |             0 |         | {NULL}
 product3_subpartdefault1 | s        | r            | t           |             0 |         | {NULL}
 product4_customer2       | s        | r            | t           |             0 |         | {NULL}
(12 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_range_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_customer3_product_id_idx       | x        | n            | t           | t
 product1_customer4_product_id_idx       | x        | n            | t           | t
 product1_customer5_product_id_idx       | x        | n            | t           | t
 product2_customer1_product_id_idx       | x        | n            | t           | t
 product2_customer2_product_id_idx       | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_customer2_product_id_idx       | x        | n            | t           | t
(7 rows)

\d+ hash_range_sales
                   Table "hw_subpartition_add_drop_partition_1.hash_range_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_range_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default UNUSABLE
    "hash_range_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By RANGE(customer_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 7 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--
----hash-list table----
--
--prepare
CREATE TABLE hash_list_sales
(
    product_id     INT4 NOT NULL,
    customer_id    INT4 PRIMARY KEY,
    time_id        DATE,
    channel_id     CHAR(1),
    type_id        INT4,
    quantity_sold  NUMERIC(3),
    amount_sold    NUMERIC(10,2)
)
PARTITION BY HASH (product_id) SUBPARTITION BY LIST (channel_id)
(
    PARTITION product1
    (
        SUBPARTITION product1_channel1 VALUES ('0', '1', '2'),
        SUBPARTITION product1_channel2 VALUES ('3', '4', '5'),
        SUBPARTITION product1_channel3 VALUES ('6', '7', '8'),
        SUBPARTITION product1_channel4 VALUES ('9')
    ),
    PARTITION product2
    (
        SUBPARTITION product2_channel1 VALUES ('0', '1', '2', '3', '4'),
        SUBPARTITION product2_channel2 VALUES (DEFAULT)
    ),
    PARTITION product3,
    PARTITION product4
    (
        SUBPARTITION product4_channel1 VALUES ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')
    )
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "hash_list_sales_pkey" for table "hash_list_sales"
INSERT INTO hash_list_sales SELECT generate_series(1,1000),
                                   generate_series(1,1000),
                                   date_pli('2008-01-01', generate_series(1,1000)),
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%1000,
                                   generate_series(1,1000);
CREATE INDEX hash_list_sales_idx ON hash_list_sales(product_id) LOCAL;
--check for add partition/subpartition
--fail, not support add hash
ALTER TABLE hash_list_sales ADD PARTITION product_temp1
    (
        SUBPARTITION product_temp1_channel1 VALUES ('0', '1', '2'),
        SUBPARTITION product_temp1_channel2 VALUES ('3', '4', '5'),
        SUBPARTITION product_temp1_channel3 VALUES ('6', '7', '8'),
        SUBPARTITION product_temp1_channel4 VALUES ('9')
    );
ERROR:  syntax error at or near "("
LINE 2:     (
            ^
--fail, not support add hash
ALTER TABLE hash_list_sales ADD PARTITION product_temp2;
ERROR:  syntax error at or near ";"
LINE 1: ALTER TABLE hash_list_sales ADD PARTITION product_temp2;
                                                               ^
--success, add 1 subpartition
ALTER TABLE hash_list_sales MODIFY PARTITION product1 ADD SUBPARTITION product1_channel5 VALUES ('X');
--fail, out of range
ALTER TABLE hash_list_sales MODIFY PARTITION product2 ADD SUBPARTITION product2_temp1 VALUES ('X');
ERROR:  list boundary of adding partition MUST NOT overlap with existing partition
--fail, out of range
ALTER TABLE hash_list_sales MODIFY PARTITION product3 ADD SUBPARTITION product3_temp1 VALUES ('X');
ERROR:  list boundary of adding partition MUST NOT overlap with existing partition
--fail, invalid format
ALTER TABLE hash_list_sales MODIFY PARTITION product4 ADD SUBPARTITION product4_temp1 VALUES LESS THAN (MAXVALUE);
ERROR:  can not add none-list subpartition to list subpartition table
--success, add 1 subpartition
ALTER TABLE hash_list_sales MODIFY PARTITION product4 ADD SUBPARTITION product4_channel2 VALUES (DEFAULT);
--check for ok after add
SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_list_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_list_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey |      boundaries       
--------------------------+----------+--------------+-------------+---------------+---------+-----------------------
 product1                 | p        | h            | f           |             0 | 4       | {0}
 product2                 | p        | h            | f           |             0 | 4       | {1}
 product3                 | p        | h            | f           |             0 | 4       | {2}
 product4                 | p        | h            | f           |             0 | 4       | {3}
 hash_list_sales          | r        | h            | f           |             0 | 1       | 
 product1_channel1        | s        | l            | t           |             0 |         | {0,1,2}
 product1_channel2        | s        | l            | t           |             0 |         | {3,4,5}
 product1_channel3        | s        | l            | t           |             0 |         | {6,7,8}
 product1_channel4        | s        | l            | t           |             0 |         | {9}
 product1_channel5        | s        | l            | t           |             0 |         | {X}
 product2_channel1        | s        | l            | t           |             0 |         | {0,1,2,3,4}
 product2_channel2        | s        | l            | t           |             0 |         | {NULL}
 product3_subpartdefault1 | s        | l            | t           |             0 |         | {NULL}
 product4_channel1        | s        | l            | t           |             0 |         | {0,1,2,3,4,5,6,7,8,9}
 product4_channel2        | s        | l            | t           |             0 |         | {NULL}
(15 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_list_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_channel1_product_id_idx        | x        | n            | t           | t
 product1_channel2_product_id_idx        | x        | n            | t           | t
 product1_channel3_product_id_idx        | x        | n            | t           | t
 product1_channel4_product_id_idx        | x        | n            | t           | t
 product1_channel5_product_id_idx        | x        | n            | t           | t
 product2_channel1_product_id_idx        | x        | n            | t           | t
 product2_channel2_product_id_idx        | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_channel1_product_id_idx        | x        | n            | t           | t
 product4_channel2_product_id_idx        | x        | n            | t           | t
(10 rows)

\d+ hash_list_sales
                    Table "hw_subpartition_add_drop_partition_1.hash_list_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_list_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default
    "hash_list_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By LIST(channel_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 10 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--check for drop partition/subpartition (for)
--fail, not support drop hash
ALTER TABLE hash_list_sales DROP PARTITION product2;
ERROR:  Droping hash partition is unsupported.
--success, drop subpartition product1_channel1
ALTER TABLE hash_list_sales DROP SUBPARTITION product1_channel1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--success, drop subpartition product4_channel1
ALTER TABLE hash_list_sales DROP SUBPARTITION product4_channel1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, the only subpartition in product4
ALTER TABLE hash_list_sales DROP SUBPARTITION product4_channel2;
ERROR:  Cannot drop the only subpartition of a partitioned table
DETAIL:  N/A
--fail, not support drop hash
ALTER TABLE hash_list_sales DROP PARTITION FOR(0);
ERROR:  Droping hash partition is unsupported.
--fail, not support drop hash
ALTER TABLE hash_list_sales DROP PARTITION FOR(0, '4');
ERROR:  Droping hash partition is unsupported.
--fail, number not equal to the number of partkey
ALTER TABLE hash_list_sales DROP SUBPARTITION FOR(0);
ERROR:  Number of boundary items NOT EQUAL to number of partition keys
DETAIL:  There must be 2 boundary items for DROP SUBPARTITION in a subpartitioned table
--fail, invalid type
ALTER TABLE hash_list_sales DROP SUBPARTITION FOR('2010-01-01', '4');
ERROR:  invalid input syntax for integer: "2010-01-01"
--success, drop subpartition product1_channel2, but not suggest to do this operation
ALTER TABLE hash_list_sales DROP SUBPARTITION FOR(0, '4');
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
--fail, no subpartition find
ALTER TABLE hash_list_sales DROP SUBPARTITION FOR(0, 'Z');
ERROR:  The subpartition number is invalid or out-of-range
DETAIL:  N/A
--check for ok after drop
SELECT count(*) FROM hash_list_sales;
 count 
-------
   608
(1 row)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_list_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_list_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries  
--------------------------+----------+--------------+-------------+---------------+---------+-------------
 product1                 | p        | h            | f           |             0 | 4       | {0}
 product2                 | p        | h            | f           |             0 | 4       | {1}
 product3                 | p        | h            | f           |             0 | 4       | {2}
 product4                 | p        | h            | f           |             0 | 4       | {3}
 hash_list_sales          | r        | h            | f           |             0 | 1       | 
 product1_channel3        | s        | l            | t           |             0 |         | {6,7,8}
 product1_channel4        | s        | l            | t           |             0 |         | {9}
 product1_channel5        | s        | l            | t           |             0 |         | {X}
 product2_channel1        | s        | l            | t           |             0 |         | {0,1,2,3,4}
 product2_channel2        | s        | l            | t           |             0 |         | {NULL}
 product3_subpartdefault1 | s        | l            | t           |             0 |         | {NULL}
 product4_channel2        | s        | l            | t           |             0 |         | {NULL}
(12 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_list_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_channel3_product_id_idx        | x        | n            | t           | t
 product1_channel4_product_id_idx        | x        | n            | t           | t
 product1_channel5_product_id_idx        | x        | n            | t           | t
 product2_channel1_product_id_idx        | x        | n            | t           | t
 product2_channel2_product_id_idx        | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_channel2_product_id_idx        | x        | n            | t           | t
(7 rows)

\d+ hash_list_sales
                    Table "hw_subpartition_add_drop_partition_1.hash_list_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_list_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default UNUSABLE
    "hash_list_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By LIST(channel_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 7 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--
----hash-hash table----
--
--prepare
CREATE TABLE hash_hash_sales
(
    product_id     INT4 NOT NULL,
    customer_id    INT4 PRIMARY KEY,
    time_id        DATE,
    channel_id     CHAR(1),
    type_id        INT4,
    quantity_sold  NUMERIC(3),
    amount_sold    NUMERIC(10,2)
)
PARTITION BY HASH (product_id) SUBPARTITION BY HASH (customer_id)
(
    PARTITION product1
    (
        SUBPARTITION product1_customer1,
        SUBPARTITION product1_customer2,
        SUBPARTITION product1_customer3,
        SUBPARTITION product1_customer4
    ),
    PARTITION product2
    (
        SUBPARTITION product2_customer1,
        SUBPARTITION product2_customer2
    ),
    PARTITION product3,
    PARTITION product4
    (
        SUBPARTITION product4_customer1
    )
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "hash_hash_sales_pkey" for table "hash_hash_sales"
INSERT INTO hash_hash_sales SELECT generate_series(1,1000),
                                   generate_series(1,1000),
                                   date_pli('2008-01-01', generate_series(1,1000)),
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%10,
                                   generate_series(1,1000)%1000,
                                   generate_series(1,1000);
CREATE INDEX hash_hash_sales_idx ON hash_hash_sales(product_id) LOCAL;
--check for add partition/subpartition
--fail, not support add hash
ALTER TABLE hash_hash_sales ADD PARTITION product_temp1
    (
        SUBPARTITION product_temp1_customer1,
        SUBPARTITION product_temp1_customer2,
        SUBPARTITION product_temp1_customer3,
        SUBPARTITION product_temp1_customer4
    );
ERROR:  syntax error at or near "("
LINE 2:     (
            ^
--fail, not support add hash
ALTER TABLE hash_hash_sales ADD PARTITION product_temp2;
ERROR:  syntax error at or near ";"
LINE 1: ALTER TABLE hash_hash_sales ADD PARTITION product_temp2;
                                                               ^
--fail, not support add hash
ALTER TABLE hash_hash_sales MODIFY PARTITION product1 ADD SUBPARTITION product1_temp1;
ERROR:  syntax error at or near ";"
LINE 1: ...s MODIFY PARTITION product1 ADD SUBPARTITION product1_temp1;
                                                                      ^
--check for ok after add
SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_hash_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_hash_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 product1                 | p        | h            | f           |             0 | 2       | {0}
 product2                 | p        | h            | f           |             0 | 2       | {1}
 product3                 | p        | h            | f           |             0 | 2       | {2}
 product4                 | p        | h            | f           |             0 | 2       | {3}
 hash_hash_sales          | r        | h            | f           |             0 | 1       | 
 product1_customer1       | s        | h            | t           |             0 |         | {0}
 product1_customer2       | s        | h            | t           |             0 |         | {1}
 product1_customer3       | s        | h            | t           |             0 |         | {2}
 product1_customer4       | s        | h            | t           |             0 |         | {3}
 product2_customer1       | s        | h            | t           |             0 |         | {0}
 product2_customer2       | s        | h            | t           |             0 |         | {1}
 product3_subpartdefault1 | s        | h            | t           |             0 |         | {0}
 product4_customer1       | s        | h            | t           |             0 |         | {0}
(13 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_hash_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_customer1_product_id_idx       | x        | n            | t           | t
 product1_customer2_product_id_idx       | x        | n            | t           | t
 product1_customer3_product_id_idx       | x        | n            | t           | t
 product1_customer4_product_id_idx       | x        | n            | t           | t
 product2_customer1_product_id_idx       | x        | n            | t           | t
 product2_customer2_product_id_idx       | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_customer1_product_id_idx       | x        | n            | t           | t
(8 rows)

\d+ hash_hash_sales
                    Table "hw_subpartition_add_drop_partition_1.hash_hash_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_hash_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default
    "hash_hash_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By HASH(customer_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 8 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--check for drop partition/subpartition (for)
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP PARTITION product2;
ERROR:  Droping hash partition is unsupported.
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP SUBPARTITION product1_customer1;
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP SUBPARTITION product4_customer1;
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP PARTITION FOR(0);
ERROR:  Droping hash partition is unsupported.
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP PARTITION FOR(0, 0);
ERROR:  Droping hash partition is unsupported.
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP SUBPARTITION FOR(0, 0);
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--fail, not support drop hash
ALTER TABLE hash_hash_sales DROP SUBPARTITION FOR(0);
ERROR:  Un-support feature
DETAIL:  The syntax is unsupported for hash subpartition
--check for ok after drop
SELECT count(*) FROM hash_hash_sales;
 count 
-------
  1000
(1 row)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.reltablespace, p1.partkey, p1.boundaries
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_hash_sales'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid
            OR p1.parentid IN (
                SELECT p2.oid FROM pg_class c2, pg_partition p2, pg_namespace n2
                    WHERE c2.relname='hash_hash_sales'
                        AND c2.relnamespace=n2.oid
                        AND n2.nspname=CURRENT_SCHEMA
                        AND (p2.parentid=c2.oid)
            ))
    ORDER BY p1.parttype, p1.relname;
         relname          | parttype | partstrategy | hasfilenode | reltablespace | partkey | boundaries 
--------------------------+----------+--------------+-------------+---------------+---------+------------
 product1                 | p        | h            | f           |             0 | 2       | {0}
 product2                 | p        | h            | f           |             0 | 2       | {1}
 product3                 | p        | h            | f           |             0 | 2       | {2}
 product4                 | p        | h            | f           |             0 | 2       | {3}
 hash_hash_sales          | r        | h            | f           |             0 | 1       | 
 product1_customer1       | s        | h            | t           |             0 |         | {0}
 product1_customer2       | s        | h            | t           |             0 |         | {1}
 product1_customer3       | s        | h            | t           |             0 |         | {2}
 product1_customer4       | s        | h            | t           |             0 |         | {3}
 product2_customer1       | s        | h            | t           |             0 |         | {0}
 product2_customer2       | s        | h            | t           |             0 |         | {1}
 product3_subpartdefault1 | s        | h            | t           |             0 |         | {0}
 product4_customer1       | s        | h            | t           |             0 |         | {0}
(13 rows)

SELECT p1.relname, p1.parttype, p1.partstrategy, p1.relfilenode!=0 hasfilenode, p1.indisusable
    FROM pg_class c1, pg_partition p1, pg_namespace n1
    WHERE c1.relname='hash_hash_sales_idx'
        AND c1.relnamespace=n1.oid
        AND n1.nspname=CURRENT_SCHEMA
        AND (p1.parentid=c1.oid)
    ORDER BY p1.relname;
                 relname                 | parttype | partstrategy | hasfilenode | indisusable 
-----------------------------------------+----------+--------------+-------------+-------------
 product1_customer1_product_id_idx       | x        | n            | t           | t
 product1_customer2_product_id_idx       | x        | n            | t           | t
 product1_customer3_product_id_idx       | x        | n            | t           | t
 product1_customer4_product_id_idx       | x        | n            | t           | t
 product2_customer1_product_id_idx       | x        | n            | t           | t
 product2_customer2_product_id_idx       | x        | n            | t           | t
 product3_subpartdefault1_product_id_idx | x        | n            | t           | t
 product4_customer1_product_id_idx       | x        | n            | t           | t
(8 rows)

\d+ hash_hash_sales
                    Table "hw_subpartition_add_drop_partition_1.hash_hash_sales"
    Column     |              Type              | Modifiers | Storage  | Stats target | Description 
---------------+--------------------------------+-----------+----------+--------------+-------------
 product_id    | integer                        | not null  | plain    |              | 
 customer_id   | integer                        | not null  | plain    |              | 
 time_id       | timestamp(0) without time zone |           | plain    |              | 
 channel_id    | character(1)                   |           | extended |              | 
 type_id       | integer                        |           | plain    |              | 
 quantity_sold | numeric(3,0)                   |           | main     |              | 
 amount_sold   | numeric(10,2)                  |           | main     |              | 
Indexes:
    "hash_hash_sales_pkey" PRIMARY KEY, btree (customer_id) TABLESPACE pg_default
    "hash_hash_sales_idx" btree (product_id) LOCAL TABLESPACE pg_default
Partition By HASH(product_id) Subpartition By HASH(customer_id)
Number of partitions: 4 (View pg_partition to check each partition range.)
Number of subpartitions: 8 (View pg_partition to check each subpartition range.)
Has OIDs: no
Options: orientation=row, compression=no

--finish
DROP TABLE list_hash_sales;
DROP TABLE hash_range_sales;
DROP TABLE hash_list_sales;
DROP TABLE hash_hash_sales;
DROP SCHEMA hw_subpartition_add_drop_partition_1 CASCADE;
RESET CURRENT_SCHEMA;
