CREATE TABLE r(a int, b int)
PARTITION BY RANGE (a)
(
	    PARTITION P1 VALUES LESS THAN(10),
	    PARTITION P2 VALUES LESS THAN(20),
	    PARTITION P3 VALUES LESS THAN(30),
	    PARTITION P4 VALUES LESS THAN(40)
);
create table l(a int, b int) partition by list(a)
( partition a_1 values(1,2), 
	  partition a_2 values(3,6));
 
create table h(a int, b int) partition by hash(a)
( partition h1_p_1, 
	  partition h2_p_2);
insert into r values(generate_series(1,39,1), generate_series(1,39,1));
insert into l values(1,1);
insert into h values(generate_series(1,39,1), generate_series(1,39,1));
--select
prepare p1(int,int) as SELECT * FROM r INNER JOIN h ON r.a=$1 and h.a=$2;
explain  execute p1(10,10);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Nested Loop  (cost=0.00..62.27 rows=121 width=16)
   ->  Partitioned Seq Scan on r  (cost=0.00..28.86 rows=11 width=8)
         Filter: (a = $1)
         Selected Partitions:  PART
   ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
         ->  Partitioned Seq Scan on h  (cost=0.00..31.86 rows=11 width=8)
               Filter: (a = $2)
               Selected Partitions:  PART
(8 rows)

execute p1(10,10);
 a  | b  | a  | b  
----+----+----+----
 10 | 10 | 10 | 10
(1 row)

prepare p2(int,int,int,int) as select * from r inner join h on r.a=$1 and h.a=$2 inner join l on r.a=$3 and l.a=$4;
explain  execute p2(1,1,1,1);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Result  (cost=0.00..110.80 rows=1331 width=24)
   One-Time Filter: ($1 = $3)
   ->  Nested Loop  (cost=0.00..110.80 rows=1331 width=24)
         ->  Nested Loop  (cost=0.00..62.27 rows=121 width=16)
               ->  Partitioned Seq Scan on r  (cost=0.00..28.86 rows=11 width=8)
                     Filter: (a = $3)
                     Selected Partitions:  PART
               ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
                     ->  Partitioned Seq Scan on h  (cost=0.00..31.86 rows=11 width=8)
                           Filter: (a = $2)
                           Selected Partitions:  PART
         ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
               ->  Partitioned Seq Scan on l  (cost=0.00..31.86 rows=11 width=8)
                     Filter: (a = $4)
                     Selected Partitions:  PART
(15 rows)

execute p2(1,1,1,1);
 a | b | a | b | a | b 
---+---+---+---+---+---
 1 | 1 | 1 | 1 | 1 | 1
(1 row)

prepare p3(int,int) as SELECT * FROM r right JOIN h ON r.a=$1 and h.a=$2;
explain  execute p3(10,10);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..414.97 rows=2149 width=16)
   Join Filter: (h.a = $2)
   ->  Partition Iterator  (cost=0.00..31.49 rows=2149 width=8)
         Iterations: 2
         ->  Partitioned Seq Scan on h  (cost=0.00..31.49 rows=2149 width=8)
               Selected Partitions:  1..2
   ->  Materialize  (cost=0.00..28.92 rows=11 width=8)
         ->  Partitioned Seq Scan on r  (cost=0.00..28.86 rows=11 width=8)
               Filter: (a = $1)
               Selected Partitions:  PART
(10 rows)

prepare p4(int,int) as SELECT * FROM r left JOIN h ON r.a=$1 and h.a=$2;
explain  execute p4(10,10);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..417.97 rows=2149 width=16)
   Join Filter: (r.a = $1)
   ->  Partition Iterator  (cost=0.00..31.49 rows=2149 width=8)
         Iterations: 4
         ->  Partitioned Seq Scan on r  (cost=0.00..31.49 rows=2149 width=8)
               Selected Partitions:  1..4
   ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
         ->  Partitioned Seq Scan on h  (cost=0.00..31.86 rows=11 width=8)
               Filter: (a = $2)
               Selected Partitions:  PART
(10 rows)

prepare p5(int,int) as SELECT * FROM h right JOIN l ON h.a=$1 and l.a=$2;
explain  execute p5(10,10);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..417.97 rows=2149 width=16)
   Join Filter: (l.a = $2)
   ->  Partition Iterator  (cost=0.00..31.49 rows=2149 width=8)
         Iterations: 2
         ->  Partitioned Seq Scan on l  (cost=0.00..31.49 rows=2149 width=8)
               Selected Partitions:  1..2
   ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
         ->  Partitioned Seq Scan on h  (cost=0.00..31.86 rows=11 width=8)
               Filter: (a = $1)
               Selected Partitions:  PART
(10 rows)

prepare p6(int,int) as SELECT * FROM h left JOIN l ON h.a=$1 and l.a=$2;
explain  execute p6(10,10);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..417.97 rows=2149 width=16)
   Join Filter: (h.a = $1)
   ->  Partition Iterator  (cost=0.00..31.49 rows=2149 width=8)
         Iterations: 2
         ->  Partitioned Seq Scan on h  (cost=0.00..31.49 rows=2149 width=8)
               Selected Partitions:  1..2
   ->  Materialize  (cost=0.00..31.92 rows=11 width=8)
         ->  Partitioned Seq Scan on l  (cost=0.00..31.86 rows=11 width=8)
               Filter: (a = $2)
               Selected Partitions:  PART
(10 rows)

prepare p7(int) as SELECT * FROM h where h.a=$1;
explain  execute p7(10);
                          QUERY PLAN                           
---------------------------------------------------------------
 Partitioned Seq Scan on h  (cost=0.00..31.86 rows=11 width=8)
   Filter: (a = $1)
   Selected Partitions:  PART
(3 rows)

execute p7(10);
 a  | b  
----+----
 10 | 10
(1 row)

prepare p8(int) as SELECT * FROM h where h.a<=$1+5*2 ORDER BY h.a;
explain  execute p8(18);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort  (cost=76.19..77.98 rows=716 width=8)
   Sort Key: a
   ->  Partition Iterator  (cost=0.00..42.23 rows=716 width=8)
         Iterations: PART
         ->  Partitioned Seq Scan on h  (cost=0.00..42.23 rows=716 width=8)
               Filter: (a <= ($1 + 10))
               Selected Partitions:  PART
(7 rows)

execute p8(18);
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
 11 | 11
 12 | 12
 13 | 13
 14 | 14
 15 | 15
 16 | 16
 17 | 17
 18 | 18
 19 | 19
 20 | 20
 21 | 21
 22 | 22
 23 | 23
 24 | 24
 25 | 25
 26 | 26
 27 | 27
 28 | 28
(28 rows)

prepare p9(int) as SELECT * FROM l where l.a=$1;
explain  execute p9(1);
                          QUERY PLAN                           
---------------------------------------------------------------
 Partitioned Seq Scan on l  (cost=0.00..31.86 rows=11 width=8)
   Filter: (a = $1)
   Selected Partitions:  PART
(3 rows)

execute p9(1);
 a | b 
---+---
 1 | 1
(1 row)

prepare p10(int,int) as SELECT * FROM l where l.a>=$1+$2/5 ORDER BY l.a;
explain  execute p10(-2,5);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=92.30..94.09 rows=716 width=8)
   Sort Key: a
   ->  Partition Iterator  (cost=0.00..58.35 rows=716 width=8)
         Iterations: 2
         ->  Partitioned Seq Scan on l  (cost=0.00..58.35 rows=716 width=8)
               Filter: ((a)::double precision >= (($1)::double precision + ($2 / 5)))
               Selected Partitions:  1..2
(7 rows)

execute p10(-2,5);
 a | b 
---+---
 1 | 1
(1 row)

--update
prepare p13(int) as UPDATE l set b = b + 10 where a = $1+1;
execute p13(0);
select * from l ORDER BY l.a;
 a | b  
---+----
 1 | 11
(1 row)

-- delete
prepare p14(int) as DELETE FROM h where a>$1+1;
execute p14(15);
select * from h ORDER BY h.a;
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
 11 | 11
 12 | 12
 13 | 13
 14 | 14
 15 | 15
 16 | 16
(16 rows)

drop table pbe_pt1;
ERROR:  table "pbe_pt1" does not exist
create table pbe_pt1 (id int, name varchar2(100))
partition by range (id)
(
partition p1 values less than (100),
partition p2 values less than (200),
partition p3 values less than (MAXVALUE)
);
insert into pbe_pt1 values (1,'a'),(100,'b'),(200,'c');
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,1) |   1 | a
 (0,1) | 100 | b
 (0,1) | 200 | c
(3 rows)

-- tidscan
prepare pp1 as update pbe_pt1 set id = id + 10 where ctid = (select ctid from pbe_pt1 where id=$1) and id=$1;
explain (costs off) execute pp1 (1);
               QUERY PLAN                
-----------------------------------------
 Update on pbe_pt1
   InitPlan 1 (returns $2)
     ->  Partitioned Seq Scan on pbe_pt1
           Filter: (id = $1)
           Selected Partitions:  PART
   ->  Partitioned Tid Scan on pbe_pt1
         TID Cond: (ctid = $2)
         Filter: (id = $1)
         Selected Partitions:  PART
(9 rows)

begin;
execute pp1 (1);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,2) |  11 | a
 (0,1) | 100 | b
 (0,1) | 200 | c
(3 rows)

execute pp1 (100);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,2) |  11 | a
 (0,2) | 110 | b
 (0,1) | 200 | c
(3 rows)

execute pp1 (200);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,2) |  11 | a
 (0,2) | 110 | b
 (0,2) | 210 | c
(3 rows)

rollback;
-- seqscan
set enable_tidscan = 0;
prepare pp1_2 as update pbe_pt1 set id = id + 10 where ctid = (select ctid from pbe_pt1 where id=$1) and id=$1;
explain (costs off) execute pp1_2 (1);
                 QUERY PLAN                  
---------------------------------------------
 Update on pbe_pt1
   InitPlan 1 (returns $2)
     ->  Partitioned Seq Scan on pbe_pt1
           Filter: (id = $1)
           Selected Partitions:  PART
   ->  Partitioned Seq Scan on pbe_pt1
         Filter: ((ctid = $2) AND (id = $1))
         Selected Partitions:  PART
(8 rows)

begin;
execute pp1_2 (1);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,3) |  11 | a
 (0,1) | 100 | b
 (0,1) | 200 | c
(3 rows)

execute pp1_2 (100);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,3) |  11 | a
 (0,3) | 110 | b
 (0,1) | 200 | c
(3 rows)

execute pp1_2 (200);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,3) |  11 | a
 (0,3) | 110 | b
 (0,3) | 210 | c
(3 rows)

rollback;
-- indexscan
set enable_indexscan = 1;
set enable_seqscan = 0;
set enable_bitmapscan = 0;
create index i_pbe_pt1 on pbe_pt1 (id) local;
prepare pp1_3 as update pbe_pt1 set id = id + 10 where ctid = (select ctid from pbe_pt1 where id=$1) and id=$1;
explain (costs off) execute pp1_3 (1);
                        QUERY PLAN                         
-----------------------------------------------------------
 Update on pbe_pt1
   InitPlan 1 (returns $2)
     ->  Partitioned Index Scan using i_pbe_pt1 on pbe_pt1
           Index Cond: (id = $1)
           Selected Partitions:  PART
   ->  Partitioned Index Scan using i_pbe_pt1 on pbe_pt1
         Index Cond: (id = $1)
         Filter: (ctid = $2)
         Selected Partitions:  PART
(9 rows)

begin;
execute pp1_3 (1);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,4) |  11 | a
 (0,1) | 100 | b
 (0,1) | 200 | c
(3 rows)

execute pp1_3 (100);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,4) |  11 | a
 (0,4) | 110 | b
 (0,1) | 200 | c
(3 rows)

execute pp1_3 (200);
select ctid, * from pbe_pt1;
 ctid  | id  | name 
-------+-----+------
 (0,4) |  11 | a
 (0,4) | 110 | b
 (0,4) | 210 | c
(3 rows)

rollback;
-- tidscan
set enable_tidscan = 1;
set enable_indexscan = 0;
prepare pp2 as select ctid, * from pbe_pt1 where id=$1 and ctid = (select ctid from pbe_pt1 where id=$1 and name=$2);
explain (costs off) execute pp2 (1, 'a');
                      QUERY PLAN                       
-------------------------------------------------------
 Partitioned Tid Scan on pbe_pt1
   TID Cond: (ctid = $2)
   Filter: (id = $1)
   Selected Partitions:  PART
   InitPlan 1 (returns $2)
     ->  Partitioned Seq Scan on pbe_pt1
           Filter: ((id = $1) AND ((name)::text = $2))
           Selected Partitions:  PART
(8 rows)

execute pp2 (1,'a');
 ctid  | id | name 
-------+----+------
 (0,1) |  1 | a
(1 row)

execute pp2 (100,'b');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 100 | b
(1 row)

execute pp2 (200,'c');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 200 | c
(1 row)

execute pp2 (100,'c');
 ctid | id | name 
------+----+------
(0 rows)

execute pp2 (201,'c');
 ctid | id | name 
------+----+------
(0 rows)

-- seqscan
set enable_seqscan = 1;
set enable_tidscan = 0;
prepare pp2_2 as select ctid, * from pbe_pt1 where id=$1 and ctid = (select ctid from pbe_pt1 where id=$1 and name=$2);
explain (costs off) execute pp2_2 (1, 'a');
                      QUERY PLAN                       
-------------------------------------------------------
 Partitioned Seq Scan on pbe_pt1
   Filter: ((id = $1) AND (ctid = $2))
   Selected Partitions:  PART
   InitPlan 1 (returns $2)
     ->  Partitioned Seq Scan on pbe_pt1
           Filter: ((id = $1) AND ((name)::text = $2))
           Selected Partitions:  PART
(7 rows)

execute pp2_2 (1,'a');
 ctid  | id | name 
-------+----+------
 (0,1) |  1 | a
(1 row)

execute pp2_2 (100,'b');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 100 | b
(1 row)

execute pp2_2 (200,'c');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 200 | c
(1 row)

execute pp2_2 (100,'c');
 ctid | id | name 
------+----+------
(0 rows)

execute pp2_2 (111,'c');
 ctid | id | name 
------+----+------
(0 rows)

-- indexscan
set enable_indexscan = 1;
set enable_seqscan = 0;
prepare pp2_3 as select ctid, * from pbe_pt1 where id=$1 and ctid = (select ctid from pbe_pt1 where id=$1 and name=$2);
explain (costs off) execute pp2_3 (1, 'a');
                        QUERY PLAN                         
-----------------------------------------------------------
 Partitioned Index Scan using i_pbe_pt1 on pbe_pt1
   Index Cond: (id = $1)
   Filter: (ctid = $2)
   Selected Partitions:  PART
   InitPlan 1 (returns $2)
     ->  Partitioned Index Scan using i_pbe_pt1 on pbe_pt1
           Index Cond: (id = $1)
           Filter: ((name)::text = $2)
           Selected Partitions:  PART
(9 rows)

execute pp2_3 (1,'a');
 ctid  | id | name 
-------+----+------
 (0,1) |  1 | a
(1 row)

execute pp2_3 (100,'b');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 100 | b
(1 row)

execute pp2_3 (200,'c');
 ctid  | id  | name 
-------+-----+------
 (0,1) | 200 | c
(1 row)

execute pp2_3 (100,'c');
 ctid | id | name 
------+----+------
(0 rows)

execute pp2_3 (111,'c');
 ctid | id | name 
------+----+------
(0 rows)

drop table pbe_pt1;
set enable_tidscan = 1;
set enable_indexscan = 1;
set enable_seqscan = 1;
set enable_bitmapscan = 1;
drop table pbe_sp1;
ERROR:  table "pbe_sp1" does not exist
create table pbe_sp1(id int, name text, age int)
partition by hash(id)
subpartition by list(age)
(
partition p1
  (
    subpartition sp11 values (1,2,3,4,5),
    subpartition sp12 values (default)
  ),
partition p2
  (
    subpartition sp21 values (11,12,13,14,15),
    subpartition sp22 values (default)
  )
);
insert into pbe_sp1 values (3,'sp11',1), (4,'sp12',6), (5,'sp21',11), (6,'sp22', NULL);
select ctid, * from pbe_sp1 subpartition (sp11);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  3 | sp11 |   1
(1 row)

select ctid, * from pbe_sp1 subpartition (sp12);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  4 | sp12 |   6
(1 row)

select ctid, * from pbe_sp1 subpartition (sp21);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  5 | sp21 |  11
(1 row)

select ctid, * from pbe_sp1 subpartition (sp22);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  6 | sp22 |    
(1 row)

-- tidscan
prepare pp3 as update pbe_sp1 set age=$4 where ctid = (select ctid from pbe_sp1 where name=$2 and (age=$3 or ($3 is null and age is null))) and id=$1 and (age=$3 or ($3 is null and age is null));
explain (costs off) execute pp3 (6, 'sp22', NULL, NULL);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Update on pbe_sp1
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: 2, Sub Iterations: 4
           ->  Partitioned Seq Scan on pbe_sp1
                 Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (name = $2))
                 Selected Partitions:  1..2
                 Selected Subpartitions:  ALL
   ->  Partition Iterator
         Iterations: 2
         ->  Partitioned Tid Scan on pbe_sp1
               TID Cond: (ctid = $2)
               Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (id = $1))
               Selected Partitions:  PART
(14 rows)

begin;
execute pp3 (3, 'sp11', 1, 2);
select ctid, * from pbe_sp1 subpartition (sp11) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,2) |  3 | sp11 |   2
(1 row)

execute pp3 (3, 'sp11', 2, 7);
select ctid, * from pbe_sp1 subpartition (sp12) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,2) |  3 | sp11 |   7
 (0,1) |  4 | sp12 |   6
(2 rows)

execute pp3 (4, 'sp12', 6, 8);
select ctid, * from pbe_sp1 subpartition (sp12) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,2) |  3 | sp11 |   7
 (0,3) |  4 | sp12 |   8
(2 rows)

execute pp3 (4, 'sp12', 8, 5);
select ctid, * from pbe_sp1 subpartition (sp11) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,3) |  4 | sp12 |   5
(1 row)

execute pp3 (6, 'sp22', NULL, NULL);
select ctid, * from pbe_sp1 subpartition (sp22) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,2) |  6 | sp22 |    
(1 row)

execute pp3 (6, 'sp22', NULL, 15);
select ctid, * from pbe_sp1 subpartition (sp21) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  5 | sp21 |  11
 (0,2) |  6 | sp22 |  15
(2 rows)

execute pp3 (5, 'sp21', 11, 12);
select ctid, * from pbe_sp1 subpartition (sp21) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,3) |  5 | sp21 |  12
 (0,2) |  6 | sp22 |  15
(2 rows)

execute pp3 (5, 'sp21', 12, NULL);
select ctid, * from pbe_sp1 subpartition (sp22) order by id;
 ctid  | id | name | age 
-------+----+------+-----
 (0,3) |  5 | sp21 |    
(1 row)

rollback;
prepare pp4 as select ctid, * from pbe_sp1 where id=$1 and (age=$3 or ($3 is null and age is null)) and name=$2 and ctid=(select ctid from pbe_sp1 where id=$1 and name=$2);
explain (costs off) execute pp4 (3, 'sp11', 1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 2
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: PART
           ->  Partitioned Seq Scan on pbe_sp1
                 Filter: ((id = $1) AND (name = $2))
                 Selected Partitions:  PART
   ->  Partitioned Tid Scan on pbe_sp1
         TID Cond: (ctid = $2)
         Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (id = $1) AND (name = $2))
         Selected Partitions:  PART
(12 rows)

execute pp4 (3, 'sp11', 1);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  3 | sp11 |   1
(1 row)

execute pp4 (4, 'sp12', 6);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  4 | sp12 |   6
(1 row)

execute pp4 (5, 'sp21', 11);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  5 | sp21 |  11
(1 row)

execute pp4 (6, 'sp22', NULL);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  6 | sp22 |    
(1 row)

-- seqscan
set enable_tidscan=0;
prepare pp5 as select ctid, * from pbe_sp1 where id=$1 and name=$2 and ctid = (select ctid from pbe_sp1 where id=$1 and (age=$3 or ($3 is null and age is null)) and name=$2);
explain (costs off) execute pp5 (3, 'sp11', 1);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: PART
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: PART
           ->  Partitioned Seq Scan on pbe_sp1
                 Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (id = $1) AND (name = $2))
                 Selected Partitions:  PART
   ->  Partitioned Seq Scan on pbe_sp1
         Filter: ((id = $1) AND (name = $2) AND (ctid = $2))
         Selected Partitions:  PART
(11 rows)

execute pp5 (3, 'sp11', 1);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  3 | sp11 |   1
(1 row)

execute pp5 (4, 'sp12', 6);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  4 | sp12 |   6
(1 row)

execute pp5 (5, 'sp21', 11);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  5 | sp21 |  11
(1 row)

execute pp5 (6, 'sp22', NULL);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  6 | sp22 |    
(1 row)

-- indexscan
create unique index i_pbe_sp1 on pbe_sp1(id,age) local;
set enable_seqscan = 0;
set enable_indexscan = 1;
set enable_indexonlyscan = 0;
set enable_bitmapscan = 0;
set enable_tidscan = 0;
prepare pp6 as select ctid, * from pbe_sp1 where id=$1 and (age=$3 or ($3 is null and age is null)) and name=$2 and ctid=(select ctid from pbe_sp1 where id=$1 and name=$2);
explain (costs off) execute pp6 (3, 'sp11', 1);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: PART
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: PART
           ->  Partitioned Index Scan using i_pbe_sp1 on pbe_sp1
                 Index Cond: (id = $1)
                 Filter: (name = $2)
                 Selected Partitions:  PART
   ->  Partitioned Index Scan using i_pbe_sp1 on pbe_sp1
         Index Cond: (id = $1)
         Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (name = $2) AND (ctid = $2))
         Selected Partitions:  PART
(13 rows)

execute pp6 (3, 'sp11', 1);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  3 | sp11 |   1
(1 row)

execute pp6 (4, 'sp12', 6);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  4 | sp12 |   6
(1 row)

execute pp6 (5, 'sp21', 11);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  5 | sp21 |  11
(1 row)

execute pp6 (6, 'sp22', NULL);
 ctid  | id | name | age 
-------+----+------+-----
 (0,1) |  6 | sp22 |    
(1 row)

-- indexonlyscan
create index i2_pbe_sp1 on pbe_sp1(id,name,ctid) local;
set enable_indexscan = 0;
set enable_indexonlyscan = 1;
prepare pp7 as select ctid, id, name from pbe_sp1 where id=$1 and name = (select name from pbe_sp1 where id=$1 and name=$2);
explain (costs off) execute pp7 (3, 'sp11');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Partition Iterator
   Iterations: PART
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: PART
           ->  Partitioned Index Only Scan using i2_pbe_sp1 on pbe_sp1
                 Index Cond: ((id = $1) AND (name = $2))
                 Selected Partitions:  PART
   ->  Partitioned Index Only Scan using i2_pbe_sp1 on pbe_sp1
         Index Cond: ((id = $1) AND (name = $2))
         Selected Partitions:  PART
(11 rows)

execute pp7 (3, 'sp11');
 ctid  | id | name 
-------+----+------
 (0,1) |  3 | sp11
(1 row)

execute pp7 (4, 'sp12');
 ctid  | id | name 
-------+----+------
 (0,1) |  4 | sp12
(1 row)

execute pp7 (5, 'sp21');
 ctid  | id | name 
-------+----+------
 (0,1) |  5 | sp21
(1 row)

execute pp7 (6, 'sp22');
 ctid  | id | name 
-------+----+------
 (0,1) |  6 | sp22
(1 row)

drop index i2_pbe_sp1;
-- bitmapscan
set enable_indexonlyscan = 0;
set enable_bitmapscan = 1;
prepare pp8 as select ctid, id from pbe_sp1 where id=$1 and name=$2 and ctid=(select ctid from pbe_sp1 where id=$1 and name=$2 and (age=$3 or ($3 is null and age is null)));
explain (costs off) execute pp8 (3, 'sp11', 1);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: PART
   InitPlan 1 (returns $2)
     ->  Partition Iterator
           Iterations: PART
           ->  Partitioned Bitmap Heap Scan on pbe_sp1
                 Recheck Cond: (id = $1)
                 Filter: (((age = $3) OR (($3 IS NULL) AND (age IS NULL))) AND (name = $2))
                 Selected Partitions:  PART
                 ->  Partitioned Bitmap Index Scan on i_pbe_sp1
                       Index Cond: (id = $1)
                       Selected Partitions:  PART
   ->  Partitioned Bitmap Heap Scan on pbe_sp1
         Recheck Cond: (id = $1)
         Filter: ((name = $2) AND (ctid = $2))
         Selected Partitions:  PART
         ->  Partitioned Bitmap Index Scan on i_pbe_sp1
               Index Cond: (id = $1)
               Selected Partitions:  PART
(19 rows)

execute pp8 (3, 'sp11', 1);
 ctid  | id 
-------+----
 (0,1) |  3
(1 row)

execute pp8 (4, 'sp12', 6);
 ctid  | id 
-------+----
 (0,1) |  4
(1 row)

execute pp8 (5, 'sp21', 11);
 ctid  | id 
-------+----
 (0,1) |  5
(1 row)

execute pp8 (6, 'sp22', NULL);
 ctid  | id 
-------+----
 (0,1) |  6
(1 row)

drop table pbe_sp1;
