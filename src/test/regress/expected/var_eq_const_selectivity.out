DROP SCHEMA var_eq_const_selectivity CASCADE;
ERROR:  schema "var_eq_const_selectivity" does not exist
CREATE SCHEMA var_eq_const_selectivity;
SET CURRENT_SCHEMA TO var_eq_const_selectivity;
drop table test_const;
ERROR:  table "test_const" does not exist
drop table t2;
ERROR:  table "t2" does not exist
-- ustore
create table test_const (a int, b int) with (storage_type = ustore);
create index idx on test_const(a, b);
insert into test_const values(101, generate_series(1, 300));
insert into test_const values(generate_series(1, 100), generate_series(1, 10000));
insert into test_const values(150, generate_series(1, 150000));
insert into test_const values(151, generate_series(1, 100000));
analyze test_const;
create table t2 (c int, d int) with (storage_type = ustore);
create index idx2 on t2(c);
insert into t2 values(200, generate_series(1, 2000));
analyze t2;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 150;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = 150)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 101)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 11)
(3 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 200)
(3 rows)

-- set with HINT
explain select/*+set (var_eq_const_selectivity on)*/ a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=8\)
   Index Cond: (a = 200)
(3 rows)

show var_eq_const_selectivity;
 var_eq_const_selectivity 
--------------------------
 off
(1 row)

-- JOIN tables
explain (costs off) select a, b from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

explain (costs off) select count(*) from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Aggregate
   ->  Nested Loop
         ->  Seq Scan on t2
               Filter: (c = 200)
         ->  Materialize
               ->  Index Only Scan using idx on test_const
                     Index Cond: (a = 200)
(7 rows)

select count(*) from test_const, t2 where a = c and a = 200;
 count 
-------
     0
(1 row)

explain (costs off) select a, b from test_const, t2 where a = c and a = 200 limit 1;
--?.*
--?.*
 Limit
   ->  Nested Loop
         ->  Seq Scan on t2
               Filter: (c = 200)
         ->  Materialize
               ->  Index Only Scan using idx on test_const
                     Index Cond: (a = 200)
(7 rows)

select a, b from test_const, t2 where a = c and a = 200 limit 1;
 a | b 
---+---
(0 rows)

explain (costs off) select a, b from test_const left outer join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const right outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

explain (costs off) select a, b from test_const full outer join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const left join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const right join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 150;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = 150)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 101)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 11)
(3 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=8\)
   Index Cond: (a = 200)
(3 rows)

-- JOIN tables
explain (costs off) select a, b from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

explain (costs off) select count(*) from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Aggregate
   ->  Nested Loop
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
         ->  Seq Scan on t2
               Filter: (c = 200)
(6 rows)

select count(*) from test_const, t2 where a = c and a = 200;
 count 
-------
     0
(1 row)

explain (costs off) select a, b from test_const, t2 where a = c and a = 200 limit 1;
--?.*
--?.*
 Limit
   ->  Nested Loop
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
         ->  Seq Scan on t2
               Filter: (c = 200)
(6 rows)

select a, b from test_const, t2 where a = c and a = 200 limit 1;
 a | b 
---+---
(0 rows)

explain (costs off) select a, b from test_const left outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const right outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

explain (costs off) select a, b from test_const full outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const left join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const right join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

drop table test_const;
drop table t2;
-- astore
create table test_const (a int, b int) with (storage_type = astore);
create index idx on test_const(a, b);
insert into test_const values(101, generate_series(1, 300));
insert into test_const values(generate_series(1, 100), generate_series(1, 10000));
insert into test_const values(150, generate_series(1, 150000));
insert into test_const values(151, generate_series(1, 100000));
analyze test_const;
create table t2 (c int, d int) with (storage_type = astore);
create index idx2 on t2(c);
insert into t2 values(200, generate_series(1, 2000));
analyze t2;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 150;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = 150)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 101)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 11)
(3 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 200)
(3 rows)

-- JOIN tables
explain (costs off) select a, b from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

explain (costs off) select count(*) from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Aggregate
   ->  Nested Loop
         ->  Seq Scan on t2
               Filter: (c = 200)
         ->  Materialize
               ->  Index Only Scan using idx on test_const
                     Index Cond: (a = 200)
(7 rows)

select count(*) from test_const, t2 where a = c and a = 200;
 count 
-------
     0
(1 row)

explain (costs off) select a, b from test_const, t2 where a = c and a = 200 limit 1;
--?.*
--?.*
 Limit
   ->  Nested Loop
         ->  Seq Scan on t2
               Filter: (c = 200)
         ->  Materialize
               ->  Index Only Scan using idx on test_const
                     Index Cond: (a = 200)
(7 rows)

select a, b from test_const, t2 where a = c and a = 200 limit 1;
 a | b 
---+---
(0 rows)

explain (costs off) select a, b from test_const left outer join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const right outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

explain (costs off) select a, b from test_const full outer join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const left join t2 on a = c where a = 200;
--?.*
--?.*
 Hash Left Join
   Hash Cond: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Hash
         ->  Seq Scan on t2
               Filter: (c = 200)
(7 rows)

explain (costs off) select a, b from test_const right join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Seq Scan on t2
         Filter: (c = 200)
   ->  Materialize
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
(6 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 150;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = 150)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 101)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 11)
(3 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=8\)
   Index Cond: (a = 200)
(3 rows)

-- JOIN tables
explain (costs off) select a, b from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

explain (costs off) select count(*) from test_const, t2 where a = c and a = 200;
--?.*
--?.*
 Aggregate
   ->  Nested Loop
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
         ->  Seq Scan on t2
               Filter: (c = 200)
(6 rows)

select count(*) from test_const, t2 where a = c and a = 200;
 count 
-------
     0
(1 row)

explain (costs off) select a, b from test_const, t2 where a = c and a = 200 limit 1;
--?.*
--?.*
 Limit
   ->  Nested Loop
         ->  Index Only Scan using idx on test_const
               Index Cond: (a = 200)
         ->  Seq Scan on t2
               Filter: (c = 200)
(6 rows)

select a, b from test_const, t2 where a = c and a = 200 limit 1;
 a | b 
---+---
(0 rows)

explain (costs off) select a, b from test_const left outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const right outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

explain (costs off) select a, b from test_const full outer join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const left join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop Left Join
   Join Filter: (test_const.a = t2.c)
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(6 rows)

explain (costs off) select a, b from test_const right join t2 on a = c where a = 200;
--?.*
--?.*
 Nested Loop
   ->  Index Only Scan using idx on test_const
         Index Cond: (a = 200)
   ->  Seq Scan on t2
         Filter: (c = 200)
(5 rows)

drop table test_const;
-- boundary value for INT1
create table test_const (a INT1, b int) with (storage_type = astore);
create index idx on test_const(a, b);
insert into test_const values(101, generate_series(1,300));
insert into test_const values(generate_series(1,100), generate_series(1,10000));
insert into test_const values(255, generate_series(1,150000));
insert into test_const values(151, generate_series(1,100000));
analyze test_const;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 255::INT1;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = '255'::tinyint)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101::INT1;
--?.*
--?.*
 Bitmap Heap Scan on test_const
   Recheck Cond: (a = '101'::tinyint)
   ->  Bitmap Index Scan on idx
         Index Cond: (a = '101'::tinyint)
(4 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11::INT1;
--?.*
--?.*
 Bitmap Heap Scan on test_const
   Recheck Cond: (a = '11'::tinyint)
   ->  Bitmap Index Scan on idx
         Index Cond: (a = '11'::tinyint)
(4 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 0::INT1;
--?.*
--?.*
 Bitmap Heap Scan on test_const
   Recheck Cond: (a = '0'::tinyint)
   ->  Bitmap Index Scan on idx
         Index Cond: (a = '0'::tinyint)
(4 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = 255::INT1;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = '255'::tinyint)
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = 101::INT1;
--?.*
--?.*
 Bitmap Heap Scan on test_const
   Recheck Cond: (a = '101'::tinyint)
   ->  Bitmap Index Scan on idx
         Index Cond: (a = '101'::tinyint)
(4 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = 11::INT1;
--?.*
--?.*
 Bitmap Heap Scan on test_const
   Recheck Cond: (a = '11'::tinyint)
   ->  Bitmap Index Scan on idx
         Index Cond: (a = '11'::tinyint)
(4 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 0::INT1;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=5\)
   Index Cond: (a = '0'::tinyint)
(3 rows)

drop table test_const;
-- boundary value for INT2
create table test_const (a INT2, b int) with (storage_type = astore);
create index idx on test_const(a, b);
insert into test_const values(-32768, generate_series(1, 300));
insert into test_const values(generate_series(-32766, -32667), generate_series(1, 10000));
insert into test_const values(-20000, generate_series(1, 150000));
insert into test_const values(20000, generate_series(1, 100000));
analyze test_const;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -32768;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-32768))
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -32667;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-32667))
(3 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 200)
(3 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -32768;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-32768))
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -32667;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-32667))
(3 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 200;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=6\)
   Index Cond: (a = 200)
(3 rows)

drop table test_const;
-- boundary value for INT4
create table test_const (a INT4, b int) with (storage_type = ustore);
create index idx on test_const(a, b);
insert into test_const values(-2147483648, generate_series(1, 300));
insert into test_const values(generate_series(-2147483647, -2147483548), generate_series(1, 10000));
insert into test_const values(-20000, generate_series(1, 150000));
insert into test_const values(20000, generate_series(1, 100000));
analyze test_const;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -2147483648;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-2147483648))
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -2147483647;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-2147483647))
(3 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 2147483647;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 2147483647)
(3 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -2147483648;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-2147483648))
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -2147483647;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-2147483647))
(3 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 2147483647;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=8\)
   Index Cond: (a = 2147483647)
(3 rows)

drop table test_const;
-- boundary value for INT8
create table test_const (a INT8, b int) with (storage_type = ustore);
create index idx on test_const(a, b);
insert into test_const values(-9223372036854775808, generate_series(1, 300));
insert into test_const values(generate_series(-9223372036854775807,-9223372036854775708), generate_series(1, 10000));
insert into test_const values(-20000, generate_series(1, 150000));
insert into test_const values(20000, generate_series(1, 100000));
analyze test_const;
set var_eq_const_selectivity = off;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -9223372036854775808;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-9223372036854775808)::bigint)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -9223372036854775807;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-9223372036854775807)::bigint)
(3 rows)

-- const does not belong to MCV or histogram
explain (costs off) select a, b from test_const where a = 9223372036854775807;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = 9223372036854775807::bigint)
(3 rows)

set var_eq_const_selectivity = on;
-- const falls into MCV
explain (costs off) select a, b from test_const where a = -20000;
--?.*
--?.*
 Seq Scan on test_const
   Filter: (a = (-20000))
(2 rows)

-- const falls into histogram bucket with equal bounds
explain (costs off) select a, b from test_const where a = -9223372036854775808;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-9223372036854775808)::bigint)
(3 rows)

-- const falls into histogram bucket with unequal bounds
explain (costs off) select a, b from test_const where a = -9223372036854775807;
--?.*
--?.*
 [Bypass]
 Index Only Scan using idx on test_const
   Index Cond: (a = (-9223372036854775807)::bigint)
(3 rows)

-- const does not belong to MCV or histogram
explain select a, b from test_const where a = 9223372036854775807;
--?.*
--?.*
 [Bypass]
--? Index Only Scan using idx on test_const  \(cost=[0-9]*\.[0-9]*\.\.[0-9]*\.[0-9]* rows=1 width=12\)
   Index Cond: (a = 9223372036854775807::bigint)
(3 rows)

reset var_eq_const_selectivity;
drop table test_const;
drop table t2;
DROP SCHEMA var_eq_const_selectivity CASCADE;
