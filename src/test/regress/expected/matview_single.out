-- prepare
create table test(c1 int);
insert into test values(1);
-- base op
drop Materialized view mvtest_tm;
ERROR:  materialized view "mvtest_tm" does not exist
CREATE MATERIALIZED VIEW mvtest_tm AS select *from test;
select *From mvtest_tm;
 c1 
----
  1
(1 row)

insert into test values(1);
REFRESH MATERIALIZED VIEW mvtest_tm;
select *from mvtest_tm;
 c1 
----
  1
  1
(2 rows)

drop Materialized view mvtest_tm;
-- error
create incremental MATERIALIZED VIEW mvtest_inc AS select *from test;
REFRESH incremental MATERIALIZED VIEW mvtest_tm;
ERROR:  relation "mvtest_tm" does not exist
-- test matview with anounymous types
create database test_imv_db with dbcompatibility 'b';
\c test_imv_db
-- case 1: drop type first
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop type imv1_t_a_set cascade;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to table imv1_t column a
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
drop cascades to materialized view imv1_v column a
--?.*
drop cascades to materialized view imv12_v column a
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

drop table imv1_t cascade;
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

-- case 2: drop view first
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop materialized view imv1_v;
select oid, relname from pg_class where relname like 'mlog%';
--?.*
--?.*
--?.*
--?.*
(2 rows)

drop materialized view imv12_v;
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

drop table imv1_t cascade;
-- case 3: drop table directly
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop table imv1_t cascade;
NOTICE:  drop cascades to 3 other objects
--?.*
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

-- case 4: multi columns
create table imv1_t(a set('ad','asf'), b set('b', 'bb'), c int, d set('b', 'bb'));
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
NOTICE:  CREATE TABLE will create implicit set "imv1_t_b_set" for column "imv1_t.b"
NOTICE:  CREATE TABLE will create implicit set "imv1_t_d_set" for column "imv1_t.d"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
create incremental materialized view imv13_v as select * from imv1_t;
\d
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
(4 rows)

drop table imv1_t cascade;
NOTICE:  drop cascades to 6 other objects
--?.*
--?.*
--?.*
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
drop cascades to materialized view imv13_v
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

\d
           List of relations
 Schema | Name | Type | Owner | Storage 
--------+------+------+-------+---------
(0 rows)

create table test_syn(id int unique,a1 varchar(20));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_syn_id_key" for table "test_syn"
create materialized view mv_test_syn as select * from test_syn;
create incremental materialized view imv_test_syn as select * from test_syn;
create synonym s_mv_test_syn for mv_test_syn;
create synonym s_imv_test_syn for imv_test_syn;
REFRESH MATERIALIZED VIEW s_mv_test_syn;
REFRESH MATERIALIZED VIEW s_imv_test_syn;
REFRESH INCREMENTAL MATERIALIZED VIEW s_mv_test_syn;
ERROR:  "mv_test_syn" is not an incremental materialized view
REFRESH INCREMENTAL MATERIALIZED VIEW s_imv_test_syn;
drop synonym s_mv_test_syn;
drop synonym s_imv_test_syn;
drop table test_syn cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to materialized view mv_test_syn
drop cascades to materialized view imv_test_syn
-- case 5: drop mlog table.
create table imv1_t(a int);
insert into imv1_t values(1);
create incremental materialized view imv1_v as select * from imv1_t;
declare
    oid int := (select oid from pg_class where relname = 'imv1_t');
    table_name varchar(20) := 'mlog_' || oid;
    sql_stmt text := 'Drop table ' || table_name;
begin
    execute sql_stmt;
END;
/
--?ERROR:  Use 'Drop table' to drop mlog table mlog_.* is not allowed.
--?CONTEXT:  SQL statement "Drop table mlog_.*"
PL/pgSQL function inline_code_block line 5 at EXECUTE statement
-- case 6: drop table that looks like a mlog with valid oid.
drop materialized view imv1_v;
declare
    oid int := (select oid from pg_class where relname = 'imv1_t');
    table_name varchar(20) := 'mlog_' || oid;
    create_stmt text := 'Create table ' || table_name || '(a int)' ;
    drop_stmt text := 'Drop table ' || table_name;
begin
    execute create_stmt;
    execute drop_stmt;
END;
/
--?WARNING:  "mlog_.*" is not an appropriated name for relation
DETAIL:  The kernel may treat it as a mlog table of materialized view
--?CONTEXT:  SQL statement "Create table mlog_.*(a int)"
PL/pgSQL function inline_code_block line 6 at EXECUTE statement
-- case 7: drop table that looks like a mlog without valid oid.
create table mlog_99999(a int);
WARNING:  "mlog_99999" is not an appropriated name for relation
DETAIL:  The kernel may treat it as a mlog table of materialized view
drop table mlog_99999;
drop table imv1_t cascade;
-- test about the privileges of refresh
create table t (id int);
insert into t select generate_series(1,10);
create materialized view mv_t as select * from t;
create user testuser with password 'Gauss@123';
grant usage on schema public to testuser;
grant select on t to testuser;
grant select on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  permission denied for relation mv_t
DETAIL:  N/A
reset role;
grant delete,insert on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  must be owner of relation mv_t
DETAIL:  N/A
reset role;
grant index on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  must be owner of relation mv_t
DETAIL:  N/A
reset role;
alter table mv_t owner to testuser;
set role testuser password 'Gauss@123';
-- success
refresh materialized view mv_t;
reset role;
drop user testuser cascade;
\c regression
drop database test_imv_db;
