DROP SCHEMA hw_partition_create_view CASCADE;
ERROR:  schema "hw_partition_create_view" does not exist
CREATE SCHEMA hw_partition_create_view;
SET CURRENT_SCHEMA TO hw_partition_create_view;
--
-- 1.create view as select partition on partitioned table
--
CREATE TABLE range_test1(c1 int,c2 int)
PARTITION BY RANGE (c1)
(
    PARTITION p1 VALUES LESS THAN (251),
    PARTITION p2 VALUES LESS THAN (501),
    PARTITION p3 VALUES LESS THAN (751),
    PARTITION p4 VALUES LESS THAN (MAXVALUE)
);
CREATE INDEX range_test1_idx ON range_test1(c1) GLOBAL;
INSERT INTO range_test1 SELECT generate_series(1,1000), generate_series(1,1000);
CREATE VIEW range_test1_v1 AS SELECT * FROM range_test1 PARTITION (p1);
CREATE VIEW range_test1_v2 AS SELECT * FROM range_test1 PARTITION (p2);
CREATE VIEW range_test1_v3 AS SELECT * FROM range_test1 PARTITION FOR (600);
--test for view, read OK
SELECT COUNT(*) FROM range_test1_v1;
 count 
-------
   250
(1 row)

SELECT COUNT(*) FROM range_test1_v2;
 count 
-------
   250
(1 row)

SELECT COUNT(*) FROM range_test1_v3;
 count 
-------
   250
(1 row)

-- do DDL on destination partition
ALTER TABLE range_test1 DROP PARTITION p1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
-- the partition is missing, error
SELECT COUNT(*) FROM range_test1_v1;
--?ERROR:  fail to find partition with oid .* for partitioned table .*
DETAIL:  this partition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target partition. If so, REBUILD this view.
ALTER TABLE range_test1 TRUNCATE PARTITION p2;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
-- the partition is reserved, success
SELECT COUNT(*) FROM range_test1_v2;
 count 
-------
     0
(1 row)

-- do DDL on destination partition
REINDEX INDEX range_test1_idx;
ALTER TABLE range_test1 TRUNCATE PARTITION p3 UPDATE GLOBAL INDEX;
-- the partition is rebuilt, error
SELECT COUNT(*) FROM range_test1_v3;
--?ERROR:  fail to find partition with oid .* for partitioned table .*
DETAIL:  this partition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target partition. If so, REBUILD this view.
--
-- 2.create view as select partition/subpartition on subpartitioned table
--
CREATE TABLE range_range_test1(c1 int,c2 int)
PARTITION BY RANGE (c1) SUBPARTITION BY RANGE (c2) 
(
    PARTITION p1 VALUES LESS THAN (251)
    (
        SUBPARTITION p1_1 VALUES LESS THAN (501),
        SUBPARTITION p1_2 VALUES LESS THAN (MAXVALUE)
    ),
    PARTITION p2 VALUES LESS THAN (501)
    (
        SUBPARTITION p2_1 VALUES LESS THAN (501),
        SUBPARTITION p2_2 VALUES LESS THAN (MAXVALUE)
    ),
    PARTITION p3 VALUES LESS THAN (751)
    (
        SUBPARTITION p3_1 VALUES LESS THAN (501),
        SUBPARTITION p3_2 VALUES LESS THAN (MAXVALUE)
    ),
    PARTITION p4 VALUES LESS THAN (MAXVALUE)
    (
        SUBPARTITION p4_1 VALUES LESS THAN (501),
        SUBPARTITION p4_2 VALUES LESS THAN (MAXVALUE)
    )
);
CREATE INDEX range_range_test1_idx ON range_range_test1(c1) GLOBAL;
INSERT INTO range_range_test1 SELECT generate_series(1,1000), generate_series(1,1000);
CREATE VIEW range_range_test1_v1 AS SELECT * FROM range_range_test1 PARTITION (p1);
CREATE VIEW range_range_test1_v2 AS SELECT * FROM range_range_test1 SUBPARTITION (p1_1);
CREATE VIEW range_range_test1_v3 AS SELECT * FROM range_range_test1 PARTITION FOR (400);
CREATE VIEW range_range_test1_v4 AS SELECT * FROM range_range_test1 SUBPARTITION FOR (400, 400);
--test for view, read OK
SELECT COUNT(*) FROM range_range_test1_v1;
 count 
-------
   250
(1 row)

SELECT COUNT(*) FROM range_range_test1_v2;
 count 
-------
   250
(1 row)

SELECT COUNT(*) FROM range_range_test1_v3;
 count 
-------
   250
(1 row)

SELECT COUNT(*) FROM range_range_test1_v4;
 count 
-------
   250
(1 row)

-- do DDL on destination partition
ALTER TABLE range_range_test1 DROP SUBPARTITION p1_1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
-- the subpartition p1_1 is missing
SELECT COUNT(*) FROM range_range_test1_v2;
--?ERROR:  fail to find subpartition with oid .* for partitioned table .*
DETAIL:  this subpartition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target subpartition. If so, REBUILD this view.
ALTER TABLE range_range_test1 DROP PARTITION p1;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
-- the partition p1 is missing
SELECT COUNT(*) FROM range_range_test1_v1;
--?ERROR:  fail to find partition with oid .* for partitioned table .*
DETAIL:  this partition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target partition. If so, REBUILD this view.
SELECT COUNT(*) FROM range_range_test1_v2;
--?ERROR:  fail to find partition with oid .* for partitioned table .*
DETAIL:  this partition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences a subpartition owned by the target partition. If so, REBUILD this view.
REINDEX INDEX range_range_test1_idx;
ALTER TABLE range_range_test1 TRUNCATE SUBPARTITION p2_1 UPDATE GLOBAL INDEX;
-- the subpartition p2_1 is rebuilt
SELECT COUNT(*) FROM range_range_test1_v4;
--?ERROR:  fail to find subpartition with oid .* for partitioned table .*
DETAIL:  this subpartition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target subpartition. If so, REBUILD this view.
-- rebuild range_range_test1_v4
DROP VIEW range_range_test1_v4;
CREATE VIEW range_range_test1_v4 AS SELECT * FROM range_range_test1 SUBPARTITION FOR (400, 400);
ALTER TABLE range_range_test1 TRUNCATE PARTITION p2 UPDATE GLOBAL INDEX;
-- the partition p2 is reserved, but the subpartition p2_1 is rebuilt
SELECT COUNT(*) FROM range_range_test1_v3;
 count 
-------
     0
(1 row)

SELECT COUNT(*) FROM range_range_test1_v4;
--?ERROR:  fail to find subpartition with oid .* for partitioned table .*
DETAIL:  this subpartition may have already been dropped by DDL operation
HINT:  Check if this query contains a view that refrences the target subpartition. If so, REBUILD this view.
--finish
DROP TABLE range_test1 CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to view range_test1_v1
drop cascades to view range_test1_v2
drop cascades to view range_test1_v3
DROP TABLE range_range_test1 CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to view range_range_test1_v1
drop cascades to view range_range_test1_v2
drop cascades to view range_range_test1_v3
drop cascades to view range_range_test1_v4
DROP SCHEMA hw_partition_create_view CASCADE;
RESET CURRENT_SCHEMA;
