create schema distribute_distinct;
set current_schema = distribute_distinct;
create table distribute_table_01 (c1 int, c2 bigint, c3 numeric) ;
insert into distribute_table_01 values (11, 21, 31);
insert into distribute_table_01 values (12, 22, 32);
insert into distribute_table_01 values (12, NULL, 32);
insert into distribute_table_01 values (13, 23, 33);
insert into distribute_table_01 values (13, 23, NULL);
insert into distribute_table_01 values (14, 24, 34);
insert into distribute_table_01 values (NULL, 24, 34);
insert into distribute_table_01 values (15, 25, 35);
insert into distribute_table_01 values (16, 26, 36);
insert into distribute_table_01 values (17, 27, 36);
insert into distribute_table_01 values (18, 27, 36);
insert into distribute_table_01 values (12, 22, 32);
insert into distribute_table_01 values (17, 27, 36);
insert into distribute_table_01 values (18, 27, 38);
insert into distribute_table_01 values (17, 27, 37);
create table distribute_table_02 (c1 int, c2 bigint, c3 numeric) ;
insert into distribute_table_02 values (11, 13, 31);
insert into distribute_table_02 values (12, 14, 32);
insert into distribute_table_02 values (12, NULL, 32);
insert into distribute_table_02 values (13, 14, 33);
insert into distribute_table_02 values (NULL, 14, 33);
insert into distribute_table_02 values (14, 15, 34);
insert into distribute_table_02 values (15, 15, 34);
analyze distribute_table_01;
analyze distribute_table_02;
set enable_mergejoin=off; 
set enable_nestloop=off; 
--Test settings:
--1. Distinct within top query;
--2. Without Group;
--3. Without Agg;
explain (verbose, costs off) select distinct c2, c3 from distribute_table_01 order by c2, c3 asc;
                            QUERY PLAN                            
------------------------------------------------------------------
 Unique
   Output: c2, c3
   ->  Sort
         Output: c2, c3
         Sort Key: distribute_table_01.c2, distribute_table_01.c3
         ->  Seq Scan on distribute_distinct.distribute_table_01
               Output: c2, c3
(7 rows)

explain (verbose, costs off) select distinct c1, c2, c3 from distribute_table_01 order by c1, c2, c3 asc;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Unique
   Output: c1, c2, c3
   ->  Sort
         Output: c1, c2, c3
         Sort Key: distribute_table_01.c1, distribute_table_01.c2, distribute_table_01.c3
         ->  Seq Scan on distribute_distinct.distribute_table_01
               Output: c1, c2, c3
(7 rows)

-- distribute key is hashkey
select distinct c1 from distribute_table_01 order by c1;
 c1 
----
 11
 12
 13
 14
 15
 16
 17
 18
   
(9 rows)

select distinct c1, c2, c3 from distribute_table_01 order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
    | 24 | 34
(13 rows)

-- distribute key is not hashkey
select distinct c2 from distribute_table_01 order by c2;
 c2 
----
 21
 22
 23
 24
 25
 26
 27
   
(8 rows)

select distinct c2, c3 from (select distribute_table_01.c2, distribute_table_02.c3 from distribute_table_01, distribute_table_02 where distribute_table_01.c1=distribute_table_02.c1) a order by c2, c3 asc;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 24 | 34
 25 | 34
    | 32
(6 rows)

--Test settings:
-- Distribute with agg
select c2, count(c3) from (select distinct c1, c2, c3 from distribute_table_01 order by c1) a group by a.c2 order by a.c2, count(c3);
 c2 | count 
----+-------
 21 |     1
 22 |     1
 23 |     1
 24 |     2
 25 |     1
 26 |     1
 27 |     4
    |     1
(8 rows)

-- Distribute key is not hashkey with semi join
select c1, c2, c3 from distribute_table_01 where c1 in (select distinct c2 from distribute_table_02 where c2 >= 12 order by c2) order by distribute_table_01.c1, distribute_table_01.c2, distribute_table_01.c3;
 c1 | c2 | c3 
----+----+----
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
(4 rows)

-- Distinct within sub query
select c2, c3 from (select distinct c2, c3 from distribute_table_01 order by c2, c3 asc) as a order by c2, c3 asc;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
    | 32
(11 rows)

select distinct c31 from (select distinct c2, count(c3) c31 from distribute_table_01 group by c2 order by c2) as a order by c31 asc;
 c31 
-----
   1
   2
   5
(3 rows)

--Test cased summarizd from user requirements
--1. With union;
--2. With or without distributed columns;
--3. Using agg or unique node;
explain (verbose, costs off) 
(select distinct c1, c2, c3 from distribute_table_01 where c1<13) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13);
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
   Group By Key: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
   ->  Append
         ->  HashAggregate
               Output: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
               Group By Key: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
               ->  Seq Scan on distribute_distinct.distribute_table_01
                     Output: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
                     Filter: (distribute_distinct.distribute_table_01.c1 < 13)
         ->  HashAggregate
               Output: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
               Group By Key: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
               ->  Seq Scan on distribute_distinct.distribute_table_01
                     Output: distribute_distinct.distribute_table_01.c1, distribute_distinct.distribute_table_01.c2, distribute_distinct.distribute_table_01.c3
                     Filter: (distribute_distinct.distribute_table_01.c1 >= 13)
(16 rows)

--distribute by a hash key with union
((select distinct c1, c2, c3 from distribute_table_01 where c1<13) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13)) order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
(12 rows)

--distribute by not a key with union
((select distinct c2, c3 from distribute_table_01 where c2<23) 
union
(select distinct c2, c3 from distribute_table_01 where c2>=23)) order by c2, c3;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
(10 rows)

--unique is in DN,and append is on CN
((select distinct c1, c2, c3 from distribute_table_01 where c1<13 order by c1) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13)) order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
(12 rows)

--Test cased summarizd from user requirements
--1. Distinct appears in top query and sub query simultaneously;
--2. Using agg and unique node;
select distinct a.c1, a.c2, b.cn from 
	(select c1, c2 from distribute_table_01 where c3 > 31) a,
	(select c1, count(*) cn from (select distinct c1, c2, c3 from distribute_table_01 where c3>32) group by c1 having count(*)>1) b
where a.c1=b.c1
order by cn desc, a.c1;
 c1 | c2 | cn 
----+----+----
 17 | 27 |  2
 18 | 27 |  2
(2 rows)

--Test settings:
--1. Distinct appears in top query;
--2. With Group;
select distinct c1, c2 from distribute_table_01 group by c1, c2 order by c1, c2;
 c1 | c2 
----+----
 11 | 21
 12 | 22
 12 |   
 13 | 23
 14 | 24
 15 | 25
 16 | 26
 17 | 27
 18 | 27
    | 24
(10 rows)

select distinct c2, c3 from distribute_table_01 group by c2, c3 order by c2, c3;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
    | 32
(11 rows)

drop table distribute_table_01;
drop table distribute_table_02;
reset current_schema;
drop schema distribute_distinct;
--group is on CN 
RESET SEARCH_PATH;
CREATE SCHEMA DISTRIBUTE_QUERY;
CREATE TABLE DISTRIBUTE_QUERY.table_group_b20_000(
 C_CHAR_1 CHAR(1),
 C_CHAR_2 CHAR(10),
 C_CHAR_3 CHAR(100),
 C_VARCHAR_1 VARCHAR(1),
 C_VARCHAR_2 VARCHAR(10),
 C_VARCHAR_3 VARCHAR(1024),
 C_INT BIGINT,
 C_BIGINT BIGINT,
 C_SMALLINT BIGINT,
 C_FLOAT FLOAT,
 C_NUMERIC numeric(20,5),
 C_DP double precision,
 C_DATE DATE,
 C_TS_WITHOUT TIMESTAMP WITHOUT TIME ZONE,
 C_TS_WITH TIMESTAMP WITH TIME ZONE );
SET search_path='distribute_query';
CREATE INDEX idx_btree_TABLE_group_b20_001 on distribute_query.table_group_b20_000(C_INT);
CREATE INDEX idx_btree_TABLE_group_b20_002 on distribute_query.table_group_b20_000(C_BIGINT);
CREATE INDEX idx_btree_TABLE_group_b20_003 on distribute_query.table_group_b20_000(C_SMALLINT);
-- TEST
SET TIME ZONE 'PRC';
set datestyle to iso;
SET search_path='distribute_query';
set enable_hashagg to false;
SELECT C_INT FROM table_group_b20_000 WHERE C_INT>20 AND C_INT<=21 AND C_BIGINT<2 GROUP BY C_INT ;
 c_int 
-------
(0 rows)

RESET SEARCH_PATH;
DROP SCHEMA DISTRIBUTE_QUERY CASCADE;
NOTICE:  drop cascades to table distribute_query.table_group_b20_000
CREATE TABLE CTH(ID INT, ROWID TEXT, ROWDT TIMESTAMP, ATTRIBUTE TEXT, VAL TEXT);
SELECT DISTINCT ATTRIBUTE FROM CTH WHERE ATTRIBUTE = 'A' ORDER BY 1;
 attribute 
-----------
(0 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT DISTINCT ATTRIBUTE FROM CTH WHERE ATTRIBUTE = 'A' ORDER BY 1;
                 QUERY PLAN                  
---------------------------------------------
 Unique
   Output: attribute
   ->  Seq Scan on public.cth
         Output: attribute
         Filter: (cth.attribute = 'A'::text)
(5 rows)

DROP TABLE CTH;
--FIX: when sort is under group,result is wrong dual to wrong targetlist
DROP SCHEMA group_sort CASCADE;
ERROR:  schema "group_sort" does not exist
CREATE SCHEMA group_sort;
SET CURRENT_SCHEMA='group_sort';
CREATE TABLE group_sort.table_group_b5000_000(
 C_CHAR_1 CHAR(1),
 C_CHAR_2 CHAR(10),
 C_CHAR_3 CHAR(100),
 C_VARCHAR_1 VARCHAR(1),
 C_VARCHAR_2 VARCHAR(10),
 C_VARCHAR_3 VARCHAR(1024),
 C_INT BIGINT,
 C_BIGINT BIGINT,
 C_SMALLINT BIGINT,
 C_FLOAT FLOAT,
 C_NUMERIC numeric(20,5),
 C_DP double precision,
 C_DATE DATE,
 C_TS_WITHOUT TIMESTAMP WITHOUT TIME ZONE,
 C_TS_WITH TIMESTAMP WITH TIME ZONE );
CREATE OR REPLACE PROCEDURE func_insert_tbl_group_b5000_000()
AS
BEGIN
	FOR I IN 1..15 LOOP
		FOR j IN 1..10 LOOP
			INSERT INTO table_group_b5000_000 VALUES('A','b5000_0eq','b5000_000EFGGAHWGS','a','abcdx','b5000_0001111ABHTFADFADFDAFAFEFAGEAFEAFEAGEAGEAGEE_'||i,i,j,i+j,i+0.0001,i+0.00001,i+0.000001,'2000-01-01','2000-01-01 01:01:01','2000-01-01 01:01:01+01');
		END LOOP;
	END LOOP;
END;
/
CALL func_insert_tbl_group_b5000_000();
 func_insert_tbl_group_b5000_000 
---------------------------------
 
(1 row)

analyze table_group_b5000_000;
SET TIME ZONE 'PRC';
SET DATESTYLE TO ISO;
SET CURRENT_SCHEMA='group_sort';
SET ENABLE_HASHAGG TO FALSE;
EXPLAIN (VERBOSE ON, COSTS OFF)
SELECT C_INT,C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT>0 AND C_INT<11 AND C_BIGINT<10 GROUP BY C_INT,C_BIGINT ORDER BY C_INT,C_BIGINT;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: c_int, c_bigint
   Group By Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint
   ->  Sort
         Output: c_int, c_bigint
         Sort Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint
         ->  Seq Scan on group_sort.table_group_b5000_000
               Output: c_int, c_bigint
               Filter: ((table_group_b5000_000.c_int > 0) AND (table_group_b5000_000.c_int < 11) AND (table_group_b5000_000.c_bigint < 10))
(9 rows)

SELECT C_INT,C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT>0 AND C_INT<11 AND C_BIGINT<10 GROUP BY C_INT,C_BIGINT ORDER BY C_INT,C_BIGINT;
 c_int | c_bigint 
-------+----------
     1 |        1
     1 |        2
     1 |        3
     1 |        4
     1 |        5
     1 |        6
     1 |        7
     1 |        8
     1 |        9
     2 |        1
     2 |        2
     2 |        3
     2 |        4
     2 |        5
     2 |        6
     2 |        7
     2 |        8
     2 |        9
     3 |        1
     3 |        2
     3 |        3
     3 |        4
     3 |        5
     3 |        6
     3 |        7
     3 |        8
     3 |        9
     4 |        1
     4 |        2
     4 |        3
     4 |        4
     4 |        5
     4 |        6
     4 |        7
     4 |        8
     4 |        9
     5 |        1
     5 |        2
     5 |        3
     5 |        4
     5 |        5
     5 |        6
     5 |        7
     5 |        8
     5 |        9
     6 |        1
     6 |        2
     6 |        3
     6 |        4
     6 |        5
     6 |        6
     6 |        7
     6 |        8
     6 |        9
     7 |        1
     7 |        2
     7 |        3
     7 |        4
     7 |        5
     7 |        6
     7 |        7
     7 |        8
     7 |        9
     8 |        1
     8 |        2
     8 |        3
     8 |        4
     8 |        5
     8 |        6
     8 |        7
     8 |        8
     8 |        9
     9 |        1
     9 |        2
     9 |        3
     9 |        4
     9 |        5
     9 |        6
     9 |        7
     9 |        8
     9 |        9
    10 |        1
    10 |        2
    10 |        3
    10 |        4
    10 |        5
    10 |        6
    10 |        7
    10 |        8
    10 |        9
(90 rows)

EXPLAIN (VERBOSE ON, COSTS OFF)
SELECT C_INT,C_FLOAT,(C_INT+C_FLOAT),C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT>0 AND C_INT<14 AND C_BIGINT<10 GROUP BY C_INT,C_FLOAT,C_BIGINT ORDER BY C_INT,C_BIGINT DESC;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: c_int, c_float, ((c_int)::double precision + c_float), c_bigint
   Group By Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint, table_group_b5000_000.c_float
   ->  Sort
         Output: c_int, c_float, c_bigint
         Sort Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint DESC, table_group_b5000_000.c_float
         ->  Seq Scan on group_sort.table_group_b5000_000
               Output: c_int, c_float, c_bigint
               Filter: ((table_group_b5000_000.c_int > 0) AND (table_group_b5000_000.c_int < 14) AND (table_group_b5000_000.c_bigint < 10))
(9 rows)

SELECT C_INT,C_FLOAT,(C_INT+C_FLOAT),C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT>0 AND C_INT<14 AND C_BIGINT<10 GROUP BY C_INT,C_FLOAT,C_BIGINT ORDER BY C_INT,C_BIGINT DESC;
 c_int | c_float | ?column? | c_bigint 
-------+---------+----------+----------
     1 |  1.0001 |   2.0001 |        9
     1 |  1.0001 |   2.0001 |        8
     1 |  1.0001 |   2.0001 |        7
     1 |  1.0001 |   2.0001 |        6
     1 |  1.0001 |   2.0001 |        5
     1 |  1.0001 |   2.0001 |        4
     1 |  1.0001 |   2.0001 |        3
     1 |  1.0001 |   2.0001 |        2
     1 |  1.0001 |   2.0001 |        1
     2 |  2.0001 |   4.0001 |        9
     2 |  2.0001 |   4.0001 |        8
     2 |  2.0001 |   4.0001 |        7
     2 |  2.0001 |   4.0001 |        6
     2 |  2.0001 |   4.0001 |        5
     2 |  2.0001 |   4.0001 |        4
     2 |  2.0001 |   4.0001 |        3
     2 |  2.0001 |   4.0001 |        2
     2 |  2.0001 |   4.0001 |        1
     3 |  3.0001 |   6.0001 |        9
     3 |  3.0001 |   6.0001 |        8
     3 |  3.0001 |   6.0001 |        7
     3 |  3.0001 |   6.0001 |        6
     3 |  3.0001 |   6.0001 |        5
     3 |  3.0001 |   6.0001 |        4
     3 |  3.0001 |   6.0001 |        3
     3 |  3.0001 |   6.0001 |        2
     3 |  3.0001 |   6.0001 |        1
     4 |  4.0001 |   8.0001 |        9
     4 |  4.0001 |   8.0001 |        8
     4 |  4.0001 |   8.0001 |        7
     4 |  4.0001 |   8.0001 |        6
     4 |  4.0001 |   8.0001 |        5
     4 |  4.0001 |   8.0001 |        4
     4 |  4.0001 |   8.0001 |        3
     4 |  4.0001 |   8.0001 |        2
     4 |  4.0001 |   8.0001 |        1
     5 |  5.0001 |  10.0001 |        9
     5 |  5.0001 |  10.0001 |        8
     5 |  5.0001 |  10.0001 |        7
     5 |  5.0001 |  10.0001 |        6
     5 |  5.0001 |  10.0001 |        5
     5 |  5.0001 |  10.0001 |        4
     5 |  5.0001 |  10.0001 |        3
     5 |  5.0001 |  10.0001 |        2
     5 |  5.0001 |  10.0001 |        1
     6 |  6.0001 |  12.0001 |        9
     6 |  6.0001 |  12.0001 |        8
     6 |  6.0001 |  12.0001 |        7
     6 |  6.0001 |  12.0001 |        6
     6 |  6.0001 |  12.0001 |        5
     6 |  6.0001 |  12.0001 |        4
     6 |  6.0001 |  12.0001 |        3
     6 |  6.0001 |  12.0001 |        2
     6 |  6.0001 |  12.0001 |        1
     7 |  7.0001 |  14.0001 |        9
     7 |  7.0001 |  14.0001 |        8
     7 |  7.0001 |  14.0001 |        7
     7 |  7.0001 |  14.0001 |        6
     7 |  7.0001 |  14.0001 |        5
     7 |  7.0001 |  14.0001 |        4
     7 |  7.0001 |  14.0001 |        3
     7 |  7.0001 |  14.0001 |        2
     7 |  7.0001 |  14.0001 |        1
     8 |  8.0001 |  16.0001 |        9
     8 |  8.0001 |  16.0001 |        8
     8 |  8.0001 |  16.0001 |        7
     8 |  8.0001 |  16.0001 |        6
     8 |  8.0001 |  16.0001 |        5
     8 |  8.0001 |  16.0001 |        4
     8 |  8.0001 |  16.0001 |        3
     8 |  8.0001 |  16.0001 |        2
     8 |  8.0001 |  16.0001 |        1
     9 |  9.0001 |  18.0001 |        9
     9 |  9.0001 |  18.0001 |        8
     9 |  9.0001 |  18.0001 |        7
     9 |  9.0001 |  18.0001 |        6
     9 |  9.0001 |  18.0001 |        5
     9 |  9.0001 |  18.0001 |        4
     9 |  9.0001 |  18.0001 |        3
     9 |  9.0001 |  18.0001 |        2
     9 |  9.0001 |  18.0001 |        1
    10 | 10.0001 |  20.0001 |        9
    10 | 10.0001 |  20.0001 |        8
    10 | 10.0001 |  20.0001 |        7
    10 | 10.0001 |  20.0001 |        6
    10 | 10.0001 |  20.0001 |        5
    10 | 10.0001 |  20.0001 |        4
    10 | 10.0001 |  20.0001 |        3
    10 | 10.0001 |  20.0001 |        2
    10 | 10.0001 |  20.0001 |        1
    11 | 11.0001 |  22.0001 |        9
    11 | 11.0001 |  22.0001 |        8
    11 | 11.0001 |  22.0001 |        7
    11 | 11.0001 |  22.0001 |        6
    11 | 11.0001 |  22.0001 |        5
    11 | 11.0001 |  22.0001 |        4
    11 | 11.0001 |  22.0001 |        3
    11 | 11.0001 |  22.0001 |        2
    11 | 11.0001 |  22.0001 |        1
    12 | 12.0001 |  24.0001 |        9
    12 | 12.0001 |  24.0001 |        8
    12 | 12.0001 |  24.0001 |        7
    12 | 12.0001 |  24.0001 |        6
    12 | 12.0001 |  24.0001 |        5
    12 | 12.0001 |  24.0001 |        4
    12 | 12.0001 |  24.0001 |        3
    12 | 12.0001 |  24.0001 |        2
    12 | 12.0001 |  24.0001 |        1
    13 | 13.0001 |  26.0001 |        9
    13 | 13.0001 |  26.0001 |        8
    13 | 13.0001 |  26.0001 |        7
    13 | 13.0001 |  26.0001 |        6
    13 | 13.0001 |  26.0001 |        5
    13 | 13.0001 |  26.0001 |        4
    13 | 13.0001 |  26.0001 |        3
    13 | 13.0001 |  26.0001 |        2
    13 | 13.0001 |  26.0001 |        1
(117 rows)

EXPLAIN (VERBOSE ON, COSTS OFF)
SELECT SUM(C_INT),C_FLOAT,(C_INT+C_FLOAT),C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT<=14 AND C_BIGINT>0 GROUP BY C_INT,C_FLOAT,C_BIGINT ORDER BY C_INT,C_BIGINT DESC;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(c_int), c_float, ((c_int)::double precision + c_float), c_bigint, c_int
   Group By Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint, table_group_b5000_000.c_float
   ->  Sort
         Output: c_float, c_bigint, c_int
         Sort Key: table_group_b5000_000.c_int, table_group_b5000_000.c_bigint DESC, table_group_b5000_000.c_float
         ->  Seq Scan on group_sort.table_group_b5000_000
               Output: c_float, c_bigint, c_int
               Filter: ((table_group_b5000_000.c_int <= 14) AND (table_group_b5000_000.c_bigint > 0))
(9 rows)

SELECT SUM(C_INT),C_FLOAT,(C_INT+C_FLOAT),C_BIGINT FROM TABLE_GROUP_B5000_000 WHERE C_INT<=14 AND C_BIGINT>0 GROUP BY C_INT,C_FLOAT,C_BIGINT ORDER BY C_INT,C_BIGINT DESC;
 sum | c_float | ?column? | c_bigint 
-----+---------+----------+----------
   1 |  1.0001 |   2.0001 |       10
   1 |  1.0001 |   2.0001 |        9
   1 |  1.0001 |   2.0001 |        8
   1 |  1.0001 |   2.0001 |        7
   1 |  1.0001 |   2.0001 |        6
   1 |  1.0001 |   2.0001 |        5
   1 |  1.0001 |   2.0001 |        4
   1 |  1.0001 |   2.0001 |        3
   1 |  1.0001 |   2.0001 |        2
   1 |  1.0001 |   2.0001 |        1
   2 |  2.0001 |   4.0001 |       10
   2 |  2.0001 |   4.0001 |        9
   2 |  2.0001 |   4.0001 |        8
   2 |  2.0001 |   4.0001 |        7
   2 |  2.0001 |   4.0001 |        6
   2 |  2.0001 |   4.0001 |        5
   2 |  2.0001 |   4.0001 |        4
   2 |  2.0001 |   4.0001 |        3
   2 |  2.0001 |   4.0001 |        2
   2 |  2.0001 |   4.0001 |        1
   3 |  3.0001 |   6.0001 |       10
   3 |  3.0001 |   6.0001 |        9
   3 |  3.0001 |   6.0001 |        8
   3 |  3.0001 |   6.0001 |        7
   3 |  3.0001 |   6.0001 |        6
   3 |  3.0001 |   6.0001 |        5
   3 |  3.0001 |   6.0001 |        4
   3 |  3.0001 |   6.0001 |        3
   3 |  3.0001 |   6.0001 |        2
   3 |  3.0001 |   6.0001 |        1
   4 |  4.0001 |   8.0001 |       10
   4 |  4.0001 |   8.0001 |        9
   4 |  4.0001 |   8.0001 |        8
   4 |  4.0001 |   8.0001 |        7
   4 |  4.0001 |   8.0001 |        6
   4 |  4.0001 |   8.0001 |        5
   4 |  4.0001 |   8.0001 |        4
   4 |  4.0001 |   8.0001 |        3
   4 |  4.0001 |   8.0001 |        2
   4 |  4.0001 |   8.0001 |        1
   5 |  5.0001 |  10.0001 |       10
   5 |  5.0001 |  10.0001 |        9
   5 |  5.0001 |  10.0001 |        8
   5 |  5.0001 |  10.0001 |        7
   5 |  5.0001 |  10.0001 |        6
   5 |  5.0001 |  10.0001 |        5
   5 |  5.0001 |  10.0001 |        4
   5 |  5.0001 |  10.0001 |        3
   5 |  5.0001 |  10.0001 |        2
   5 |  5.0001 |  10.0001 |        1
   6 |  6.0001 |  12.0001 |       10
   6 |  6.0001 |  12.0001 |        9
   6 |  6.0001 |  12.0001 |        8
   6 |  6.0001 |  12.0001 |        7
   6 |  6.0001 |  12.0001 |        6
   6 |  6.0001 |  12.0001 |        5
   6 |  6.0001 |  12.0001 |        4
   6 |  6.0001 |  12.0001 |        3
   6 |  6.0001 |  12.0001 |        2
   6 |  6.0001 |  12.0001 |        1
   7 |  7.0001 |  14.0001 |       10
   7 |  7.0001 |  14.0001 |        9
   7 |  7.0001 |  14.0001 |        8
   7 |  7.0001 |  14.0001 |        7
   7 |  7.0001 |  14.0001 |        6
   7 |  7.0001 |  14.0001 |        5
   7 |  7.0001 |  14.0001 |        4
   7 |  7.0001 |  14.0001 |        3
   7 |  7.0001 |  14.0001 |        2
   7 |  7.0001 |  14.0001 |        1
   8 |  8.0001 |  16.0001 |       10
   8 |  8.0001 |  16.0001 |        9
   8 |  8.0001 |  16.0001 |        8
   8 |  8.0001 |  16.0001 |        7
   8 |  8.0001 |  16.0001 |        6
   8 |  8.0001 |  16.0001 |        5
   8 |  8.0001 |  16.0001 |        4
   8 |  8.0001 |  16.0001 |        3
   8 |  8.0001 |  16.0001 |        2
   8 |  8.0001 |  16.0001 |        1
   9 |  9.0001 |  18.0001 |       10
   9 |  9.0001 |  18.0001 |        9
   9 |  9.0001 |  18.0001 |        8
   9 |  9.0001 |  18.0001 |        7
   9 |  9.0001 |  18.0001 |        6
   9 |  9.0001 |  18.0001 |        5
   9 |  9.0001 |  18.0001 |        4
   9 |  9.0001 |  18.0001 |        3
   9 |  9.0001 |  18.0001 |        2
   9 |  9.0001 |  18.0001 |        1
  10 | 10.0001 |  20.0001 |       10
  10 | 10.0001 |  20.0001 |        9
  10 | 10.0001 |  20.0001 |        8
  10 | 10.0001 |  20.0001 |        7
  10 | 10.0001 |  20.0001 |        6
  10 | 10.0001 |  20.0001 |        5
  10 | 10.0001 |  20.0001 |        4
  10 | 10.0001 |  20.0001 |        3
  10 | 10.0001 |  20.0001 |        2
  10 | 10.0001 |  20.0001 |        1
  11 | 11.0001 |  22.0001 |       10
  11 | 11.0001 |  22.0001 |        9
  11 | 11.0001 |  22.0001 |        8
  11 | 11.0001 |  22.0001 |        7
  11 | 11.0001 |  22.0001 |        6
  11 | 11.0001 |  22.0001 |        5
  11 | 11.0001 |  22.0001 |        4
  11 | 11.0001 |  22.0001 |        3
  11 | 11.0001 |  22.0001 |        2
  11 | 11.0001 |  22.0001 |        1
  12 | 12.0001 |  24.0001 |       10
  12 | 12.0001 |  24.0001 |        9
  12 | 12.0001 |  24.0001 |        8
  12 | 12.0001 |  24.0001 |        7
  12 | 12.0001 |  24.0001 |        6
  12 | 12.0001 |  24.0001 |        5
  12 | 12.0001 |  24.0001 |        4
  12 | 12.0001 |  24.0001 |        3
  12 | 12.0001 |  24.0001 |        2
  12 | 12.0001 |  24.0001 |        1
  13 | 13.0001 |  26.0001 |       10
  13 | 13.0001 |  26.0001 |        9
  13 | 13.0001 |  26.0001 |        8
  13 | 13.0001 |  26.0001 |        7
  13 | 13.0001 |  26.0001 |        6
  13 | 13.0001 |  26.0001 |        5
  13 | 13.0001 |  26.0001 |        4
  13 | 13.0001 |  26.0001 |        3
  13 | 13.0001 |  26.0001 |        2
  13 | 13.0001 |  26.0001 |        1
  14 | 14.0001 |  28.0001 |       10
  14 | 14.0001 |  28.0001 |        9
  14 | 14.0001 |  28.0001 |        8
  14 | 14.0001 |  28.0001 |        7
  14 | 14.0001 |  28.0001 |        6
  14 | 14.0001 |  28.0001 |        5
  14 | 14.0001 |  28.0001 |        4
  14 | 14.0001 |  28.0001 |        3
  14 | 14.0001 |  28.0001 |        2
  14 | 14.0001 |  28.0001 |        1
(140 rows)

RESET CURRENT_SCHEMA;
DROP SCHEMA GROUP_SORT CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table group_sort.table_group_b5000_000
drop cascades to function group_sort.func_insert_tbl_group_b5000_000()
-- test  distinct+orderby allows expressions and implicit columns
-- 1. A database should not support
create table dob_student(
    name varchar(100),
    pinyin varchar(100),
    id int,
    age int
);
insert into dob_student values('小明', 'xiaoming', 1, 10);
insert into dob_student values('小明', 'xiaoming', 11, 33);
select distinct name from dob_student order by name, id;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: select distinct name from dob_student order by name, id;
                                                             ^
select distinct name from dob_student order by nlssort(name, 'NLS_SORT=SCHINESE_PINYIN_M') asc;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: select distinct name from dob_student order by nlssort(name,...
                                                       ^
drop table dob_student;
-- test on B database
create database dob_bdb with dbcompatibility 'b';
\c dob_bdb
create table dob_student(
    name varchar(100),
    pinyin varchar(100),
    id int,
    age int
);
insert into dob_student values('小明', 'xiaoming', 1, 10);
insert into dob_student values('小明', 'xiaoming', 11, 33);
insert into dob_student values('张三', 'zhangsan', 3, 10);
insert into dob_student values('张三', 'zhangsan', 3, 10);
insert into dob_student values('小红', 'xiaohong', 2, 12);
insert into dob_student values('小红', 'xiaohong', 2, 12);
insert into dob_student values('张三', 'xiaohong', 2, 12);
select distinct name from dob_student order by name;
 name 
------
 小明
 小红
 张三
(3 rows)

-- 2. test expresions on B database on default settings
select distinct name from dob_student order by nlssort(name, 'NLS_SORT=SCHINESE_PINYIN_M') asc;
 name 
------
 小红
 小明
 张三
(3 rows)

select distinct name from dob_student order by convert_to(name, 'GBK') desc;
 name 
------
 张三
 小明
 小红
(3 rows)

select name from (select distinct name from dob_student) order by nlssort(name, 'NLS_SORT=SCHINESE_PINYIN_M') asc;
 name 
------
 小红
 小明
 张三
(3 rows)

-- 3. implicit column should error on default settings
select distinct name from dob_student order by convert_to(name, 'GBK'), id asc;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...e from dob_student order by convert_to(name, 'GBK'), id asc;
                                                                ^
select distinct name from dob_student order by id desc, age;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: select distinct name from dob_student order by id desc, age;
                                                       ^
select distinct t.name, t.pinyin as py, 1 + 10 as c from dob_student t order by py, t.id, t.age * 2 + 1;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...s py, 1 + 10 as c from dob_student t order by py, t.id, t.ag...
                                                             ^
select distinct t.name, t.pinyin as py, 1 + 10 as c from dob_student t order by c, py, t.age * 2 + 1;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...y, 1 + 10 as c from dob_student t order by c, py, t.age * 2 ...
                                                             ^
-- test on set behavior_compat_options='allow_orderby_undistinct_column'
set behavior_compat_options='allow_orderby_undistinct_column';
-- 4. test implicit columns
select distinct name from dob_student order by convert_to(name, 'GBK'), id asc;
 name 
------
 小红
 小明
 张三
(3 rows)

select distinct name from dob_student order by id desc, age;
 name 
------
 小明
 张三
 小红
(3 rows)

-- 5. test nesting
select name from (select distinct name from dob_student order by id desc, age) order by nlssort(name, 'NLS_SORT=SCHINESE_PINYIN_M') asc;
 name 
------
 小红
 小明
 张三
(3 rows)

-- 6. test with functions, when case
create table dob_func_t(a int, b int, c int, d int);
insert into dob_func_t values(generate_series(1, 10), generate_series(1, 10), generate_series(1, 10),  generate_series(1, 10));
insert into dob_func_t values(generate_series(1, 10), generate_series(1, 10), generate_series(1, 10),  generate_series(1, 10));
select distinct a, b, c from dob_func_t where a > 1 order by random() * 10 + a, d;
 a  | b  | c  
----+----+----
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
(9 rows)

select distinct a, b, c from dob_func_t order by case when a = 10 then 1 else 100 end,  d asc, c desc;
 a  | b  | c  
----+----+----
 10 | 10 | 10
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  6
  7 |  7 |  7
  8 |  8 |  8
  9 |  9 |  9
(10 rows)

-- 7. test with group by
select distinct a, b, c from dob_func_t group by a, b, c order by d, c; -- should error
ERROR:  column "dob_func_t.d" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: ...inct a, b, c from dob_func_t group by a, b, c order by d, c;
                                                                  ^
select distinct a, b, c from dob_func_t group by a, b, c order by c;
 a  | b  | c  
----+----+----
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  6
  7 |  7 |  7
  8 |  8 |  8
  9 |  9 |  9
 10 | 10 | 10
(10 rows)

-- 8. test alias
create table dob_alias(a int, b int, c varchar(30), d varchar(30));
insert into dob_alias values(generate_series(1, 10), generate_series(1, 10), 'hello', 'world');
insert into dob_alias values(generate_series(1, 10), generate_series(1, 10), 'hello', 'world');
select distinct a, b + 10 as balias, c from dob_alias order by a, balias, concat(c, ' concat');
 a  | balias |   c   
----+--------+-------
  1 |     11 | hello
  2 |     12 | hello
  3 |     13 | hello
  4 |     14 | hello
  5 |     15 | hello
  6 |     16 | hello
  7 |     17 | hello
  8 |     18 | hello
  9 |     19 | hello
 10 |     20 | hello
(10 rows)

select distinct a, b, c, a + 1.1 * 10 as k from dob_alias order by k;
 a  | b  |   c   |  k   
----+----+-------+------
  1 |  1 | hello | 12.0
  2 |  2 | hello | 13.0
  3 |  3 | hello | 14.0
  4 |  4 | hello | 15.0
  5 |  5 | hello | 16.0
  6 |  6 | hello | 17.0
  7 |  7 | hello | 18.0
  8 |  8 | hello | 19.0
  9 |  9 | hello | 20.0
 10 | 10 | hello | 21.0
(10 rows)

select distinct a, b, 1 + 10 as c from dob_alias order by c, c * 2 + 1, b;
 a  | b  | c  
----+----+----
  1 |  1 | 11
  2 |  2 | 11
  3 |  3 | 11
  4 |  4 | 11
  5 |  5 | 11
  6 |  6 | 11
  7 |  7 | 11
  8 |  8 | 11
  9 |  9 | 11
 10 | 10 | 11
(10 rows)

select distinct t.a, t.b, 1 + 10 as c from dob_alias t order by c * 2 + 1, t.b, t.d;
 a  | b  | c  
----+----+----
  1 |  1 | 11
  2 |  2 | 11
  3 |  3 | 11
  4 |  4 | 11
  5 |  5 | 11
  6 |  6 | 11
  7 |  7 | 11
  8 |  8 | 11
  9 |  9 | 11
 10 | 10 | 11
(10 rows)

-- 9. test with join clause
select distinct s.name, s.id, a.a, a.b, a.c from dob_student s 
	left join dob_alias a 
	on s.id=a.a 
	order by nlssort(name, 'NLS_SORT=SCHINESE_PINYIN_M'), s.age desc, a.d asc;
 name | id | a | b |   c   
------+----+---+---+-------
 小红 |  2 | 2 | 2 | hello
 小明 | 11 |   |   | 
 小明 |  1 | 1 | 1 | hello
 张三 |  2 | 2 | 2 | hello
 张三 |  3 | 3 | 3 | hello
(5 rows)

select distinct * from 
	(select distinct s.name, s.id, a.a, a.b, a.c from dob_student s 
		inner join dob_alias a 
		on s.id=a.a 
		order by s.age desc, a.d asc) t
	order by nlssort(t.name, 'NLS_SORT=SCHINESE_PINYIN_M');
 name | id | a | b |   c   
------+----+---+---+-------
 小红 |  2 | 2 | 2 | hello
 小明 |  1 | 1 | 1 | hello
 张三 |  3 | 3 | 3 | hello
 张三 |  2 | 2 | 2 | hello
(4 rows)

-- 10. test group_concat
insert into dob_func_t values(generate_series(1, 10), generate_series(1, 10), generate_series(21, 30),  generate_series(2, 30));
set group_concat_max_len to 1024;
select a, min(b), group_concat(distinct c order by d) as order_not_in_distinct from dob_func_t group by a order by a;
 a  | min | order_not_in_distinct 
----+-----+-----------------------
  1 |   1 | 1,21
  2 |   2 | 2,22
  3 |   3 | 3,23
  4 |   4 | 4,24
  5 |   5 | 5,25
  6 |   6 | 6,26
  7 |   7 | 7,27
  8 |   8 | 8,28
  9 |   9 | 9,29
 10 |  10 | 10,30
(10 rows)

reset behavior_compat_options;
-- 11. test group_concat should error
select a, min(b), group_concat(distinct c order by d) as order_not_in_distinct from dob_func_t group by a order by a;
ERROR:  in an aggregate with DISTINCT, ORDER BY expressions must appear in argument list
LINE 1: ...elect a, min(b), group_concat(distinct c order by d) as orde...
                                                             ^
CONTEXT:  referenced column: order_not_in_distinct
reset group_concat_max_len;
-- 12. test alias default
create table dob_alias_only(
	c1 int,
	c2 int
);
insert into dob_alias_only values(1, 2);
insert into dob_alias_only values(2, 1);
insert into dob_alias_only values(2, 1);
reset behavior_compat_options;
select distinct c1 as a1 from dob_alias_only order by c1;
 a1 
----
  1
  2
(2 rows)

select distinct c1 as c2, c2 as c1 from dob_alias_only order by c1;
 c2 | c1 
----+----
  2 |  1
  1 |  2
(2 rows)

select distinct c1 as c2, c2 as c1 from dob_alias_only order by c2;
 c2 | c1 
----+----
  1 |  2
  2 |  1
(2 rows)

select distinct c1 + 1 as a1, c2 + 2 as a2 from dob_alias_only order by c1; -- should error
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ... c1 + 1 as a1, c2 + 2 as a2 from dob_alias_only order by c1;
                                                                    ^
\c postgres
drop database dob_bdb;
