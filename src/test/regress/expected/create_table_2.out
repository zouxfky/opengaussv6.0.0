-- b compatibility case
drop database if exists b;
NOTICE:  database "b" does not exist, skipping
create database b dbcompatibility 'b';
\c b
-- test primary key in M mode
-- test [index_type]
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using btree(f11, f12));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) | not null  | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11, f12) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using hash(f11, f12));
ERROR:  access method "hash" does not support unique indexes
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using hash(f11, f12)) with (orientation = column);
ERROR:  access method "hash" does not support column store
-- test [CONSTRAINT [constraint_name]]
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key(f11));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) |           | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
create table test_primary(f11 int, f12 varchar(20), f13 bool, primary key(f11));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_primary_pkey" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) |           | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "test_primary_pkey" PRIMARY KEY, btree (f11) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint primary key(f11));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_primary_pkey" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) |           | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "test_primary_pkey" PRIMARY KEY, btree (f11) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
-- test [ASC|DESC]
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using btree(f11 desc, f12 asc));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) | not null  | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11 DESC, f12) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
-- test expression, error
create table test_primary(f11 int, f12 varchar(20), f13 bool, primary key ((abs(f11))));
ERROR:  primary keys cannot be expressions
create table test_primary(f11 int, f12 varchar(20), f13 bool, primary key ((f11 * 2 + 1)));
ERROR:  primary keys cannot be expressions
-- test foreign key in M mode
-- test [CONSTRAINT [constraint_name]] and [index_name]
create table test_primary(f11 int, f12 varchar(20), f13 bool, primary key (f11));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_primary_pkey" for table "test_primary"
create table test_foreign(f21 int, f22 timestamp, constraint con_t_foreign foreign key f_t_foreign (f21) references test_primary(f11));
\d+ test_foreign
                               Table "public.test_foreign"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 f21    | integer                     |           | plain   |              | 
 f22    | timestamp without time zone |           | plain   |              | 
Foreign-key constraints:
    "con_t_foreign" FOREIGN KEY (f21) REFERENCES test_primary(f11)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_foreign;
create table test_foreign(f21 int, f22 timestamp, constraint con_t_foreign foreign key (f21) references test_primary(f11));
\d+ test_foreign
                               Table "public.test_foreign"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 f21    | integer                     |           | plain   |              | 
 f22    | timestamp without time zone |           | plain   |              | 
Foreign-key constraints:
    "con_t_foreign" FOREIGN KEY (f21) REFERENCES test_primary(f11)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_foreign;
create table test_foreign(f21 int, f22 timestamp, constraint foreign key f_t_foreign (f21) references test_primary(f11));
\d+ test_foreign
                               Table "public.test_foreign"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 f21    | integer                     |           | plain   |              | 
 f22    | timestamp without time zone |           | plain   |              | 
Foreign-key constraints:
    "f_t_foreign" FOREIGN KEY (f21) REFERENCES test_primary(f11)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_foreign;
create table test_foreign(f21 int, f22 timestamp, foreign key f_t_foreign (f21) references test_primary(f11));
\d+ test_foreign
                               Table "public.test_foreign"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 f21    | integer                     |           | plain   |              | 
 f22    | timestamp without time zone |           | plain   |              | 
Foreign-key constraints:
    "f_t_foreign" FOREIGN KEY (f21) REFERENCES test_primary(f11)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_foreign;
create table test_foreign(f21 int, f22 timestamp, foreign key (f21) references test_primary(f11));
\d+ test_foreign
                               Table "public.test_foreign"
 Column |            Type             | Modifiers | Storage | Stats target | Description 
--------+-----------------------------+-----------+---------+--------------+-------------
 f21    | integer                     |           | plain   |              | 
 f22    | timestamp without time zone |           | plain   |              | 
Foreign-key constraints:
    "test_foreign_f21_fkey" FOREIGN KEY (f21) REFERENCES test_primary(f11)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_foreign;
drop table test_primary;
-- test unique key in M mode
-- test [index_type]
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique using btree(f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique using hash(f31, f32));
ERROR:  access method "hash" does not support unique indexes
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique using hash(f31, f32)) with (orientation = column);
ERROR:  access method "hash" does not support column store
-- test [CONSTRAINT [constraint_name]] and [index_name]
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique u_t_unique(f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "u_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), unique u_t_unique(f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "u_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique (f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), constraint unique (f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_unique_f31_f32_key" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "test_unique_f31_f32_key" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), unique (f31, f32));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_unique_f31_f32_key" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "test_unique_f31_f32_key" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
-- test [ASC|DESC]
create table test_unique(f31 int, f32 varchar(20), unique (f31 desc, f32 asc));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_unique_f31_f32_key" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "test_unique_f31_f32_key" UNIQUE CONSTRAINT, btree (f31 DESC, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
-- test expression
create table test_unique(f31 int, f32 varchar(20), unique ((abs(f31)) desc, (lower(f32)) asc));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_unique_abs_lower_key" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "test_unique_abs_lower_key" UNIQUE CONSTRAINT, btree (abs(f31) DESC, lower(f32::text)) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), unique ((f31 * 2 + 1) desc, (lower(f32)) asc));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_unique_expr_lower_key" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "test_unique_expr_lower_key" UNIQUE CONSTRAINT, btree ((f31 * 2 + 1) DESC, lower(f32::text)) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
-- test unreserved_keyword index and key
-- error
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique key using btree(f31));
ERROR:  index/key cannot be used as unique name.
LINE 1: ...f31 int, f32 varchar(20), constraint con_t_unique unique key...
                                                             ^
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique index using btree(f31));
ERROR:  index/key cannot be used as unique name.
LINE 1: ...f31 int, f32 varchar(20), constraint con_t_unique unique ind...
                                                             ^
-- partition table
-- test primary key in M mode
-- test [index_type]
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key using btree(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_p_primary"
\d+ test_p_primary
                    Table "public.test_p_primary"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer | not null  | plain   |              | 
 f2     | integer | not null  | plain   |              | 
 f3     | integer | not null  | plain   |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_primary;
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key using hash(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  access method "hash" does not support unique indexes
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key using hash(f1, f2, f3)
)
with (orientation = column)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  access method "hash" does not support column store
-- test [CONSTRAINT [constraint_name]]
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_p_primary"
\d+ test_p_primary
                    Table "public.test_p_primary"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer | not null  | plain   |              | 
 f2     | integer | not null  | plain   |              | 
 f3     | integer | not null  | plain   |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_primary;
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    primary key(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_p_primary_pkey" for table "test_p_primary"
\d+ test_p_primary
                    Table "public.test_p_primary"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer | not null  | plain   |              | 
 f2     | integer | not null  | plain   |              | 
 f3     | integer | not null  | plain   |              | 
Indexes:
    "test_p_primary_pkey" PRIMARY KEY, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_primary;
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint primary key(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_p_primary_pkey" for table "test_p_primary"
\d+ test_p_primary
                    Table "public.test_p_primary"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer | not null  | plain   |              | 
 f2     | integer | not null  | plain   |              | 
 f3     | integer | not null  | plain   |              | 
Indexes:
    "test_p_primary_pkey" PRIMARY KEY, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_primary;
-- test [ASC|DESC]
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key using btree(f1 desc, f2 asc, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_p_primary"
\d+ test_p_primary
                    Table "public.test_p_primary"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer | not null  | plain   |              | 
 f2     | integer | not null  | plain   |              | 
 f3     | integer | not null  | plain   |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f1 DESC, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_primary;
-- test expression, error
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key using btree((abs(f1)) desc, (f2 * 2 + 1) asc, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  partition table does not support expression index
-- test foreign key in M mode
-- test [CONSTRAINT [constraint_name]] and [index_name]
CREATE TABLE test_p_primary
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_pri primary key(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_p_primary"
CREATE TABLE test_p_foreign
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_foreign foreign key f_t_foreign(f1) references test_p_primary(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
\d+ test_p_foreign
                    Table "public.test_p_foreign"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Foreign-key constraints:
    "con_t_foreign" FOREIGN KEY (f1) REFERENCES test_p_primary(f1)
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_foreign;
CREATE TABLE test_p_foreign
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_foreign foreign key(f1) references test_p_primary(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
\d+ test_p_foreign
                    Table "public.test_p_foreign"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Foreign-key constraints:
    "con_t_foreign" FOREIGN KEY (f1) REFERENCES test_p_primary(f1)
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_foreign;
CREATE TABLE test_p_foreign
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint foreign key f_t_foreign(f1) references test_p_primary(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
\d+ test_p_foreign
                    Table "public.test_p_foreign"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Foreign-key constraints:
    "f_t_foreign" FOREIGN KEY (f1) REFERENCES test_p_primary(f1)
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_foreign;
CREATE TABLE test_p_foreign
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    foreign key f_t_foreign(f1) references test_p_primary(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
\d+ test_p_foreign
                    Table "public.test_p_foreign"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Foreign-key constraints:
    "f_t_foreign" FOREIGN KEY (f1) REFERENCES test_p_primary(f1)
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_foreign;
CREATE TABLE test_p_foreign
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    foreign key(f1) references test_p_primary(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
\d+ test_p_foreign
                    Table "public.test_p_foreign"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Foreign-key constraints:
    "test_p_foreign_f1_fkey" FOREIGN KEY (f1) REFERENCES test_p_primary(f1)
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_foreign;
drop table test_p_primary;
-- test unique key in M mode
-- test [index_type]
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique using btree(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
-- error
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique using hash(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  access method "hash" does not support unique indexes
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique using hash(f1, f2, f3)
)
with (orientation = column)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  access method "hash" does not support column store
-- test [CONSTRAINT [constraint_name]] and [index_name]
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique u_t_unique(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_t_unique" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "u_t_unique" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    unique u_t_unique(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_t_unique" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "u_t_unique" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint unique(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_p_unique_f1_f2_f3_key" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "test_p_unique_f1_f2_f3_key" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    unique(f1, f2, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_p_unique_f1_f2_f3_key" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "test_p_unique_f1_f2_f3_key" UNIQUE CONSTRAINT, btree (f1, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
-- test [ASC|DESC]
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    unique(f1 desc, f2 asc, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_p_unique_f1_f2_f3_key" for table "test_p_unique"
\d+ test_p_unique
                    Table "public.test_p_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
Indexes:
    "test_p_unique_f1_f2_f3_key" UNIQUE CONSTRAINT, btree (f1 DESC, f2, f3) LOCAL TABLESPACE pg_default
Partition By RANGE(f1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

drop table test_p_unique;
-- test expression
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    unique((abs(f1)) desc, (f2 * 2 + 1) asc, f3)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  partition table does not support expression index
\d+ test_p_unique
drop table test_p_unique;
ERROR:  table "test_p_unique" does not exist
-- test unreserved_keyword index and key
-- error
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique key using btree(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  index/key cannot be used as unique name.
LINE 6:     constraint con_t_unique unique key using btree(f1)
                                    ^
CREATE TABLE test_p_unique
(
    f1  INTEGER,
    f2  INTEGER,
    f3  INTEGER,
    constraint con_t_unique unique index using btree(f1)
)
PARTITION BY RANGE(f1)
(
        PARTITION P1 VALUES LESS THAN(2450815),
        PARTITION P2 VALUES LESS THAN(2451179),
        PARTITION P3 VALUES LESS THAN(2451544),
        PARTITION P4 VALUES LESS THAN(MAXVALUE)
);
ERROR:  index/key cannot be used as unique name.
LINE 6:     constraint con_t_unique unique index using btree(f1)
                                    ^
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique using btree(f31, f32) comment 'unique index' using btree);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique (f31, f32) comment 'unique index' using btree);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_unique(f31 int, f32 varchar(20), constraint con_t_unique unique (f31, f32) comment 'unique index' using btree using btree);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "con_t_unique" for table "test_unique"
\d+ test_unique
                             Table "public.test_unique"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f31    | integer               |           | plain    |              | 
 f32    | character varying(20) |           | extended |              | 
Indexes:
    "con_t_unique" UNIQUE CONSTRAINT, btree (f31, f32) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using btree(f11 desc, f12 asc) comment 'primary key' using btree);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) | not null  | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11 DESC, f12) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key (f11 desc, f12 asc) comment 'primary key' using btree);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) | not null  | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11 DESC, f12) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
create table test_primary(f11 int, f12 varchar(20), f13 bool, constraint con_t_pri primary key using btree(f11 desc, f12 asc) comment 'primary key' using btree using btree);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "con_t_pri" for table "test_primary"
\d+ test_primary
                            Table "public.test_primary"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 f11    | integer               | not null  | plain    |              | 
 f12    | character varying(20) | not null  | extended |              | 
 f13    | boolean               |           | plain    |              | 
Indexes:
    "con_t_pri" PRIMARY KEY, btree (f11 DESC, f12) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_primary;
