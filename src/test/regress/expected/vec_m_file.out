set work_mem='4MB';
drop table if exists bmsql_oorder;
NOTICE:  table "bmsql_oorder" does not exist, skipping
drop table if exists bmsql_order_line;
NOTICE:  table "bmsql_order_line" does not exist, skipping
drop table if exists bmsql_district;
NOTICE:  table "bmsql_district" does not exist, skipping
drop table if exists bmsql_customer;
NOTICE:  table "bmsql_customer" does not exist, skipping
drop table if exists bmsql_item;
NOTICE:  table "bmsql_item" does not exist, skipping
CREATE TABLE bmsql_order_line (
ol_w_id int NOT NULL,
ol_d_id int NOT NULL,
ol_o_id int NOT NULL,
ol_number int NOT NULL,
ol_i_id int NOT NULL,
ol_delivery_d timestamp(6),
ol_amount numeric(6,2),
ol_supply_w_id int,ol_quantity int,
ol_dist_info char(24)
);
insert into bmsql_order_line values('1','1','1','1','1',to_timestamp('2010-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss'),'0.01','1','1','sqltest_bpchar_1') ;
insert into bmsql_order_line values('2','2','2','2','2',to_timestamp('2010-01-02 00:00:00','yyyy-mm-dd hh24:mi:ss'),'0.02','2','2','sqltest_bpchar_2') ;
insert into bmsql_order_line values('3','3','3','3','3',to_timestamp('2010-01-03 00:00:00','yyyy-mm-dd hh24:mi:ss'),'0.03','3','3','sqltest_bpchar_3') ;
insert into bmsql_order_line values('4','4','4','4','4',to_timestamp('2010-01-04 00:00:00','yyyy-mm-dd hh24:mi:ss'),'0.04','4','4','sqltest_bpchar_4') ;
insert into bmsql_order_line(ol_w_id,ol_d_id,ol_o_id,ol_number,ol_i_id) values('5','5','5','5','5');
CREATE TABLE bmsql_district (
d_w_id int NOT NULL,d_id int NOT NULL,d_ytd numeric( 12,2),d_tax numeric(4,4),d_next_o_id int,d_name varchar( 10),d_street_1 varchar( 20) ,d_street_2 varchar( 20) ,d_city varchar( 20),
d_state char(2),d_zip char(9)
);
insert into bmsql_district values('1','1','0.01','0.0001','1','sqltest_va','sqltest_varchar_1','sqltest_varchar_1','sqltest_varchar_1','sq','sqltest_b') ;
insert into bmsql_district values('2','2','0.02','0.0002','2','sqltest_va','sqltest_varchar_2','sqltest_varchar_2','sqltest_varchar_2','sq','sqltest_b') ;
insert into bmsql_district values('3','3','0.03','0.0003','3','sqltest_va','sqltest_varchar_3','sqltest_varchar_3','sqltest_varchar_3','sq','sqltest_b') ;
insert into bmsql_district values('4','4','0.04','0.0004','4','sqltest_va','sqltest_varchar_4','sqltest_varchar_4','sqltest_varchar_4','sq','sqltest_b') ;
insert into bmsql_district(d_w_id,d_id) values('5','5');
CREATE TABLE bmsql_oorder (
o_w_id int NOT NULL,
o_d_id int NOT NULL,o_id int NOT NULL,o_c_id int,
o_carrier_id int,o_ol_cnt int,o_ali_local int,
o_entry_d timestamp(6)
);
insert into bmsql_oorder values('1','1','1','1','1','1','1',to_timestamp('2010-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')) ;
insert into bmsql_oorder values('2','2','2','2','2','2','2',to_timestamp('2010-01-02 00:00:00','yyyy-mm-dd hh24:mi:ss')) ;
insert into bmsql_oorder values('3','3','3','3','3','3','3',to_timestamp('2010-01-03 00:00:00','yyyy-mm-dd hh24:mi:ss')) ;
insert into bmsql_oorder values('4','4','4','4','4','4','4',to_timestamp('2010-01-04 00:00:00','yyyy-mm-dd hh24:mi:ss')) ;
insert into bmsql_oorder(o_w_id,o_d_id,o_id) values('5','5','5') ;
CREATE TABLE bmsql_customer (
c_w_id int NOT NULL,
c_d_id int NOT NULL,
c_id int NOT NULL,
c_discount numeric(4,4),
c_credit char(2),
c_last varchar(16),
c_first varchar( 16),
c_credit_lim numeric( 12,2),
c_balance numeric(12,2),
c_ytd_payment numeric(12,2),
c_payment_cnt int,
c_delivery_cnt int,
c_street_1 varchar( 20),
c_street_2 varchar( 20),
c_city varchar(20),
c_state char(2),
c_zip char(9),
c_phone char(16),
c_since timestamp(6),
lc_middle char(2),
c_data varchar(500)
);
CREATE INDEX bmsql_customer_idx1 ON bmsql_customer (c_w_id,c_d_id,c_last,c_first);
insert into bmsql_customer values('1','1','1','0.0001','sq','sqltest_varchar_','sqltest_varchar_','0.01','0.01','0.01','1','1','sqltest_varchar_1','sqltest_varchar_1','sqltest_varchar_1','sq','sqltest_b','sqltest_bpchar_1',to_timestamp('2010-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss'),'sq','sqltest_varchar_1');
insert into bmsql_customer values('2','2','2','0.0002','sq','sqltest_varchar_','sqltest_varchar_','0.02','0.02','0.02','2','2','sqltest_varchar_2','sqltest_varchar_2','sqltest_varchar_2','sq','sqltest_b','sqltest_bpchar_2',to_timestamp('2010-01-02 00:00:00','yyyy-mm-dd hh24:mi:ss'),'sq','sqltest_varchar_2');
insert into bmsql_customer values('3','3','3','0.0003','sq','sqltest_varchar_','sqltest_varchar_','0.03','0.03','0.03','3','3','sqltest_varchar_3','sqltest_varchar_3','sqltest_varchar_3','sq','sqltest_b','sqltest_bpchar_3',to_timestamp('2010-01-03 00:00:00','yyyy-mm-dd hh24:mi:ss'),'sq','sqltest_varchar_3');
insert into bmsql_customer values('4','4','4','0.0004','sq','sqltest_varchar_','sqltest_varchar_','0.04','0.04','0.04','4','4','sqltest_varchar_4','sqltest_varchar_4','sqltest_varchar_4','sq','sqltest_b','sqltest_bpchar_4',to_timestamp('2010-01-04 00:00:00','yyyy-mm-dd hh24:mi:ss'),'sq','sqltest_varchar_4');
insert into bmsql_customer(c_w_id,c_d_id,c_id) values('5','5','5');
CREATE TABLE bmsql_item (
i_id int NoT NULL,
i_name varchar(24),
i_price numeric(5,2),
i_data varchar( 50),
i_im_id int
);
insert into bmsql_item values ('1','sqltest_varchar_1','0.01','sqltest_varchar_1','1') ;
insert into bmsql_item values ('2','sqltest_varchar_2','0.02','sqltest_varchar_2','2') ;
insert into bmsql_item values ('3','sqltest_varchar_3','0.03','sqltest_varchar_3','3') ;
insert into bmsql_item values ('4','sqltest_varchar_4','0.04','sqltest_varchar_4','4') ;
insert into bmsql_item(i_id) values ('5');
set try_vector_engine_strategy=force;
select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);
 count 
-------
     1
(1 row)

explain(costs off, verbose) select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);


 Row Adapter
   Output: (count(*))
   ->  Vector Aggregate
         Output: count(*)
         ->  Vector Adapter(type: BATCH MODE)
               Output: bmsql_oorder.o_w_id, bmsql_oorder.o_d_id, bmsql_oorder.o_id, bmsql_oorder.o_c_id, bmsql_oorder.o_carrier_id, bmsql_oorder.o_ol_cnt, bmsql_oorder.o_ali_local, bmsql_oorder.o_entry_d
               Filter: (bmsql_oorder.o_d_id > (SubPlan 1))
               ->  Seq Scan on public.bmsql_oorder
                     Output: bmsql_oorder.o_w_id, bmsql_oorder.o_d_id, bmsql_oorder.o_id, bmsql_oorder.o_c_id, bmsql_oorder.o_carrier_id, bmsql_oorder.o_ol_cnt, bmsql_oorder.o_ali_local, bmsql_oorder.o_entry_d
                     SubPlan 1
                       ->  Row Adapter
                             Output: public.bmsql_customer.c_w_id, (0)
                             ->  Vector Limit
                                   Output: public.bmsql_customer.c_w_id, (0)
                                   ->  Vector Sort
                                         Output: public.bmsql_customer.c_w_id, (0)
                                         Sort Key: public.bmsql_customer.c_w_id
                                         ->  Vector HashSetOp Except
                                               Output: public.bmsql_customer.c_w_id, (0)
                                               ->  Vector Append
                                                     ->  Vector Result
                                                           Output: public.bmsql_customer.c_w_id, 0
                                                           ->  Vector Sonic Hash Aggregate
                                                                 Output: public.bmsql_customer.c_w_id
                                                                 Group By Key: public.bmsql_customer.c_w_id
                                                                 ->  Vector Append
                                                                       ->  Vector Result
                                                                             Output: public.bmsql_customer.c_w_id
                                                                             One-Time Filter: (bmsql_oorder.o_w_id >= 3)
                                                                             ->  Vector Adapter(type: BATCH MODE)
                                                                                   Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                                                   ->  Seq Scan on public.bmsql_customer
                                                                                         Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                                       ->  Vector Subquery Scan on "*SELECT* 2"
                                                                             Output: "*SELECT* 2"."?column?"
                                                                             ->  Vector Sort Aggregate
                                                                                   Output: 1, "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                   Group By Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                   Group By Key: "*SELECT* 1".c_balance, tb2.c5
                                                                                   Group By Key: "*SELECT* 1".c_balance
                                                                                   Group By Key: "*SELECT* 1".c_balance
                                                                                   ->  Vector Sort
                                                                                         Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                         Sort Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                         ->  Vector Nest Loop
                                                                                               Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                               ->  Vector Sonic Hash Aggregate
                                                                                                     Output: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                                     Group By Key: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                                     ->  Vector Append
                                                                                                           ->  Vector Subquery Scan on "*SELECT* 1"
                                                                                                                 Output: "*SELECT* 1".c_w_id, "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                                                 ->  Vector Nest Loop
                                                                                                                       Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                                       Join Filter: (public.bmsql_customer.c_w_id <> bmsql_district.d_id)
                                                                                                                       ->  Vector Adapter(type: BATCH MODE)
                                                                                                                             Output: bmsql_district.d_w_id, bmsql_district.d_id, bmsql_district.d_ytd, bmsql_district.d_tax, bmsql_district.d_next_o_id, bmsql_district.d_name, bmsql_district.d_street_1, bmsql_district.d_street_2, bmsql_district.d_city, bmsql_district.d_state, bmsql_district.d_zip
                                                                                                                             ->  Seq Scan on public.bmsql_district
                                                                                                                                   Output: bmsql_district.d_w_id, bmsql_district.d_id, bmsql_district.d_ytd, bmsql_district.d_tax, bmsql_district.d_next_o_id, bmsql_district.d_name, bmsql_district.d_street_1, bmsql_district.d_street_2, bmsql_district.d_city, bmsql_district.d_state, bmsql_district.d_zip
                                                                                                                       ->  Vector Materialize
                                                                                                                             Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                                             ->  Vector Adapter(type: BATCH MODE)
                                                                                                                                   Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                                                   ->  Seq Scan on public.bmsql_customer
                                                                                                                                         Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                           ->  Vector Sonic Hash Aggregate
                                                                                                                 Output: count(*), bmsql_item.i_price, bmsql_item.i_name
                                                                                                                 Group By Key: bmsql_item.i_price, bmsql_item.i_name
                                                                                                                 ->  Vector Adapter(type: BATCH MODE)
                                                                                                                       Output: bmsql_item.i_price, bmsql_item.i_name
                                                                                                                       ->  Seq Scan on public.bmsql_item
                                                                                                                             Output: bmsql_item.i_price, bmsql_item.i_name
                                                                                               ->  Vector Materialize
                                                                                                     Output: tb2.c5
                                                                                                     ->  Vector Subquery Scan on tb2
                                                                                                           Output: tb2.c5
                                                                                                           ->  Vector Subquery Scan on tmp
                                                                                                                 Output: tmp.count, tmp.c5
                                                                                                                 ->  Vector Sonic Hash Aggregate
                                                                                                                       Output: count(*), '123'::text, ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                       Group By Key: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                       ->  Vector Sonic Hash Aggregate
                                                                                                                             Output: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                             Group By Key: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                             ->  Vector Adapter(type: BATCH MODE)
                                                                                                                                   Output: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                                   Filter: (bmsql_order_line.ol_d_id >= 3)
                                                                                                                                   ->  Seq Scan on public.bmsql_order_line
                                                                                                                                         Output: '2010-01-03'::text, bmsql_order_line.ol_d_id
                                                     ->  Vector Subquery Scan on "*SELECT* 3"
                                                           Output: "*SELECT* 3".c_w_id, 1
                                                           ->  Vector Sonic Hash Aggregate
                                                                 Output: public.bmsql_customer.c_w_id
                                                                 Group By Key: public.bmsql_customer.c_w_id
                                                                 ->  Vector Result
                                                                       Output: public.bmsql_customer.c_w_id
                                                                       One-Time Filter: (((log(((bmsql_oorder.o_carrier_id)::numeric + 5.5), ((bmsql_oorder.o_carrier_id + 6))::numeric))::text <> (bmsql_oorder.o_entry_d)::text) OR (bmsql_oorder.o_ol_cnt <= 3))
                                                                       ->  Vector Adapter(type: BATCH MODE)
                                                                             Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                                             ->  Seq Scan on public.bmsql_customer
                                                                                   Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
(101 rows)

set try_vector_engine_strategy=off;
select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);
 count 
-------
     1
(1 row)

explain(costs off, verbose) select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);


 Aggregate
   Output: count(*)
   ->  Seq Scan on public.bmsql_oorder
         Output: bmsql_oorder.o_w_id, bmsql_oorder.o_d_id, bmsql_oorder.o_id, bmsql_oorder.o_c_id, bmsql_oorder.o_carrier_id, bmsql_oorder.o_ol_cnt, bmsql_oorder.o_ali_local, bmsql_oorder.o_entry_d
         Filter: (bmsql_oorder.o_d_id > (SubPlan 1))
         SubPlan 1
           ->  Limit
                 Output: public.bmsql_customer.c_w_id, (0)
                 ->  Sort
                       Output: public.bmsql_customer.c_w_id, (0)
                       Sort Key: public.bmsql_customer.c_w_id
                       ->  HashSetOp Except
                             Output: public.bmsql_customer.c_w_id, (0)
                             ->  Append
                                   ->  Result
                                         Output: public.bmsql_customer.c_w_id, 0
                                         ->  HashAggregate
                                               Output: public.bmsql_customer.c_w_id
                                               Group By Key: public.bmsql_customer.c_w_id
                                               ->  Append
                                                     ->  Result
                                                           Output: public.bmsql_customer.c_w_id
                                                           One-Time Filter: (bmsql_oorder.o_w_id >= 3)
                                                           ->  Seq Scan on public.bmsql_customer
                                                                 Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                     ->  Subquery Scan on "*SELECT* 2"
                                                           Output: "*SELECT* 2"."?column?"
                                                           ->  GroupAggregate
                                                                 Output: 1, "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                 Group By Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                 Group By Key: "*SELECT* 1".c_balance, tb2.c5
                                                                 Group By Key: "*SELECT* 1".c_balance
                                                                 Group By Key: "*SELECT* 1".c_balance
                                                                 ->  Sort
                                                                       Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                       Sort Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                       ->  Nested Loop
                                                                             Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                             ->  HashAggregate
                                                                                   Output: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                   Group By Key: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                   ->  Append
                                                                                         ->  Subquery Scan on "*SELECT* 1"
                                                                                               Output: "*SELECT* 1".c_w_id, "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                               ->  Nested Loop
                                                                                                     Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                     Join Filter: (public.bmsql_customer.c_w_id <> bmsql_district.d_id)
                                                                                                     ->  Seq Scan on public.bmsql_district
                                                                                                           Output: bmsql_district.d_w_id, bmsql_district.d_id, bmsql_district.d_ytd, bmsql_district.d_tax, bmsql_district.d_next_o_id, bmsql_district.d_name, bmsql_district.d_street_1, bmsql_district.d_street_2, bmsql_district.d_city, bmsql_district.d_state, bmsql_district.d_zip
                                                                                                     ->  Materialize
                                                                                                           Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                           ->  Seq Scan on public.bmsql_customer
                                                                                                                 Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                         ->  HashAggregate
                                                                                               Output: count(*), bmsql_item.i_price, bmsql_item.i_name
                                                                                               Group By Key: bmsql_item.i_price, bmsql_item.i_name
                                                                                               ->  Seq Scan on public.bmsql_item
                                                                                                     Output: bmsql_item.i_price, bmsql_item.i_name
                                                                             ->  Materialize
                                                                                   Output: tb2.c5
                                                                                   ->  Subquery Scan on tb2
                                                                                         Output: tb2.c5
                                                                                         ->  Subquery Scan on tmp
                                                                                               Output: tmp.count, tmp.c5
                                                                                               ->  HashAggregate
                                                                                                     Output: count(*), '123'::text, ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                     Group By Key: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                     ->  HashAggregate
                                                                                                           Output: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                           Group By Key: '2010-01-03'::text, bmsql_order_line.ol_d_id
                                                                                                           ->  Seq Scan on public.bmsql_order_line
                                                                                                                 Output: '2010-01-03'::text, bmsql_order_line.ol_d_id
                                                                                                                 Filter: (bmsql_order_line.ol_d_id >= 3)
                                   ->  Subquery Scan on "*SELECT* 3"
                                         Output: "*SELECT* 3".c_w_id, 1
                                         ->  HashAggregate
                                               Output: public.bmsql_customer.c_w_id
                                               Group By Key: public.bmsql_customer.c_w_id
                                               ->  Result
                                                     Output: public.bmsql_customer.c_w_id
                                                     One-Time Filter: (((log(((bmsql_oorder.o_carrier_id)::numeric + 5.5), ((bmsql_oorder.o_carrier_id + 6))::numeric))::text <> (bmsql_oorder.o_entry_d)::text) OR (bmsql_oorder.o_ol_cnt <= 3))
                                                     ->  Seq Scan on public.bmsql_customer
                                                           Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
(83 rows)

set try_vector_engine_strategy=optimal;
select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);
 count 
-------
     1
(1 row)

explain(costs off, verbose) select count(*)
from bmsql_oorder
where bmsql_oorder.o_d_id >( select c_w_id from bmsql_customer where bmsql_oorder.o_w_id >=3
union
select 1
from (select c_w_id ,c_balance ,c_last
from bmsql_customer
join bmsql_district
on c_w_id <> d_id
union
select * from
(select count(*) as count,i_price,i_name
from bmsql_item
group by 2,3)) as tb1 ,
(with tmp as (select count(*) , '123' as c5
from (with tmp1 as (select distinct '2010-01-03' as c4 ,ol_d_id as c3 from bmsql_order_line) select * from tmp1 ) where c3>=3 group by c4,c3 )select * from tmp ) tb2
group by rollup (tb1.c_balance,tb2.c5,tb1.c_last),tb1.c_balance
except
select distinct c_w_id
from bmsql_customer
where log(bmsql_oorder.o_carrier_id +5.5,bmsql_oorder.o_carrier_id+6) != bmsql_oorder.o_entry_d
or bmsql_oorder.o_ol_cnt<=3
order by 1 limit 1);


 Aggregate
   Output: count(*)
   ->  Seq Scan on public.bmsql_oorder
         Output: bmsql_oorder.o_w_id, bmsql_oorder.o_d_id, bmsql_oorder.o_id, bmsql_oorder.o_c_id, bmsql_oorder.o_carrier_id, bmsql_oorder.o_ol_cnt, bmsql_oorder.o_ali_local, bmsql_oorder.o_entry_d
         Filter: (bmsql_oorder.o_d_id > (SubPlan 1))
         SubPlan 1
           ->  Row Adapter
                 Output: public.bmsql_customer.c_w_id, (0)
                 ->  Vector Limit
                       Output: public.bmsql_customer.c_w_id, (0)
                       ->  Vector Sort
                             Output: public.bmsql_customer.c_w_id, (0)
                             Sort Key: public.bmsql_customer.c_w_id
                             ->  Vector HashSetOp Except
                                   Output: public.bmsql_customer.c_w_id, (0)
                                   ->  Vector Append
                                         ->  Vector Result
                                               Output: public.bmsql_customer.c_w_id, 0
                                               ->  Vector Sonic Hash Aggregate
                                                     Output: public.bmsql_customer.c_w_id
                                                     Group By Key: public.bmsql_customer.c_w_id
                                                     ->  Vector Append
                                                           ->  Vector Result
                                                                 Output: public.bmsql_customer.c_w_id
                                                                 One-Time Filter: (bmsql_oorder.o_w_id >= 3)
                                                                 ->  Vector Adapter(type: BATCH MODE)
                                                                       Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                                       ->  Seq Scan on public.bmsql_customer
                                                                             Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                           ->  Vector Subquery Scan on "*SELECT* 2"
                                                                 Output: "*SELECT* 2"."?column?"
                                                                 ->  Vector Sort Aggregate
                                                                       Output: 1, "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                       Group By Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                       Group By Key: "*SELECT* 1".c_balance, tb2.c5
                                                                       Group By Key: "*SELECT* 1".c_balance
                                                                       Group By Key: "*SELECT* 1".c_balance
                                                                       ->  Vector Sort
                                                                             Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                             Sort Key: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                             ->  Vector Nest Loop
                                                                                   Output: "*SELECT* 1".c_balance, tb2.c5, "*SELECT* 1".c_last
                                                                                   ->  Vector Sonic Hash Aggregate
                                                                                         Output: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                         Group By Key: (("*SELECT* 1".c_w_id)::bigint), "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                         ->  Vector Append
                                                                                               ->  Vector Subquery Scan on "*SELECT* 1"
                                                                                                     Output: "*SELECT* 1".c_w_id, "*SELECT* 1".c_balance, "*SELECT* 1".c_last
                                                                                                     ->  Vector Nest Loop
                                                                                                           Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                           Join Filter: (public.bmsql_customer.c_w_id <> bmsql_district.d_id)
                                                                                                           ->  Vector Adapter(type: BATCH MODE)
                                                                                                                 Output: bmsql_district.d_w_id, bmsql_district.d_id, bmsql_district.d_ytd, bmsql_district.d_tax, bmsql_district.d_next_o_id, bmsql_district.d_name, bmsql_district.d_street_1, bmsql_district.d_street_2, bmsql_district.d_city, bmsql_district.d_state, bmsql_district.d_zip
                                                                                                                 ->  Seq Scan on public.bmsql_district
                                                                                                                       Output: bmsql_district.d_w_id, bmsql_district.d_id, bmsql_district.d_ytd, bmsql_district.d_tax, bmsql_district.d_next_o_id, bmsql_district.d_name, bmsql_district.d_street_1, bmsql_district.d_street_2, bmsql_district.d_city, bmsql_district.d_state, bmsql_district.d_zip
                                                                                                           ->  Vector Materialize
                                                                                                                 Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                                 ->  Vector Adapter(type: BATCH MODE)
                                                                                                                       Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                                                       ->  Seq Scan on public.bmsql_customer
                                                                                                                             Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_balance, public.bmsql_customer.c_last
                                                                                               ->  Vector Sonic Hash Aggregate
                                                                                                     Output: count(*), bmsql_item.i_price, bmsql_item.i_name
                                                                                                     Group By Key: bmsql_item.i_price, bmsql_item.i_name
                                                                                                     ->  Vector Adapter(type: BATCH MODE)
                                                                                                           Output: bmsql_item.i_price, bmsql_item.i_name
                                                                                                           ->  Seq Scan on public.bmsql_item
                                                                                                                 Output: bmsql_item.i_price, bmsql_item.i_name
                                                                                   ->  Vector Materialize
                                                                                         Output: tb2.c5
                                                                                         ->  Vector Subquery Scan on tb2
                                                                                               Output: tb2.c5
                                                                                               ->  Vector Subquery Scan on tmp
                                                                                                     Output: tmp.count, tmp.c5
                                                                                                     ->  Vector Sonic Hash Aggregate
                                                                                                           Output: count(*), '123'::text, ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                           Group By Key: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                           ->  Vector Sonic Hash Aggregate
                                                                                                                 Output: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                 Group By Key: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                 ->  Vector Adapter(type: BATCH MODE)
                                                                                                                       Output: ('2010-01-03'::text), bmsql_order_line.ol_d_id
                                                                                                                       Filter: (bmsql_order_line.ol_d_id >= 3)
                                                                                                                       ->  Seq Scan on public.bmsql_order_line
                                                                                                                             Output: '2010-01-03'::text, bmsql_order_line.ol_d_id
                                         ->  Vector Subquery Scan on "*SELECT* 3"
                                               Output: "*SELECT* 3".c_w_id, 1
                                               ->  Vector Sonic Hash Aggregate
                                                     Output: public.bmsql_customer.c_w_id
                                                     Group By Key: public.bmsql_customer.c_w_id
                                                     ->  Vector Result
                                                           Output: public.bmsql_customer.c_w_id
                                                           One-Time Filter: (((log(((bmsql_oorder.o_carrier_id)::numeric + 5.5), ((bmsql_oorder.o_carrier_id + 6))::numeric))::text <> (bmsql_oorder.o_entry_d)::text) OR (bmsql_oorder.o_ol_cnt <= 3))
                                                           ->  Vector Adapter(type: BATCH MODE)
                                                                 Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
                                                                 ->  Seq Scan on public.bmsql_customer
                                                                       Output: public.bmsql_customer.c_w_id, public.bmsql_customer.c_d_id, public.bmsql_customer.c_id, public.bmsql_customer.c_discount, public.bmsql_customer.c_credit, public.bmsql_customer.c_last, public.bmsql_customer.c_first, public.bmsql_customer.c_credit_lim, public.bmsql_customer.c_balance, public.bmsql_customer.c_ytd_payment, public.bmsql_customer.c_payment_cnt, public.bmsql_customer.c_delivery_cnt, public.bmsql_customer.c_street_1, public.bmsql_customer.c_street_2, public.bmsql_customer.c_city, public.bmsql_customer.c_state, public.bmsql_customer.c_zip, public.bmsql_customer.c_phone, public.bmsql_customer.c_since, public.bmsql_customer.lc_middle, public.bmsql_customer.c_data
(97 rows)

drop table if exists bmsql_oorder;
drop table if exists bmsql_order_line;
drop table if exists bmsql_district;
drop table if exists bmsql_customer;
drop table if exists bmsql_item;
