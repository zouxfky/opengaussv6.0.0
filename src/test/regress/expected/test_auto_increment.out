-- only supported in b database
CREATE TABLE test_create_autoinc_err(id int auto_increment unique key, name varchar(200),a int);
ERROR:  auto_increment is supported only in B-format database
CREATE TABLE test_create_autoinc_err(id int, name varchar(200),a int) AUTO_INCREMENT=100;
ERROR:  auto_increment is supported only in B-format database
ALTER TABLE test_create_autoinc_err AUTO_INCREMENT=100;
ERROR:  auto_increment is supported only in B-format database
-- create b db
create database autoinc_b_db with dbcompatibility = 'B';
\c autoinc_b_db
-- test CREATE TABLE with AUTO_INCREMENT
-- test create table
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT INDEX,
    b varchar(32)
); -- ERROR
ERROR:  syntax error at or near "INDEX"
LINE 2:     a int AUTO_INCREMENT INDEX,
                                 ^
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT KEY,
    b varchar(32)
); -- ERROR
ERROR:  syntax error at or near "KEY"
LINE 2:     a int AUTO_INCREMENT KEY,
                                 ^
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT PRIMARY KEY,
    b varchar(32)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
\d test_create_autoinc;
            Table "public.test_create_autoinc"
 Column |         Type          |        Modifiers        
--------+-----------------------+-------------------------
 a      | integer               | not null AUTO_INCREMENT
 b      | character varying(32) | 
Indexes:
    "test_create_autoinc_pkey" PRIMARY KEY, btree (a) TABLESPACE pg_default

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT UNIQUE KEY,
    b varchar(32)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_a_key" for table "test_create_autoinc"
DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT UNIQUE,
    b varchar(32)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_a_key" for table "test_create_autoinc"
\d test_create_autoinc;
            Table "public.test_create_autoinc"
 Column |         Type          |        Modifiers        
--------+-----------------------+-------------------------
 a      | integer               | not null AUTO_INCREMENT
 b      | character varying(32) | 
Indexes:
    "test_create_autoinc_a_key" UNIQUE CONSTRAINT, btree (a) TABLESPACE pg_default

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT,
    b varchar(32),
    UNIQUE ((b||'1'),a)
); -- ERROR
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
ERROR:  Incorrect table definition, auto_increment column must be defined as a key
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT,
    b varchar(32),
    UNIQUE (a,b)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_a_b_key" for table "test_create_autoinc"
\d test_create_autoinc;
            Table "public.test_create_autoinc"
 Column |         Type          |        Modifiers        
--------+-----------------------+-------------------------
 a      | integer               | not null AUTO_INCREMENT
 b      | character varying(32) | 
Indexes:
    "test_create_autoinc_a_b_key" UNIQUE CONSTRAINT, btree (a, b) TABLESPACE pg_default

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT,
    b varchar(32),
    PRIMARY KEY ((b||'1'),a)
); -- ERROR
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
ERROR:  Incorrect table definition, auto_increment column must be defined as a key
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT,
    b varchar(32),
    PRIMARY KEY (a,b)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_a_seq" for serial column "test_create_autoinc.a"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
\d test_create_autoinc;
            Table "public.test_create_autoinc"
 Column |         Type          |        Modifiers        
--------+-----------------------+-------------------------
 a      | integer               | not null AUTO_INCREMENT
 b      | character varying(32) | not null
Indexes:
    "test_create_autoinc_pkey" PRIMARY KEY, btree (a, b) TABLESPACE pg_default

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(
    a int AUTO_INCREMENT,
    b varchar(32),
    KEY (b,a)
); -- ERROR
ERROR:  syntax error at or near "("
LINE 4:     KEY (b,a)
                ^
-- constraint error
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key CHECK (id < 500), name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  check constraint cannot refer to an auto_increment column
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int CHECK ((id + a) < 500));
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  check constraint cannot refer to an auto_increment column
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key DEFAULT 100, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  multiple default values specified for column "id" of table "test_create_autoinc_err"
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key GENERATED ALWAYS AS (a+1) STORED, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  both default and generation expression specified for column "id" of table "test_create_autoinc_err"
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int GENERATED ALWAYS AS (id+1) STORED);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  generated column cannot refer to auto_increment column
CREATE TABLE test_create_autoinc_err(id int GENERATED ALWAYS AS (a+1) STORED, name varchar(200),a int auto_increment primary key);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_a_seq" for serial column "test_create_autoinc_err.a"
ERROR:  generated column cannot refer to auto_increment column
--auto_increment value error
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=-1;
ERROR:  syntax error at or near "-"
LINE 1: ...ent primary key, name varchar(200),a int) auto_increment=-1;
                                                                    ^
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=0; 
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  auto_increment value must be greater than 0
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=170141183460469231731687303715884105728;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  value "170141183460469231731687303715884105728" is out of range for type int16
DETAIL:  text exceeds the length of int16
CREATE TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=1.1;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err_id_seq" for serial column "test_create_autoinc_err.id"
ERROR:  invalid input syntax for type int16: "1.1"
DETAIL:  text contain invalid character
CREATE TEMPORARY TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=-1;
ERROR:  syntax error at or near "-"
LINE 1: ...ent primary key, name varchar(200),a int) auto_increment=-1;
                                                                    ^
CREATE TEMPORARY TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=0; 
ERROR:  auto_increment value must be greater than 0
CREATE TEMPORARY TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=170141183460469231731687303715884105728;
ERROR:  value "170141183460469231731687303715884105728" is out of range for type int16
DETAIL:  text exceeds the length of int16
CREATE TEMPORARY TABLE test_create_autoinc_err(id int auto_increment primary key, name varchar(200),a int) auto_increment=1.1;
ERROR:  invalid input syntax for type int16: "1.1"
DETAIL:  text contain invalid character
-- datatype error
CREATE TABLE test_create_autoinc_err1(id SERIAL auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id DECIMAL(10,4) auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id NUMERIC(10,4) auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id text auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id oid auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id int[] auto_increment primary key, name varchar(200),a int);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_err1_id_seq" for serial column "test_create_autoinc_err1.id"
ERROR:  The datatype of column 'id' does not support auto_increment
CREATE TABLE test_create_autoinc_err1(id int16 auto_increment, name varchar(200),a int, unique(id)) auto_increment=170141183460469231731687303715884105727;
ERROR:  It's not supported to create int16 column
-- table type error
CREATE TABLE test_create_autoinc_err(id INTEGER auto_increment, name varchar(200),a int, primary key(id)) with (ORIENTATION=column);
ERROR:  Un-supported feature
DETAIL:  Orientation type column is not supported for auto_increment
CREATE TABLE test_create_autoinc_err(id INTEGER auto_increment, name varchar(200),a int, primary key(id)) with (ORIENTATION=orc);
ERROR:  Un-supported feature
DETAIL:  Orientation type orc is not supported for auto_increment
CREATE TABLE test_create_autoinc_err(id INTEGER auto_increment, name varchar(200),a int, primary key(id)) with (ORIENTATION=timeseries);
ERROR:  Un-supported feature
DETAIL:  Orientation type timeseries is not supported for auto_increment
CREATE FOREIGN TABLE t_table_0020 (
  col01 integer AUTO_INCREMENT NOT NULL,
  col02 float,
  col03 int,
  PRIMARY KEY (col01,col02,col03)
) server gsmpp_server;
ERROR:  Un-support feature
DETAIL:  auto_increment column is not supported in foreign table
--test different type with auto_increment start value
CREATE TABLE test_create_autoinc(id bool auto_increment primary key, name varchar(200),a int) auto_increment=1;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  duplicate key value violates unique constraint "test_create_autoinc_pkey"
DETAIL:  Key (id)=(t) already exists.
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                     pg_get_tabledef                      
----------------------------------------------------------
 SET search_path = public;                               +
 CREATE TABLE test_create_autoinc (                      +
     id boolean AUTO_INCREMENT NOT NULL,                 +
     name character varying(200),                        +
     a integer,                                          +
     CONSTRAINT test_create_autoinc_pkey PRIMARY KEY (id)+
 ) AUTO_INCREMENT = 3                                    +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id TINYINT primary key auto_increment, name varchar(200),a int) auto_increment=255;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            255
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  tinyint out of range
DETAIL:  cannot cast value too large for tinyint
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                     pg_get_tabledef                      
----------------------------------------------------------
 SET search_path = public;                               +
 CREATE TABLE test_create_autoinc (                      +
     id tinyint AUTO_INCREMENT NOT NULL,                 +
     name character varying(200),                        +
     a integer,                                          +
     CONSTRAINT test_create_autoinc_pkey PRIMARY KEY (id)+
 ) AUTO_INCREMENT = 257                                  +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id SMALLINT auto_increment unique, name varchar(200),a int) auto_increment=32767;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_id_key" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
          32767
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  smallint out of range
DETAIL:  cannot cast value too large for smallint
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE test_create_autoinc (                   +
     id smallint AUTO_INCREMENT NOT NULL,             +
     name character varying(200),                     +
     a integer,                                       +
     CONSTRAINT test_create_autoinc_id_key UNIQUE (id)+
 ) AUTO_INCREMENT = 32769                             +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id INTEGER auto_increment, name varchar(200),a int, primary key(id)) auto_increment=2147483647;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
     2147483647
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  integer out of range
DETAIL:  cannot cast value too large for integer
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                     pg_get_tabledef                      
----------------------------------------------------------
 SET search_path = public;                               +
 CREATE TABLE test_create_autoinc (                      +
     id integer AUTO_INCREMENT NOT NULL,                 +
     name character varying(200),                        +
     a integer,                                          +
     CONSTRAINT test_create_autoinc_pkey PRIMARY KEY (id)+
 ) AUTO_INCREMENT = 2147483649                           +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id BIGINT auto_increment, name varchar(200),a int, primary key(id, name)) auto_increment=9223372036854775807;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_pkey" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
   last_insert_id    
---------------------
 9223372036854775807
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  bigint out of range
DETAIL:  cannot cast value too large for bigint
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                        pg_get_tabledef                         
----------------------------------------------------------------
 SET search_path = public;                                     +
 CREATE TABLE test_create_autoinc (                            +
     id bigint AUTO_INCREMENT NOT NULL,                        +
     name character varying(200) NOT NULL,                     +
     a integer,                                                +
     CONSTRAINT test_create_autoinc_pkey PRIMARY KEY (id, name)+
 ) AUTO_INCREMENT = 9223372036854775809                        +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id REAL auto_increment, name varchar(200),a int, unique(id, name)) auto_increment=9223372036854775807;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_id_name_key" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
   last_insert_id    
---------------------
 9223372036854775807
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  duplicate key value violates unique constraint "test_create_autoinc_id_name_key"
DETAIL:  Key (id, name)=(9.22337e+18, Gauss) already exists.
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                         pg_get_tabledef                          
------------------------------------------------------------------
 SET search_path = public;                                       +
 CREATE TABLE test_create_autoinc (                              +
     id real AUTO_INCREMENT NOT NULL,                            +
     name character varying(200),                                +
     a integer,                                                  +
     CONSTRAINT test_create_autoinc_id_name_key UNIQUE (id, name)+
 ) AUTO_INCREMENT = 9223372036854775810                          +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id DOUBLE PRECISION auto_increment, name varchar(200),a int, unique(id)) auto_increment=9223372036854775807;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_id_key" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
   last_insert_id    
---------------------
 9223372036854775807
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  duplicate key value violates unique constraint "test_create_autoinc_id_key"
DETAIL:  Key (id)=(9.22337203685478e+18) already exists.
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE test_create_autoinc (                   +
     id double precision AUTO_INCREMENT NOT NULL,     +
     name character varying(200),                     +
     a integer,                                       +
     CONSTRAINT test_create_autoinc_id_key UNIQUE (id)+
 ) AUTO_INCREMENT = 9223372036854775810               +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
CREATE TABLE test_create_autoinc(id FLOAT(50) auto_increment, name varchar(200),a int, unique(id)) auto_increment=9223372036854775807;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_id_seq" for serial column "test_create_autoinc.id"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_create_autoinc_id_key" for table "test_create_autoinc"
INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
SELECT LAST_INSERT_ID();
   last_insert_id    
---------------------
 9223372036854775807
(1 row)

INSERT INTO test_create_autoinc VALUES(DEFAULT,'Gauss',0);
ERROR:  duplicate key value violates unique constraint "test_create_autoinc_id_key"
DETAIL:  Key (id)=(9.22337203685478e+18) already exists.
SELECT pg_catalog.pg_get_tabledef('test_create_autoinc');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE test_create_autoinc (                   +
     id double precision AUTO_INCREMENT NOT NULL,     +
     name character varying(200),                     +
     a integer,                                       +
     CONSTRAINT test_create_autoinc_id_key UNIQUE (id)+
 ) AUTO_INCREMENT = 9223372036854775810               +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE test_create_autoinc;
--test CREATE TABLE LIKE with AUTO_INCREMENT
CREATE TABLE test_create_autoinc_source(id int auto_increment primary key) AUTO_INCREMENT = 100;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_source_id_seq" for serial column "test_create_autoinc_source.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_source_pkey" for table "test_create_autoinc_source"
INSERT INTO test_create_autoinc_source VALUES(DEFAULT);
INSERT INTO test_create_autoinc_source VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_source ORDER BY 1;
 id  
-----
 100
 101
(2 rows)

--error
CREATE TABLE test_create_autoinc_like_err(LIKE test_create_autoinc_source);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_id_seq" for serial column "test_create_autoinc_like_err.id"
ERROR:  Incorrect table definition, auto_increment column must be defined as a key
CREATE TABLE test_create_autoinc_like_err(LIKE test_create_autoinc_source INCLUDING INDEXES, a int auto_increment);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_id_seq" for serial column "test_create_autoinc_like_err.id"
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_a_seq" for serial column "test_create_autoinc_like_err.a"
ERROR:  Incorrect table definition, there can be only one auto_increment column
CREATE TABLE test_create_autoinc_like_err(a int auto_increment, LIKE test_create_autoinc_source INCLUDING INDEXES);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_a_seq" for serial column "test_create_autoinc_like_err.a"
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_id_seq" for serial column "test_create_autoinc_like_err.id"
ERROR:  Incorrect table definition, auto_increment column must be defined as a key
CREATE TABLE test_create_autoinc_like_err(a int auto_increment primary key, LIKE test_create_autoinc_source);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_a_seq" for serial column "test_create_autoinc_like_err.a"
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_id_seq" for serial column "test_create_autoinc_like_err.id"
ERROR:  Incorrect table definition, there can be only one auto_increment column
CREATE TABLE test_create_autoinc_like_err(LIKE test_create_autoinc_source INCLUDING INDEXES) with (ORIENTATION=column);
ERROR:  Un-supported feature
DETAIL:  Orientation type column is not supported for auto_increment
CREATE TABLE test_create_autoinc_like_err(LIKE test_create_autoinc_source INCLUDING INDEXES, a int GENERATED ALWAYS AS (id+1) STORED);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_err_id_seq" for serial column "test_create_autoinc_like_err.id"
ERROR:  generated column cannot refer to auto_increment column
--row table
CREATE TABLE test_create_autoinc_like(LIKE test_create_autoinc_source INCLUDING INDEXES);
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_id_seq" for serial column "test_create_autoinc_like.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_like_pkey" for table "test_create_autoinc_like"
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
ALTER TABLE test_create_autoinc_like AUTO_INCREMENT=200;
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like ORDER BY 1;
 id  
-----
   1
 200
(2 rows)

TRUNCATE TABLE test_create_autoinc_like;
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like ORDER BY 1;
 id 
----
  1
(1 row)

DROP TABLE test_create_autoinc_like;
CREATE TABLE test_create_autoinc_like(LIKE test_create_autoinc_source INCLUDING INDEXES) AUTO_INCREMENT=100;
NOTICE:  CREATE TABLE will create implicit sequence "test_create_autoinc_like_id_seq" for serial column "test_create_autoinc_like.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_like_pkey" for table "test_create_autoinc_like"
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
ALTER TABLE test_create_autoinc_like AUTO_INCREMENT=200;
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like ORDER BY 1;
 id  
-----
 100
 200
(2 rows)

TRUNCATE TABLE test_create_autoinc_like;
INSERT INTO test_create_autoinc_like VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like ORDER BY 1;
 id 
----
  1
(1 row)

DROP TABLE test_create_autoinc_like;
--local temp table
CREATE TEMPORARY TABLE test_create_autoinc_like_temp(LIKE test_create_autoinc_source INCLUDING INDEXES);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_like_temp_pkey" for table "test_create_autoinc_like_temp"
INSERT INTO test_create_autoinc_like_temp VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
ALTER TABLE test_create_autoinc_like_temp AUTO_INCREMENT=200;
INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like_temp ORDER BY 1;
 id  
-----
   1
   2
 200
(3 rows)

TRUNCATE TABLE test_create_autoinc_like_temp;
INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like_temp ORDER BY 1;
 id 
----
  1
(1 row)

DROP TABLE test_create_autoinc_like_temp;
CREATE TEMPORARY TABLE test_create_autoinc_like_temp(LIKE test_create_autoinc_source INCLUDING INDEXES) AUTO_INCREMENT=100;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_create_autoinc_like_temp_pkey" for table "test_create_autoinc_like_temp"
INSERT INTO test_create_autoinc_like_temp VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            100
(1 row)

INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
ALTER TABLE test_create_autoinc_like_temp AUTO_INCREMENT=200;
INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like_temp ORDER BY 1;
 id  
-----
 100
 101
 200
(3 rows)

TRUNCATE TABLE test_create_autoinc_like_temp;
INSERT INTO test_create_autoinc_like_temp VALUES(DEFAULT);
SELECT id FROM test_create_autoinc_like_temp ORDER BY 1;
 id 
----
  1
(1 row)

DROP TABLE test_create_autoinc_like_temp;
DROP TABLE test_create_autoinc_source;
--test ALTER TABLE ADD COLUMN AUTO_INCREMENT
--cstore is not supported
CREATE TABLE test_alter_autoinc_col(col int) with (ORIENTATION=column);
INSERT INTO test_alter_autoinc_col VALUES(1);
ALTER TABLE test_alter_autoinc_col ADD COLUMN id int AUTO_INCREMENT primary key;
ERROR:  Un-supported feature
DETAIL:  Orientation type column is not supported for auto_increment
DROP TABLE test_alter_autoinc_col;
-- auto_increment and generated column
CREATE TABLE test_alter_autoinc(col int);
ALTER TABLE test_alter_autoinc ADD COLUMN a int GENERATED ALWAYS AS (b+1), ADD COLUMN b int auto_increment primary key;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_b_seq" for serial column "test_alter_autoinc.b"
ERROR:  column "b" does not exist
ALTER TABLE test_alter_autoinc ADD COLUMN a int auto_increment primary key, ADD COLUMN b int GENERATED ALWAYS AS (a+1);
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_a_seq" for serial column "test_alter_autoinc.a"
ERROR:  generated column cannot refer to auto_increment column
DROP TABLE test_alter_autoinc;
--astore with data
CREATE TABLE test_alter_autoinc(col int);
INSERT INTO test_alter_autoinc VALUES(1);
INSERT INTO test_alter_autoinc VALUES(2);
ALTER TABLE test_alter_autoinc ADD COLUMN id int AUTO_INCREMENT; -- ERROR
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
ERROR:  auto_increment column must be defined as a unique or primary key
ALTER TABLE test_alter_autoinc ADD COLUMN id int AUTO_INCREMENT primary key;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_pkey" for table "test_alter_autoinc"
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
(2 rows)

insert into test_alter_autoinc(col) values (3),(4),(5);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
  5 |   5
(5 rows)

insert into test_alter_autoinc values (1, 1);
ERROR:  duplicate key value violates unique constraint "test_alter_autoinc_pkey"
DETAIL:  Key (id)=(1) already exists.
insert into test_alter_autoinc values (6, 0);
select last_insert_id();
 last_insert_id 
----------------
              6
(1 row)

ALTER TABLE test_alter_autoinc AUTO_INCREMENT = 1000;
INSERT INTO test_alter_autoinc VALUES(3,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
  id  | col 
------+-----
    1 |   1
    2 |   2
    3 |   3
    4 |   4
    5 |   5
    6 |   6
 1000 |   3
(7 rows)

TRUNCATE TABLE test_alter_autoinc;
INSERT INTO test_alter_autoinc VALUES(4,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   4
(1 row)

ALTER TABLE test_alter_autoinc DROP COLUMN id;
SELECT col FROM test_alter_autoinc ORDER BY 1;
 col 
-----
   4
(1 row)

ALTER TABLE test_alter_autoinc ADD id int AUTO_INCREMENT, ADD primary key(id), AUTO_INCREMENT = 100;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_pkey" for table "test_alter_autoinc"
INSERT INTO test_alter_autoinc VALUES(5,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id  | col 
-----+-----
 100 |   4
 101 |   5
(2 rows)

ALTER TABLE test_alter_autoinc DROP COLUMN id, ADD id int AUTO_INCREMENT, ADD primary key(id), AUTO_INCREMENT = 200;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq1" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_pkey" for table "test_alter_autoinc"
INSERT INTO test_alter_autoinc VALUES(6,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id  | col 
-----+-----
 200 |   4
 201 |   5
 202 |   6
(3 rows)

SELECT pg_catalog.pg_get_tabledef('test_alter_autoinc');
                     pg_get_tabledef                     
---------------------------------------------------------
 SET search_path = public;                              +
 CREATE TABLE test_alter_autoinc (                      +
     col integer,                                       +
     id integer AUTO_INCREMENT NOT NULL,                +
     CONSTRAINT test_alter_autoinc_pkey PRIMARY KEY (id)+
 ) AUTO_INCREMENT = 203                                 +
 WITH (orientation=row, compression=no);
(1 row)

-- error
ALTER TABLE test_alter_autoinc ADD COLUMN new_id int AUTO_INCREMENT;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_new_id_seq" for serial column "test_alter_autoinc.new_id"
ERROR:  Incorrect column definition, there can be only one auto_increment column
ALTER TABLE test_alter_autoinc ADD COLUMN new_id int AUTO_INCREMENT UNIQUE;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_new_id_seq" for serial column "test_alter_autoinc.new_id"
ERROR:  Incorrect column definition, there can be only one auto_increment column
ALTER TABLE test_alter_autoinc ALTER COLUMN id DROP DEFAULT;
ERROR:  cannot alter auto_increment column "id" default
ALTER TABLE test_alter_autoinc DROP COLUMN id, ADD new_id NUMERIC(10,4) AUTO_INCREMENT PRIMARY KEY;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_new_id_seq" for serial column "test_alter_autoinc.new_id"
ERROR:  The datatype of column 'new_id' does not support auto_increment
ALTER TABLE test_alter_autoinc DROP CONSTRAINT test_alter_autoinc_pkey;
ERROR:  auto_increment column must be defined as a unique or primary key
ALTER TABLE test_alter_autoinc auto_increment=-1;
ERROR:  syntax error at or near "-"
LINE 1: ALTER TABLE test_alter_autoinc auto_increment=-1;
                                                      ^
ALTER TABLE test_alter_autoinc auto_increment=1701411834604692317316873037158841057278;
ERROR:  value "1701411834604692317316873037158841057278" is out of range for type int16
DETAIL:  text exceeds the length of int16
ALTER TABLE test_alter_autoinc auto_increment=1.1;
ERROR:  invalid input syntax for type int16: "1.1"
DETAIL:  text contain invalid character
ALTER LARGE SEQUENCE test_alter_autoinc_id_seq1 RESTART;
ERROR:  cannot alter sequence owned by auto_increment column
ALTER LARGE SEQUENCE test_alter_autoinc_id_seq1 maxvalue 90;
ERROR:  cannot alter sequence owned by auto_increment column
ALTER LARGE SEQUENCE test_alter_autoinc_id_seq1 OWNED BY test_alter_autoinc.col;
ERROR:  cannot alter sequence owned by auto_increment column
ALTER LARGE SEQUENCE test_alter_autoinc_id_seq1 AUTO_INCREMENT = 100;
ERROR:  Un-support feature
DETAIL:  ALTER TABLE AUTO_INCREMENT only supports ordinary table.
select nextval('test_alter_autoinc_id_seq1');
ERROR:  cannot change sequence owned by auto_increment column
CONTEXT:  referenced column: nextval
select nextval('test_alter_autoinc_id_seq1'::regclass);
ERROR:  cannot change sequence owned by auto_increment column
CONTEXT:  referenced column: nextval
select setval('test_alter_autoinc_id_seq1'::regclass, 1000);
ERROR:  cannot change sequence owned by auto_increment column
CONTEXT:  referenced column: setval
select setval('test_alter_autoinc_id_seq1'::regclass, 1000, true);
ERROR:  cannot change sequence owned by auto_increment column
CONTEXT:  referenced column: setval
DROP SEQUENCE test_alter_autoinc_id_seq1;
ERROR:  "test_alter_autoinc_id_seq1" is not a sequence
HINT:  Use DROP LARGE SEQUENCE to remove a large sequence.
DROP LARGE SEQUENCE test_alter_autoinc_id_seq1 CASCADE;
ERROR:  cannot drop sequence owned by auto_increment column
-- supplementary tests
ALTER TABLE test_alter_autoinc AUTO_INCREMENT = 1000;
INSERT INTO test_alter_autoinc VALUES(7,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
  id  | col 
------+-----
  200 |   4
  201 |   5
  202 |   6
 1000 |   7
(4 rows)

ALTER TABLE test_alter_autoinc DROP COLUMN id, ADD id int AUTO_INCREMENT UNIQUE;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_id_key" for table "test_alter_autoinc"
INSERT INTO test_alter_autoinc VALUES(8,DEFAULT);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   4
  2 |   5
  3 |   6
  4 |   7
  5 |   8
(5 rows)

DROP TABLE test_alter_autoinc;
--test alter table add AUTO_INCREMENT NULL UNIQUE
CREATE TABLE test_alter_autoinc(col int);
INSERT INTO test_alter_autoinc VALUES(1);
INSERT INTO test_alter_autoinc VALUES(2);
ALTER TABLE test_alter_autoinc ADD COLUMN id int AUTO_INCREMENT NULL UNIQUE;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_id_key" for table "test_alter_autoinc"
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
    |   1
    |   2
(2 rows)

INSERT INTO test_alter_autoinc VALUES(3,NULL);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
    |   1
    |   2
    |   3
(3 rows)

INSERT INTO test_alter_autoinc VALUES(4,0);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  2 |   4
    |   1
    |   2
    |   3
(4 rows)

DROP TABLE test_alter_autoinc;
--test alter table add NULL AUTO_INCREMENT UNIQUE
CREATE TABLE test_alter_autoinc(col int);
INSERT INTO test_alter_autoinc VALUES(1);
INSERT INTO test_alter_autoinc VALUES(2);
ALTER TABLE test_alter_autoinc ADD COLUMN id int NULL AUTO_INCREMENT UNIQUE;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_id_seq" for serial column "test_alter_autoinc.id"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_id_key" for table "test_alter_autoinc"
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
(2 rows)

INSERT INTO test_alter_autoinc VALUES(3,NULL);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
(3 rows)

INSERT INTO test_alter_autoinc VALUES(4,0);
SELECT id, col FROM test_alter_autoinc ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
(4 rows)

DROP TABLE test_alter_autoinc;
--local temp table with data
CREATE TEMPORARY TABLE test_alter_autoinc_ltemp(col int);
INSERT INTO test_alter_autoinc_ltemp VALUES(1);
INSERT INTO test_alter_autoinc_ltemp VALUES(2);
ALTER TABLE test_alter_autoinc_ltemp ADD id int AUTO_INCREMENT, ADD primary key(id), AUTO_INCREMENT = 100;
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_ltemp_pkey" for table "test_alter_autoinc_ltemp"
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              4
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id  | col 
-----+-----
 100 |   1
 101 |   2
(2 rows)

INSERT INTO test_alter_autoinc_ltemp VALUES(3,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            102
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id  | col 
-----+-----
 100 |   1
 101 |   2
 102 |   3
(3 rows)

ALTER TABLE test_alter_autoinc_ltemp AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            102
(1 row)

INSERT INTO test_alter_autoinc_ltemp VALUES(4,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
  id  | col 
------+-----
  100 |   1
  101 |   2
  102 |   3
 1000 |   4
(4 rows)

ALTER TABLE test_alter_autoinc_ltemp DROP COLUMN id, ADD id1 int AUTO_INCREMENT, ADD primary key(id1), AUTO_INCREMENT = 200;
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_ltemp_pkey" for table "test_alter_autoinc_ltemp"
INSERT INTO test_alter_autoinc_ltemp VALUES(5,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            204
(1 row)

SELECT id1, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id1 | col 
-----+-----
 200 |   1
 201 |   2
 202 |   3
 203 |   4
 204 |   5
(5 rows)

ALTER TABLE test_alter_autoinc_ltemp DROP COLUMN id1, ADD id int AUTO_INCREMENT UNIQUE;
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_ltemp_id_key" for table "test_alter_autoinc_ltemp"
INSERT INTO test_alter_autoinc_ltemp VALUES(6,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
  5 |   5
  6 |   6
(6 rows)

ALTER TABLE test_alter_autoinc_ltemp ADD CONSTRAINT test_alter_autoinc_ltemp_u1 UNIQUE(id);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_ltemp_u1" for table "test_alter_autoinc_ltemp"
ALTER TABLE test_alter_autoinc_ltemp ADD CONSTRAINT test_alter_autoinc_ltemp_u2 UNIQUE(id);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_ltemp_u2" for table "test_alter_autoinc_ltemp"
ALTER TABLE test_alter_autoinc_ltemp DROP CONSTRAINT test_alter_autoinc_ltemp_id_key;
INSERT INTO test_alter_autoinc_ltemp VALUES(7,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              7
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
  5 |   5
  6 |   6
  7 |   7
(7 rows)

ALTER TABLE test_alter_autoinc_ltemp DROP CONSTRAINT test_alter_autoinc_ltemp_u2;
INSERT INTO test_alter_autoinc_ltemp VALUES(8,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              8
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id | col 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
  5 |   5
  6 |   6
  7 |   7
  8 |   8
(8 rows)

ALTER TABLE test_alter_autoinc_ltemp MODIFY col NUMERIC(10,4);
INSERT INTO test_alter_autoinc_ltemp VALUES(9,DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              9
(1 row)

SELECT id, col FROM test_alter_autoinc_ltemp ORDER BY 1, 2;
 id |  col   
----+--------
  1 | 1.0000
  2 | 2.0000
  3 | 3.0000
  4 | 4.0000
  5 | 5.0000
  6 | 6.0000
  7 | 7.0000
  8 | 8.0000
  9 | 9.0000
(9 rows)

ALTER TABLE test_alter_autoinc_ltemp DROP COLUMN col;
INSERT INTO test_alter_autoinc_ltemp VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT id FROM test_alter_autoinc_ltemp ORDER BY 1;
 id 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

ALTER TABLE test_alter_autoinc_ltemp AUTO_INCREMENT=100;
INSERT INTO test_alter_autoinc_ltemp VALUES(DEFAULT);
SELECT id FROM test_alter_autoinc_ltemp ORDER BY 1;
 id  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
(11 rows)

TRUNCATE TABLE test_alter_autoinc_ltemp;
INSERT INTO test_alter_autoinc_ltemp VALUES(DEFAULT);
SELECT id FROM test_alter_autoinc_ltemp ORDER BY 1;
 id 
----
  1
(1 row)

-- error
ALTER TABLE test_alter_autoinc_ltemp ALTER COLUMN id DROP DEFAULT;
ERROR:  cannot alter auto_increment column "id" default
ALTER TABLE test_alter_autoinc_ltemp DROP COLUMN id, ADD new_id NUMERIC(10,4) AUTO_INCREMENT PRIMARY KEY;
ERROR:  must have at least one column
ALTER TABLE test_alter_autoinc_ltemp DROP CONSTRAINT test_alter_autoinc_ltemp_u1;
ERROR:  auto_increment column must be defined as a unique or primary key
ALTER TABLE test_alter_autoinc_ltemp auto_increment=-1;
ERROR:  syntax error at or near "-"
LINE 1: ALTER TABLE test_alter_autoinc_ltemp auto_increment=-1;
                                                            ^
ALTER TABLE test_alter_autoinc_ltemp auto_increment=1701411834604692317316873037158841057278;
ERROR:  value "1701411834604692317316873037158841057278" is out of range for type int16
DETAIL:  text exceeds the length of int16
ALTER TABLE test_alter_autoinc_ltemp auto_increment=1.1;
ERROR:  invalid input syntax for type int16: "1.1"
DETAIL:  text contain invalid character
DROP TABLE test_alter_autoinc_ltemp;
--global temp table with data
CREATE GLOBAL TEMPORARY TABLE test_alter_autoinc_gtemp(col int);
INSERT INTO test_alter_autoinc_gtemp VALUES(1);
INSERT INTO test_alter_autoinc_gtemp VALUES(2);
ALTER TABLE test_alter_autoinc_gtemp ADD id int AUTO_INCREMENT, ADD primary key(id), AUTO_INCREMENT = 100;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_gtemp_id_seq" for serial column "test_alter_autoinc_gtemp.id"
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_gtemp_pkey" for table "test_alter_autoinc_gtemp"
SELECT id, col FROM test_alter_autoinc_gtemp ORDER BY 1, 2;
 id  | col 
-----+-----
 100 |   1
 101 |   2
(2 rows)

ALTER TABLE test_alter_autoinc_gtemp AUTO_INCREMENT = 1000;
INSERT INTO test_alter_autoinc_gtemp VALUES(3,DEFAULT);
SELECT id, col FROM test_alter_autoinc_gtemp ORDER BY 1, 2;
  id  | col 
------+-----
  100 |   1
  101 |   2
 1000 |   3
(3 rows)

TRUNCATE TABLE test_alter_autoinc_gtemp;
INSERT INTO test_alter_autoinc_gtemp VALUES(4,DEFAULT);
SELECT id, col FROM test_alter_autoinc_gtemp ORDER BY 1, 2;
 id | col 
----+-----
  1 |   4
(1 row)

DROP TABLE test_alter_autoinc_gtemp;
--part table with data
CREATE TABLE test_alter_partition_autoinc (
    col2 INT NOT NULL,
    col3 INT NOT NULL
) PARTITION BY RANGE (col2) SUBPARTITION BY HASH (col3) (
    PARTITION col1_less_1000 VALUES LESS THAN(1000)
    (
        SUBPARTITION p1_col2_hash1,
        SUBPARTITION p1_col2_hash2
    ),
    PARTITION col1_mid_1000 VALUES LESS THAN(2000)
    (
        SUBPARTITION p2_col2_hash1,
        SUBPARTITION p2_col2_hash2
    ),
    PARTITION col1_greater_2000 VALUES LESS THAN (MAXVALUE)
    (
        SUBPARTITION p3_col2_hash1,
        SUBPARTITION p3_col2_hash2
    )
);
INSERT INTO test_alter_partition_autoinc VALUES(1,1);
INSERT INTO test_alter_partition_autoinc VALUES(2001,2001);
ALTER TABLE test_alter_partition_autoinc ADD col1 int AUTO_INCREMENT, ADD UNIQUE(col1, col2, col3), AUTO_INCREMENT = 100;
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_partition_autoinc_col1_seq" for serial column "test_alter_partition_autoinc.col1"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_partition_autoinc_col1_col2_col3_key" for table "test_alter_partition_autoinc"
SELECT col1, col2, col3 FROM test_alter_partition_autoinc ORDER BY 1, 2;
 col1 | col2 | col3 
------+------+------
  100 |    1 |    1
  101 | 2001 | 2001
(2 rows)

ALTER TABLE test_alter_partition_autoinc AUTO_INCREMENT = 1000;
INSERT INTO test_alter_partition_autoinc VALUES(3001,3001,DEFAULT);
SELECT col1, col2, col3 FROM test_alter_partition_autoinc ORDER BY 1, 2;
 col1 | col2 | col3 
------+------+------
  100 |    1 |    1
  101 | 2001 | 2001
 1000 | 3001 | 3001
(3 rows)

TRUNCATE TABLE test_alter_partition_autoinc;
INSERT INTO test_alter_partition_autoinc VALUES(1,1,DEFAULT);
SELECT col1, col2, col3 FROM test_alter_partition_autoinc ORDER BY 1, 2;
 col1 | col2 | col3 
------+------+------
    1 |    1 |    1
(1 row)

DROP TABLE test_alter_partition_autoinc;
-- test alter table add column, add/drop index
CREATE TABLE test_alter_autoinc(
    a int,
    b varchar(32)
);
ALTER TABLE test_alter_autoinc ADD COLUMN seq int AUTO_INCREMENT, ADD CONSTRAINT test_alter_autoinc_uk UNIQUE (a, seq); -- ERROR
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_seq_seq" for serial column "test_alter_autoinc.seq"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_uk" for table "test_alter_autoinc"
ERROR:  auto_increment column must be defined as a unique or primary key
ALTER TABLE test_alter_autoinc ADD COLUMN seq int AUTO_INCREMENT, ADD CONSTRAINT test_alter_autoinc_uk UNIQUE (seq);
NOTICE:  ALTER TABLE will create implicit sequence "test_alter_autoinc_seq_seq" for serial column "test_alter_autoinc.seq"
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_autoinc_uk" for table "test_alter_autoinc"
CREATE INDEX test_alter_autoinc_idx1 ON test_alter_autoinc (seq,a);
SELECT pg_get_tabledef('test_alter_autoinc'::regclass);
                                            pg_get_tabledef                                             
--------------------------------------------------------------------------------------------------------
 SET search_path = public;                                                                             +
 CREATE TABLE test_alter_autoinc (                                                                     +
     a integer,                                                                                        +
     b character varying(32),                                                                          +
     seq integer AUTO_INCREMENT NOT NULL,                                                              +
     CONSTRAINT test_alter_autoinc_uk UNIQUE (seq)                                                     +
 ) AUTO_INCREMENT = 1                                                                                  +
 WITH (orientation=row, compression=no);                                                               +
 CREATE INDEX test_alter_autoinc_idx1 ON test_alter_autoinc USING btree (seq, a) TABLESPACE pg_default;
(1 row)

ALTER TABLE test_alter_autoinc DROP CONSTRAINT test_alter_autoinc_uk; -- ERROR
ERROR:  auto_increment column must be defined as a unique or primary key
DROP INDEX test_alter_autoinc_idx1;
ALTER TABLE test_alter_autoinc DROP CONSTRAINT test_alter_autoinc_uk, ADD CONSTRAINT test_alter_autoinc_pk PRIMARY KEY (seq);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "test_alter_autoinc_pk" for table "test_alter_autoinc"
ALTER TABLE test_alter_autoinc DROP CONSTRAINT test_alter_autoinc_pk; -- ERROR
ERROR:  auto_increment column must be defined as a unique or primary key
DROP TABLE test_alter_autoinc;
-- auto_increment in table with single column PRIMARY KEY
CREATE TABLE single_autoinc_pk(col int auto_increment PRIMARY KEY) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "single_autoinc_pk_col_seq" for serial column "single_autoinc_pk.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "single_autoinc_pk_pkey" for table "single_autoinc_pk"
INSERT INTO single_autoinc_pk VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

INSERT INTO single_autoinc_pk VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

INSERT INTO single_autoinc_pk VALUES(100);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

INSERT INTO single_autoinc_pk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE single_autoinc_pk AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO single_autoinc_pk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM single_autoinc_pk ORDER BY 1;
 col  
------
   10
   11
  100
  101
 1000
(5 rows)

UPDATE single_autoinc_pk SET col=NULL WHERE col=10;
ERROR:  null value in column "col" violates not-null constraint
DETAIL:  Failing row contains (null).
UPDATE single_autoinc_pk SET col=0 WHERE col=11;
SELECT col FROM single_autoinc_pk ORDER BY 1;
 col  
------
    0
   10
  100
  101
 1000
(5 rows)

UPDATE single_autoinc_pk SET col=DEFAULT WHERE col=100;
ERROR:  duplicate key value violates unique constraint "single_autoinc_pk_pkey"
DETAIL:  Key (col)=(0) already exists.
UPDATE single_autoinc_pk SET col=3000 WHERE col=0;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

INSERT INTO single_autoinc_pk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM single_autoinc_pk ORDER BY 1;
 col  
------
   10
  100
  101
 1000
 3000
 3001
(6 rows)

SELECT pg_catalog.pg_get_tabledef('single_autoinc_pk');
                     pg_get_tabledef                     
---------------------------------------------------------
 SET search_path = public;                              +
 CREATE TABLE single_autoinc_pk (                       +
     col integer AUTO_INCREMENT NOT NULL,               +
     CONSTRAINT single_autoinc_pk_pkey PRIMARY KEY (col)+
 ) AUTO_INCREMENT = 3002                                +
 WITH (orientation=row, compression=no);
(1 row)

ALTER TABLE single_autoinc_pk ADD CONSTRAINT test_alter_single_autoinc_pk_u1 UNIQUE(col);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_single_autoinc_pk_u1" for table "single_autoinc_pk"
ALTER TABLE single_autoinc_pk ADD CONSTRAINT test_alter_single_autoinc_pk_u2 UNIQUE(col);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "test_alter_single_autoinc_pk_u2" for table "single_autoinc_pk"
SELECT pg_catalog.pg_get_tabledef('single_autoinc_pk');
                                            pg_get_tabledef                                             
--------------------------------------------------------------------------------------------------------
 SET search_path = public;                                                                             +
 CREATE TABLE single_autoinc_pk (                                                                      +
     col integer AUTO_INCREMENT NOT NULL,                                                              +
     CONSTRAINT test_alter_single_autoinc_pk_u2 UNIQUE (col)                                           +
 ) AUTO_INCREMENT = 3002                                                                               +
 WITH (orientation=row, compression=no);                                                               +
 ALTER TABLE single_autoinc_pk ADD CONSTRAINT test_alter_single_autoinc_pk_u1 UNIQUE USING btree (col);+
 ALTER TABLE single_autoinc_pk ADD CONSTRAINT single_autoinc_pk_pkey PRIMARY KEY USING btree  (col);
(1 row)

ALTER TABLE single_autoinc_pk DROP CONSTRAINT test_alter_single_autoinc_pk_u2;
SELECT pg_catalog.pg_get_tabledef('single_autoinc_pk');
                                           pg_get_tabledef                                           
-----------------------------------------------------------------------------------------------------
 SET search_path = public;                                                                          +
 CREATE TABLE single_autoinc_pk (                                                                   +
     col integer AUTO_INCREMENT NOT NULL,                                                           +
     CONSTRAINT test_alter_single_autoinc_pk_u1 UNIQUE (col)                                        +
 ) AUTO_INCREMENT = 3002                                                                            +
 WITH (orientation=row, compression=no);                                                            +
 ALTER TABLE single_autoinc_pk ADD CONSTRAINT single_autoinc_pk_pkey PRIMARY KEY USING btree  (col);
(1 row)

DROP TABLE single_autoinc_pk;
-- auto_increment in table with single column NULL UNIQUE
CREATE TABLE single_autoinc_uk(col int auto_increment NULL UNIQUE) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "single_autoinc_uk_col_seq" for serial column "single_autoinc_uk.col"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "single_autoinc_uk_col_key" for table "single_autoinc_uk"
INSERT INTO single_autoinc_uk VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
    
(1 row)

INSERT INTO single_autoinc_uk VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
    
(2 rows)

INSERT INTO single_autoinc_uk VALUES(100);
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
 100
    
(3 rows)

INSERT INTO single_autoinc_uk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
 100
    
    
(4 rows)

ALTER TABLE single_autoinc_uk AUTO_INCREMENT = 1000;
INSERT INTO single_autoinc_uk VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
   11
  100
 1000
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=NULL WHERE col=11;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
  100
 1000
     
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=0 WHERE col=100;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
    0
 1000
     
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=DEFAULT WHERE col=1000;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
   0
    
    
    
    
(5 rows)

UPDATE single_autoinc_uk SET col=3000 WHERE col=0;
INSERT INTO single_autoinc_uk VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
 3000
 3001
     
     
     
     
(6 rows)

SELECT pg_catalog.pg_get_tabledef('single_autoinc_uk');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE single_autoinc_uk (                     +
     col integer AUTO_INCREMENT,                      +
     CONSTRAINT single_autoinc_uk_col_key UNIQUE (col)+
 ) AUTO_INCREMENT = 3002                              +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE single_autoinc_uk;
-- auto_increment in table with single column NULL auto_increment UNIQUE
CREATE TABLE single_autoinc_uk(col int NULL auto_increment UNIQUE KEY) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "single_autoinc_uk_col_seq" for serial column "single_autoinc_uk.col"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "single_autoinc_uk_col_key" for table "single_autoinc_uk"
INSERT INTO single_autoinc_uk VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
(1 row)

INSERT INTO single_autoinc_uk VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
(2 rows)

INSERT INTO single_autoinc_uk VALUES(100);
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
 100
(3 rows)

INSERT INTO single_autoinc_uk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
 100
 101
(4 rows)

SELECT pg_catalog.pg_get_tabledef('single_autoinc_uk');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE single_autoinc_uk (                     +
     col integer AUTO_INCREMENT NOT NULL,             +
     CONSTRAINT single_autoinc_uk_col_key UNIQUE (col)+
 ) AUTO_INCREMENT = 102                               +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE single_autoinc_uk;
-- auto_increment in table with single column auto_increment UNIQUE
CREATE TABLE single_autoinc_uk(col int auto_increment UNIQUE KEY) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "single_autoinc_uk_col_seq" for serial column "single_autoinc_uk.col"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "single_autoinc_uk_col_key" for table "single_autoinc_uk"
INSERT INTO single_autoinc_uk VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
(1 row)

INSERT INTO single_autoinc_uk VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
(2 rows)

INSERT INTO single_autoinc_uk VALUES(100);
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
 100
(3 rows)

INSERT INTO single_autoinc_uk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  10
  11
 100
 101
(4 rows)

SELECT pg_catalog.pg_get_tabledef('single_autoinc_uk');
                    pg_get_tabledef                    
-------------------------------------------------------
 SET search_path = public;                            +
 CREATE TABLE single_autoinc_uk (                     +
     col integer AUTO_INCREMENT NOT NULL,             +
     CONSTRAINT single_autoinc_uk_col_key UNIQUE (col)+
 ) AUTO_INCREMENT = 102                               +
 WITH (orientation=row, compression=no);
(1 row)

DROP TABLE single_autoinc_uk;
-- test auto_increment with rollback
CREATE TABLE single_autoinc_rollback(col int auto_increment PRIMARY KEY) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "single_autoinc_rollback_col_seq" for serial column "single_autoinc_rollback.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "single_autoinc_rollback_pkey" for table "single_autoinc_rollback"
begin transaction;
INSERT INTO single_autoinc_rollback VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col 
-----
  10
(1 row)

rollback;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col 
-----
(0 rows)

begin transaction;
INSERT INTO single_autoinc_rollback VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col 
-----
  11
(1 row)

commit;
begin transaction;
INSERT INTO single_autoinc_rollback VALUES(4000);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col  
------
   11
 4000
(2 rows)

rollback;
SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col 
-----
  11
(1 row)

begin transaction;
INSERT INTO single_autoinc_rollback VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           4001
(1 row)

SELECT col FROM single_autoinc_rollback ORDER BY 1;
 col  
------
   11
 4001
(2 rows)

commit;
DROP TABLE single_autoinc_rollback;
--test auto_increment if duplcate key error
create table test_autoinc_duplicate_err
(
    id     int auto_increment primary key,
    gender int         null,
    name   varchar(50) null,
    unique (gender,name)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_duplicate_err_id_seq" for serial column "test_autoinc_duplicate_err.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_duplicate_err_pkey" for table "test_autoinc_duplicate_err"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_duplicate_err_gender_name_key" for table "test_autoinc_duplicate_err"
insert into test_autoinc_duplicate_err (gender,name) values (1,'Gauss');
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

insert into test_autoinc_duplicate_err (gender,name) values (1,'Gauss');
ERROR:  duplicate key value violates unique constraint "test_autoinc_duplicate_err_gender_name_key"
DETAIL:  Key (gender, name)=(1, Gauss) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

insert into test_autoinc_duplicate_err (gender,name) values (1,'Euler');
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              3
(1 row)

select * from test_autoinc_duplicate_err order by id;
 id | gender | name  
----+--------+-------
  1 |      1 | Gauss
  3 |      1 | Euler
(2 rows)

insert into test_autoinc_duplicate_err (id,gender,name) values (10,1,'Gauss');
ERROR:  duplicate key value violates unique constraint "test_autoinc_duplicate_err_gender_name_key"
DETAIL:  Key (gender, name)=(1, Gauss) already exists.
select * from test_autoinc_duplicate_err order by id;
 id | gender | name  
----+--------+-------
  1 |      1 | Gauss
  3 |      1 | Euler
(2 rows)

insert into test_autoinc_duplicate_err (gender,name) values (1,'Newton');
select * from test_autoinc_duplicate_err order by id;
 id | gender |  name  
----+--------+--------
  1 |      1 | Gauss
  3 |      1 | Euler
  4 |      1 | Newton
(3 rows)

drop table test_autoinc_duplicate_err;
--test auto_increment with check error
CREATE TABLE test_autoinc_with_check(
    col1 int auto_increment primary key, col2 int, CHECK (col2 >0)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_with_check_col1_seq" for serial column "test_autoinc_with_check.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_with_check_pkey" for table "test_autoinc_with_check"
INSERT INTO test_autoinc_with_check VALUES(DEFAULT, 1);
INSERT INTO test_autoinc_with_check VALUES(DEFAULT, -1);
ERROR:  new row for relation "test_autoinc_with_check" violates check constraint "test_autoinc_with_check_col2_check"
DETAIL:  N/A
INSERT INTO test_autoinc_with_check VALUES(DEFAULT, 2);
SELECT col1,col2 FROM test_autoinc_with_check ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    2
(2 rows)

DROP TABLE test_autoinc_with_check;
--test auto_increment with trigger
create table test_autoinc_trigger
(
    id     int auto_increment primary key,
    gender int         null,
    name   varchar(50) null,
    unique (gender,name)
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_trigger_id_seq" for serial column "test_autoinc_trigger.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_trigger_pkey" for table "test_autoinc_trigger"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_trigger_gender_name_key" for table "test_autoinc_trigger"
insert into test_autoinc_trigger (gender,name) values (1,'Gauss');
insert into test_autoinc_trigger (gender,name) values (1,'Euler');
select * from test_autoinc_trigger order by id;
 id | gender | name  
----+--------+-------
  1 |      1 | Gauss
  2 |      1 | Euler
(2 rows)

CREATE OR REPLACE FUNCTION tg_bf_insert_autoinc_func() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
    update test_autoinc_trigger set id= 3 where name='Gauss';
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER tg_bf_insert_autoinc
BEFORE INSERT ON test_autoinc_trigger
FOR EACH ROW
EXECUTE PROCEDURE tg_bf_insert_autoinc_func();
insert into test_autoinc_trigger (gender, name) values (1,'Newton');
select * from test_autoinc_trigger order by id;
 id | gender |  name  
----+--------+--------
  2 |      1 | Euler
  3 |      1 | Gauss
  4 |      1 | Newton
(3 rows)

drop trigger tg_bf_insert_autoinc ON test_autoinc_trigger;
drop FUNCTION tg_bf_insert_autoinc_func;
create table tmp_tg_table(tmp_gender int UNIQUE);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tmp_tg_table_tmp_gender_key" for table "tmp_tg_table"
CREATE OR REPLACE FUNCTION tg_bf_insert_autoinc_func() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
    insert into test_autoinc_trigger (gender,name) values (new.tmp_gender,'Fields');
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER tg_bf_insert_autoinc
BEFORE INSERT ON tmp_tg_table
FOR EACH ROW
EXECUTE PROCEDURE tg_bf_insert_autoinc_func();
insert into tmp_tg_table values(1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              5
(1 row)

select * from test_autoinc_trigger order by id;
 id | gender |  name  
----+--------+--------
  2 |      1 | Euler
  3 |      1 | Gauss
  4 |      1 | Newton
  5 |      1 | Fields
(4 rows)

insert into test_autoinc_trigger (gender,name) values (1,'Turing');
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

select * from test_autoinc_trigger order by id;
 id | gender |  name  
----+--------+--------
  2 |      1 | Euler
  3 |      1 | Gauss
  4 |      1 | Newton
  5 |      1 | Fields
  6 |      1 | Turing
(5 rows)

drop trigger tg_bf_insert_autoinc ON tmp_tg_table;
drop FUNCTION tg_bf_insert_autoinc_func;
CREATE OR REPLACE FUNCTION tg_af_insert_autoinc_func() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
    insert into tmp_tg_table values (1);
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER tg_af_insert_autoinc
AFTER INSERT ON test_autoinc_trigger
FOR EACH ROW
EXECUTE PROCEDURE tg_af_insert_autoinc_func();
insert into test_autoinc_trigger (id,gender,name) values (100,1,'Shannon');
ERROR:  duplicate key value violates unique constraint "tmp_tg_table_tmp_gender_key"
DETAIL:  Key (tmp_gender)=(1) already exists.
CONTEXT:  SQL statement "insert into tmp_tg_table values (1)"
PL/pgSQL function tg_af_insert_autoinc_func() line 4 at SQL statement
select * from test_autoinc_trigger order by id;
 id | gender |  name  
----+--------+--------
  2 |      1 | Euler
  3 |      1 | Gauss
  4 |      1 | Newton
  5 |      1 | Fields
  6 |      1 | Turing
(5 rows)

drop trigger tg_af_insert_autoinc ON test_autoinc_trigger;
drop FUNCTION tg_af_insert_autoinc_func;
insert into test_autoinc_trigger (gender,name) values (1,'Fermat');
select * from test_autoinc_trigger order by id;
 id  | gender |  name  
-----+--------+--------
   2 |      1 | Euler
   3 |      1 | Gauss
   4 |      1 | Newton
   5 |      1 | Fields
   6 |      1 | Turing
 101 |      1 | Fermat
(6 rows)

drop table tmp_tg_table;
drop table test_autoinc_trigger;
-- auto_increment in ustore table PRIMARY KEY
CREATE TABLE ustore_single_autoinc(col int auto_increment PRIMARY KEY) WITH (STORAGE_TYPE=USTORE);
NOTICE:  CREATE TABLE will create implicit sequence "ustore_single_autoinc_col_seq" for serial column "ustore_single_autoinc.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ustore_single_autoinc_pkey" for table "ustore_single_autoinc"
INSERT INTO ustore_single_autoinc VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO ustore_single_autoinc VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO ustore_single_autoinc VALUES(100);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO ustore_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE ustore_single_autoinc AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO ustore_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
(5 rows)

INSERT INTO ustore_single_autoinc select col-col from ustore_single_autoinc;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
 1001
 1002
 1003
 1004
 1005
(10 rows)

INSERT INTO ustore_single_autoinc VALUES(500);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO ustore_single_autoinc VALUES(-1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO ustore_single_autoinc VALUES(2100), (NULL), (2000), (DEFAULT), (2200), (NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE ustore_single_autoinc SET col=NULL WHERE col=2201;
ERROR:  null value in column "col" violates not-null constraint
DETAIL:  Failing row contains (null).
SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE ustore_single_autoinc SET col=0 WHERE col=2200;
SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
   -1
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
(18 rows)

UPDATE ustore_single_autoinc SET col=DEFAULT WHERE col=2101;
ERROR:  duplicate key value violates unique constraint "ustore_single_autoinc_pkey"
DETAIL:  Key (col)=(0) already exists.
UPDATE ustore_single_autoinc SET col=3000 WHERE col=-1;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO ustore_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
(19 rows)

COPY ustore_single_autoinc (col) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
 3002
 3003
 3004
(22 rows)

SELECT pg_catalog.pg_get_tabledef('ustore_single_autoinc');
                       pg_get_tabledef                        
--------------------------------------------------------------
 SET search_path = public;                                   +
 CREATE TABLE ustore_single_autoinc (                        +
     col integer AUTO_INCREMENT NOT NULL,                    +
     CONSTRAINT ustore_single_autoinc_pkey PRIMARY KEY (col) +
 ) AUTO_INCREMENT = 3005                                     +
 WITH (orientation=row, storage_type=ustore, compression=no);
(1 row)

TRUNCATE TABLE ustore_single_autoinc;
INSERT INTO ustore_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col FROM ustore_single_autoinc ORDER BY 1;
 col 
-----
   1
(1 row)

DROP TABLE ustore_single_autoinc;
-- auto_increment in local temp table PRIMARY KEY
CREATE TEMPORARY TABLE ltemp_single_autoinc(col int auto_increment PRIMARY KEY);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ltemp_single_autoinc_pkey" for table "ltemp_single_autoinc"
INSERT INTO ltemp_single_autoinc VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(100);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE ltemp_single_autoinc AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
(5 rows)

INSERT INTO ltemp_single_autoinc select col-col from ltemp_single_autoinc;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
 1001
 1002
 1003
 1004
 1005
(10 rows)

INSERT INTO ltemp_single_autoinc VALUES(500);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(-1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(2100), (NULL), (2000), (DEFAULT), (2200), (NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE ltemp_single_autoinc SET col=NULL WHERE col=2201;
ERROR:  null value in column "col" violates not-null constraint
DETAIL:  Failing row contains (null).
SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE ltemp_single_autoinc SET col=0 WHERE col=2200;
SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
(18 rows)

UPDATE ltemp_single_autoinc SET col=DEFAULT WHERE col=2101;
ERROR:  duplicate key value violates unique constraint "ltemp_single_autoinc_pkey"
DETAIL:  Key (col)=(0) already exists.
UPDATE ltemp_single_autoinc SET col=3000 WHERE col=-1;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO ltemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
(19 rows)

COPY ltemp_single_autoinc (col) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
 3002
 3003
 3004
(22 rows)

SELECT pg_catalog.pg_get_tabledef('ltemp_single_autoinc');
ERROR:  Can not get temporary tables defination.
CONTEXT:  referenced column: pg_get_tabledef
TRUNCATE TABLE ltemp_single_autoinc;
INSERT INTO ltemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col FROM ltemp_single_autoinc ORDER BY 1;
 col 
-----
   1
(1 row)

DROP TABLE ltemp_single_autoinc;
-- auto_increment in local temp table NULL UNIQUE
CREATE TEMPORARY TABLE single_autoinc_uk(col int auto_increment NULL UNIQUE) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "single_autoinc_uk_col_key" for table "single_autoinc_uk"
INSERT INTO single_autoinc_uk VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
    
(1 row)

INSERT INTO single_autoinc_uk VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
    
(2 rows)

INSERT INTO single_autoinc_uk VALUES(100);
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
 100
    
(3 rows)

INSERT INTO single_autoinc_uk VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
  11
 100
    
    
(4 rows)

ALTER TABLE single_autoinc_uk AUTO_INCREMENT = 1000;
INSERT INTO single_autoinc_uk VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
   11
  100
 1000
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=NULL WHERE col=11;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
  100
 1000
     
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=0 WHERE col=100;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
    0
 1000
     
     
     
(5 rows)

UPDATE single_autoinc_uk SET col=DEFAULT WHERE col=1000;
SELECT col FROM single_autoinc_uk ORDER BY 1;
 col 
-----
   0
    
    
    
    
(5 rows)

UPDATE single_autoinc_uk SET col=3000 WHERE col=0;
INSERT INTO single_autoinc_uk VALUES(0);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM single_autoinc_uk ORDER BY 1;
 col  
------
 3000
 3001
     
     
     
     
(6 rows)

SELECT pg_catalog.pg_get_tabledef('single_autoinc_uk');
ERROR:  Can not get temporary tables defination.
CONTEXT:  referenced column: pg_get_tabledef
DROP TABLE single_autoinc_uk;
--auto_increment in global temp table
CREATE GLOBAL TEMPORARY TABLE gtemp_single_autoinc(col int auto_increment PRIMARY KEY);
NOTICE:  CREATE TABLE will create implicit sequence "gtemp_single_autoinc_col_seq" for serial column "gtemp_single_autoinc.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gtemp_single_autoinc_pkey" for table "gtemp_single_autoinc"
INSERT INTO gtemp_single_autoinc VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(100);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE gtemp_single_autoinc AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
(5 rows)

INSERT INTO gtemp_single_autoinc select col-col from gtemp_single_autoinc;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
 1001
 1002
 1003
 1004
 1005
(10 rows)

INSERT INTO gtemp_single_autoinc VALUES(500);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(-1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(2100), (NULL), (2000), (DEFAULT), (2200), (NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE gtemp_single_autoinc SET col=NULL WHERE col=2201;
ERROR:  null value in column "col" violates not-null constraint
DETAIL:  Failing row contains (null).
SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE gtemp_single_autoinc SET col=0 WHERE col=2200;
SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
   -1
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
(18 rows)

UPDATE gtemp_single_autoinc SET col=DEFAULT WHERE col=2101;
ERROR:  duplicate key value violates unique constraint "gtemp_single_autoinc_pkey"
DETAIL:  Key (col)=(0) already exists.
UPDATE gtemp_single_autoinc SET col=3000 WHERE col=-1;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO gtemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
(19 rows)

COPY gtemp_single_autoinc (col) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
 3002
 3003
 3004
(22 rows)

SELECT pg_catalog.pg_get_tabledef('gtemp_single_autoinc');
                           pg_get_tabledef                            
----------------------------------------------------------------------
 SET search_path = public;                                           +
 CREATE GLOBAL TEMPORARY TABLE gtemp_single_autoinc (                +
     col integer AUTO_INCREMENT NOT NULL,                            +
     CONSTRAINT gtemp_single_autoinc_pkey PRIMARY KEY (col)          +
 ) AUTO_INCREMENT = 3005                                             +
 WITH (orientation=row, compression=no, on_commit_delete_rows=false);
(1 row)

TRUNCATE TABLE gtemp_single_autoinc;
INSERT INTO gtemp_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col FROM gtemp_single_autoinc ORDER BY 1;
 col 
-----
   1
(1 row)

DROP TABLE gtemp_single_autoinc;
--auto_increment in unlogged table
CREATE UNLOGGED TABLE unlog_single_autoinc(col int auto_increment PRIMARY KEY);
NOTICE:  CREATE TABLE will create implicit sequence "unlog_single_autoinc_col_seq" for serial column "unlog_single_autoinc.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "unlog_single_autoinc_pkey" for table "unlog_single_autoinc"
INSERT INTO unlog_single_autoinc VALUES(NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO unlog_single_autoinc VALUES(1 - 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO unlog_single_autoinc VALUES(100);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO unlog_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE unlog_single_autoinc AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO unlog_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
(5 rows)

INSERT INTO unlog_single_autoinc select col-col from unlog_single_autoinc;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
    1
    2
  100
  101
 1000
 1001
 1002
 1003
 1004
 1005
(10 rows)

INSERT INTO unlog_single_autoinc VALUES(500);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO unlog_single_autoinc VALUES(-1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO unlog_single_autoinc VALUES(2100), (NULL), (2000), (DEFAULT), (2200), (NULL);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE unlog_single_autoinc SET col=NULL WHERE col=2201;
ERROR:  null value in column "col" violates not-null constraint
DETAIL:  Failing row contains (null).
SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE unlog_single_autoinc SET col=0 WHERE col=2200;
SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
   -1
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
(18 rows)

UPDATE unlog_single_autoinc SET col=DEFAULT WHERE col=2101;
ERROR:  duplicate key value violates unique constraint "unlog_single_autoinc_pkey"
DETAIL:  Key (col)=(0) already exists.
UPDATE unlog_single_autoinc SET col=3000 WHERE col=-1;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO unlog_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
(19 rows)

COPY unlog_single_autoinc (col) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col  
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
 3002
 3003
 3004
(22 rows)

SELECT pg_catalog.pg_get_tabledef('unlog_single_autoinc');
                      pg_get_tabledef                       
------------------------------------------------------------
 SET search_path = public;                                 +
 CREATE UNLOGGED TABLE unlog_single_autoinc (              +
     col integer AUTO_INCREMENT NOT NULL,                  +
     CONSTRAINT unlog_single_autoinc_pkey PRIMARY KEY (col)+
 ) AUTO_INCREMENT = 3005                                   +
 WITH (orientation=row, compression=no);
(1 row)

TRUNCATE TABLE unlog_single_autoinc;
INSERT INTO unlog_single_autoinc VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col FROM unlog_single_autoinc ORDER BY 1;
 col 
-----
   1
(1 row)

DROP TABLE unlog_single_autoinc;
--auto_increment column as partkey primary key
CREATE TABLE test_part_autoinc_pk (
	col1 INT AUTO_INCREMENT,
    col2 INT NOT NULL,
    col3 INT NOT NULL,
    PRIMARY KEY(col1, col2)
) PARTITION BY RANGE (col1) SUBPARTITION BY HASH (col2) (
    PARTITION col1_less_1000 VALUES LESS THAN(1000)
    (
        SUBPARTITION p1_col2_hash1,
        SUBPARTITION p1_col2_hash2
    ),
    PARTITION col1_mid_1000 VALUES LESS THAN(2000)
    (
        SUBPARTITION p2_col2_hash1,
        SUBPARTITION p2_col2_hash2
    ),
    PARTITION col1_greater_2000 VALUES LESS THAN (MAXVALUE)
    (
        SUBPARTITION p3_col2_hash1,
        SUBPARTITION p3_col2_hash2
    )
);
NOTICE:  CREATE TABLE will create implicit sequence "test_part_autoinc_pk_col1_seq" for serial column "test_part_autoinc_pk.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_part_autoinc_pk_pkey" for table "test_part_autoinc_pk"
INSERT INTO test_part_autoinc_pk VALUES(NULL, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(1 - 1, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(100, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(DEFAULT, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

ALTER TABLE test_part_autoinc_pk AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(DEFAULT, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
    1
    2
  100
  101
 1000
(5 rows)

INSERT INTO test_part_autoinc_pk select col1-col1, col2, col3 from test_part_autoinc_pk;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
    1
    2
  100
  101
 1000
 1001
 1002
 1003
 1004
 1005
(10 rows)

INSERT INTO test_part_autoinc_pk VALUES(500, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(-1, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(2100, 1, 1), (NULL, 1, 1), (2000, 1, 1), (DEFAULT, 1, 1), (2200, 1, 1), (NULL, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE test_part_autoinc_pk SET col1=NULL WHERE col1=2201;
ERROR:  null value in column "col1" violates not-null constraint
DETAIL:  Failing row contains (null, 1, 1).
SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
   -1
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2200
 2201
(18 rows)

UPDATE test_part_autoinc_pk SET col1=0 WHERE col1=2200;
SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
   -1
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
(18 rows)

UPDATE test_part_autoinc_pk SET col1=DEFAULT WHERE col1=2101;
ERROR:  duplicate key value violates unique constraint "test_part_autoinc_pk_pkey"
DETAIL:  Key (col1, col2)=(0, 1) already exists.
UPDATE test_part_autoinc_pk SET col1=3000 WHERE col1=-1;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO test_part_autoinc_pk VALUES(DEFAULT, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
    0
    1
    2
  100
  101
  500
 1000
 1001
 1002
 1003
 1004
 1005
 2000
 2100
 2101
 2102
 2201
 3000
 3001
(19 rows)

COPY test_part_autoinc_pk (col1,col2,col3) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           3001
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
    0
    1
    2
  100
  101
  500
  999
 1000
 1001
 1002
 1003
 1004
 1005
 1999
 2000
 2100
 2101
 2102
 2201
 3000
 3001
 3003
 3004
(23 rows)

SELECT pg_catalog.pg_get_tabledef('test_part_autoinc_pk');
                          pg_get_tabledef                          
-------------------------------------------------------------------
 SET search_path = public;                                        +
 CREATE TABLE test_part_autoinc_pk (                              +
     col1 integer AUTO_INCREMENT NOT NULL,                        +
     col2 integer NOT NULL,                                       +
     col3 integer NOT NULL,                                       +
     CONSTRAINT test_part_autoinc_pk_pkey PRIMARY KEY (col1, col2)+
 ) AUTO_INCREMENT = 3005                                          +
 WITH (orientation=row, compression=no)                           +
 PARTITION BY RANGE (col1) SUBPARTITION BY HASH (col2)            +
 (                                                                +
     PARTITION col1_less_1000 VALUES LESS THAN (1000)             +
     (                                                            +
         SUBPARTITION p1_col2_hash1,                              +
         SUBPARTITION p1_col2_hash2                               +
     ),                                                           +
     PARTITION col1_mid_1000 VALUES LESS THAN (2000)              +
     (                                                            +
         SUBPARTITION p2_col2_hash1,                              +
         SUBPARTITION p2_col2_hash2                               +
     ),                                                           +
     PARTITION col1_greater_2000 VALUES LESS THAN (MAXVALUE)      +
     (                                                            +
         SUBPARTITION p3_col2_hash1,                              +
         SUBPARTITION p3_col2_hash2                               +
     )                                                            +
 )                                                                +
 ENABLE ROW MOVEMENT;
(1 row)

TRUNCATE TABLE test_part_autoinc_pk;
INSERT INTO test_part_autoinc_pk VALUES(DEFAULT, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1 FROM test_part_autoinc_pk ORDER BY 1;
 col1 
------
    1
(1 row)

DROP TABLE test_part_autoinc_pk;
--auto_increment column as unique key not partkey
CREATE TABLE test_part_autoinc_unique (
	col1 INT AUTO_INCREMENT NULL,
    col2 INT NOT NULL,
    col3 INT NOT NULL,
    UNIQUE(col1, col2, col3)
) PARTITION BY RANGE (col2) SUBPARTITION BY HASH (col3) (
    PARTITION col1_less_1000 VALUES LESS THAN(1000)
    (
        SUBPARTITION p1_col2_hash1,
        SUBPARTITION p1_col2_hash2
    ),
    PARTITION col1_mid_1000 VALUES LESS THAN(2000)
    (
        SUBPARTITION p2_col2_hash1,
        SUBPARTITION p2_col2_hash2
    ),
    PARTITION col1_greater_2000 VALUES LESS THAN (MAXVALUE)
    (
        SUBPARTITION p3_col2_hash1,
        SUBPARTITION p3_col2_hash2
    )
);
NOTICE:  CREATE TABLE will create implicit sequence "test_part_autoinc_unique_col1_seq" for serial column "test_part_autoinc_unique.col1"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_part_autoinc_unique_col1_col2_col3_key" for table "test_part_autoinc_unique"
INSERT INTO test_part_autoinc_unique VALUES(NULL, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(1 - 1, 1001, 1001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(100, 2001, 2001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

INSERT INTO test_part_autoinc_unique(col2,col3) VALUES(2001, 2001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
    2
  100
     
     
(4 rows)

ALTER TABLE test_part_autoinc_unique AUTO_INCREMENT = 1000;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(0, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1000
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
    2
  100
 1000
     
     
(5 rows)

INSERT INTO test_part_autoinc_unique select col1-col1, col2, col3 from test_part_autoinc_unique order by 1 NULLS FIRST;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
    2
  100
 1000
 1003
 1004
 1005
     
     
     
     
(10 rows)

INSERT INTO test_part_autoinc_unique VALUES(500, 1001, 1001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(-1, 2001, 2001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           1001
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(2100, 1, 1), (0, 1001, 1001), (2000, 2001, 2001), (NULL, 1, 1), (2200, 1001, 1001), (0, 2001, 2001);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
   -1
    2
  100
  500
 1000
 1003
 1004
 1005
 2000
 2100
 2101
 2200
 2201
     
     
     
     
     
(18 rows)

UPDATE test_part_autoinc_unique SET col1=NULL WHERE col1=2201;
SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
   -1
    2
  100
  500
 1000
 1003
 1004
 1005
 2000
 2100
 2101
 2200
     
     
     
     
     
     
(18 rows)

UPDATE test_part_autoinc_unique SET col1=0 WHERE col1=2200;
SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
   -1
    0
    2
  100
  500
 1000
 1003
 1004
 1005
 2000
 2100
 2101
     
     
     
     
     
     
(18 rows)

UPDATE test_part_autoinc_unique SET col1=DEFAULT WHERE col1=2101;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2101
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(0, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2202
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
   -1
    0
    2
  100
  500
 1000
 1003
 1004
 1005
 2000
 2100
 2202
     
     
     
     
     
     
     
(19 rows)

COPY test_part_autoinc_unique (col1,col2,col3) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
           2202
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
   -1
    0
    2
  100
  500
  999
 1000
 1003
 1004
 1005
 1999
 2000
 2100
 2202
 3003
 3004
     
     
     
     
     
     
     
(23 rows)

SELECT pg_catalog.pg_get_tabledef('test_part_autoinc_unique');
                                   pg_get_tabledef                                    
--------------------------------------------------------------------------------------
 SET search_path = public;                                                           +
 CREATE TABLE test_part_autoinc_unique (                                             +
     col1 integer AUTO_INCREMENT,                                                    +
     col2 integer NOT NULL,                                                          +
     col3 integer NOT NULL,                                                          +
     CONSTRAINT test_part_autoinc_unique_col1_col2_col3_key UNIQUE (col1, col2, col3)+
 ) AUTO_INCREMENT = 3005                                                             +
 WITH (orientation=row, compression=no)                                              +
 PARTITION BY RANGE (col2) SUBPARTITION BY HASH (col3)                               +
 (                                                                                   +
     PARTITION col1_less_1000 VALUES LESS THAN (1000)                                +
     (                                                                               +
         SUBPARTITION p1_col2_hash1,                                                 +
         SUBPARTITION p1_col2_hash2                                                  +
     ),                                                                              +
     PARTITION col1_mid_1000 VALUES LESS THAN (2000)                                 +
     (                                                                               +
         SUBPARTITION p2_col2_hash1,                                                 +
         SUBPARTITION p2_col2_hash2                                                  +
     ),                                                                              +
     PARTITION col1_greater_2000 VALUES LESS THAN (MAXVALUE)                         +
     (                                                                               +
         SUBPARTITION p3_col2_hash1,                                                 +
         SUBPARTITION p3_col2_hash2                                                  +
     )                                                                               +
 )                                                                                   +
 ENABLE ROW MOVEMENT;
(1 row)

TRUNCATE TABLE test_part_autoinc_unique;
INSERT INTO test_part_autoinc_unique VALUES(DEFAULT, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
     
(1 row)

INSERT INTO test_part_autoinc_unique VALUES(0, 1, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              2
(1 row)

SELECT col1 FROM test_part_autoinc_unique ORDER BY 1;
 col1 
------
    2
     
(2 rows)

DROP TABLE test_part_autoinc_unique;
--test insert into on duplicate AND merge into
CREATE TABLE test_autoinc_upsert(col int auto_increment UNIQUE, col1 INT);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_upsert_col_seq" for serial column "test_autoinc_upsert.col"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_col_key" for table "test_autoinc_upsert"
CREATE TABLE test_autoinc_merge(col int auto_increment UNIQUE, col1 INT);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_merge_col_seq" for serial column "test_autoinc_merge.col"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_merge_col_key" for table "test_autoinc_merge"
--insert test_autoinc_upsert
INSERT INTO test_autoinc_upsert VALUES(DEFAULT,0) ON DUPLICATE KEY UPDATE col1=col;
INSERT INTO test_autoinc_upsert VALUES(1,0) ON DUPLICATE KEY UPDATE col1=col;
INSERT INTO test_autoinc_upsert VALUES(2,0) ON DUPLICATE KEY UPDATE col1=col;
INSERT INTO test_autoinc_upsert VALUES(100,0) ON DUPLICATE KEY UPDATE col1=col;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col,col1 FROM test_autoinc_upsert ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
 100 |    0
(3 rows)

--all insert test_autoinc_merge
MERGE INTO test_autoinc_merge m USING test_autoinc_upsert u 
  ON m.col = u.col
WHEN MATCHED THEN
  UPDATE SET m.col1=u.col
WHEN NOT MATCHED THEN  
  INSERT VALUES (u.col, u.col1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
 100 |    0
(3 rows)

--all update test_autoinc_merge
MERGE INTO test_autoinc_merge m USING test_autoinc_upsert u 
  ON m.col = u.col
WHEN MATCHED THEN
  UPDATE SET m.col1=u.col
WHEN NOT MATCHED THEN  
  INSERT VALUES (u.col, u.col1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    2
 100 |  100
(3 rows)

SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    2
 100 |  100
(3 rows)

--insert test_autoinc_upsert 
INSERT INTO test_autoinc_upsert VALUES(100,NULL) ON DUPLICATE KEY UPDATE col1=col;
INSERT INTO test_autoinc_upsert VALUES(DEFAULT,NULL) ON DUPLICATE KEY UPDATE col1=col;
INSERT INTO test_autoinc_upsert VALUES(50,NULL) ON DUPLICATE KEY UPDATE col1=col;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col,col1 FROM test_autoinc_upsert ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
  50 |     
 100 |  100
 101 |     
(5 rows)

--insert and update test_autoinc_merge
MERGE INTO test_autoinc_merge m USING test_autoinc_upsert u 
  ON m.col = u.col
WHEN MATCHED THEN
  UPDATE SET m.col1=u.col1
WHEN NOT MATCHED THEN  
  INSERT VALUES (u.col, u.col1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
  50 |     
 100 |  100
 101 |     
(5 rows)

--insert null/0 to test_autoinc_merge.col
MERGE INTO test_autoinc_merge m USING test_autoinc_upsert u 
  ON m.col = u.col1
WHEN MATCHED THEN
  UPDATE SET m.col1=u.col1
WHEN NOT MATCHED THEN  
  INSERT VALUES (u.col1, u.col1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            102
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
  50 |     
 100 |  100
 101 |     
 102 |    0
 103 |     
 104 |     
(8 rows)

--iinsert default to test_autoinc_merge.col
MERGE INTO test_autoinc_merge m USING test_autoinc_upsert u 
  ON m.col = u.col1
WHEN MATCHED THEN
  UPDATE SET m.col1=u.col1
WHEN NOT MATCHED THEN  
  INSERT VALUES (default, u.col1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            105
(1 row)

SELECT col,col1 FROM test_autoinc_merge ORDER BY 1;
 col | col1 
-----+------
   1 |    1
   2 |    0
  50 |     
 100 |  100
 101 |     
 102 |    0
 103 |     
 104 |     
 105 |    0
 106 |     
 107 |     
(11 rows)

DROP TABLE test_autoinc_upsert;
DROP TABLE test_autoinc_merge;
--ERROR test
CREATE TABLE test_autoinc_err (
    col1 int auto_increment primary key,
    col2 int unique
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_err_col1_seq" for serial column "test_autoinc_err.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_err_pkey" for table "test_autoinc_err"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_err_col2_key" for table "test_autoinc_err"
INSERT INTO test_autoinc_err VALUES(NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

INSERT INTO test_autoinc_err VALUES(DEFAULT, 1);
ERROR:  duplicate key value violates unique constraint "test_autoinc_err_col2_key"
DETAIL:  Key (col2)=(1) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1,col2 FROM test_autoinc_err ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
(1 row)

INSERT INTO test_autoinc_err VALUES(DEFAULT, 3);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              3
(1 row)

SELECT col1,col2 FROM test_autoinc_err ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    3 |    3
(2 rows)

INSERT INTO test_autoinc_err VALUES(0,1), (100,5);
ERROR:  duplicate key value violates unique constraint "test_autoinc_err_col2_key"
DETAIL:  Key (col2)=(1) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              3
(1 row)

SELECT col1,col2 FROM test_autoinc_err ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    3 |    3
(2 rows)

INSERT INTO test_autoinc_err VALUES(0,5), (6,6), (0,1), (7,7);
ERROR:  duplicate key value violates unique constraint "test_autoinc_err_col2_key"
DETAIL:  Key (col2)=(1) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              5
(1 row)

SELECT col1,col2 FROM test_autoinc_err ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    3 |    3
(2 rows)

INSERT INTO test_autoinc_err VALUES(DEFAULT, 5);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              8
(1 row)

SELECT col1,col2 FROM test_autoinc_err ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    3 |    3
    8 |    5
(3 rows)

DROP TABLE test_autoinc_err;
-- last_insert_id test
CREATE TABLE test_last_insert_id(col int auto_increment PRIMARY KEY) AUTO_INCREMENT = 10;
NOTICE:  CREATE TABLE will create implicit sequence "test_last_insert_id_col_seq" for serial column "test_last_insert_id.col"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_last_insert_id_pkey" for table "test_last_insert_id"
INSERT INTO test_last_insert_id VALUES(DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             10
(1 row)

INSERT INTO test_last_insert_id VALUES(0), (NULL), (50), (DEFAULT);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT LAST_INSERT_ID(100 + 100);
 last_insert_id 
----------------
            200
(1 row)

SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            200
(1 row)

SELECT LAST_INSERT_ID(NULL);
 last_insert_id 
----------------
               
(1 row)

SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              0
(1 row)

SELECT LAST_INSERT_ID(1.1);
 last_insert_id 
----------------
              1
(1 row)

SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

DROP TABLE test_last_insert_id;
-- test auto_increment insert multi values
create table test_autoinc_batch_insert (
    col1 int auto_increment primary key,
    col2 int 
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_batch_insert_col1_seq" for serial column "test_autoinc_batch_insert.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_batch_insert_pkey" for table "test_autoinc_batch_insert"
TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1), (DEFAULT, 1), (DEFAULT, 1), (DEFAULT, 1), (DEFAULT, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
(5 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
    6 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(5, 1), (8, 1), (7, 1), (9, 1), (20, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    7 |    1
    8 |    1
    9 |    1
   20 |    1
(5 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    7 |    1
    8 |    1
    9 |    1
   20 |    1
   21 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(5, 1), (NULL, 1), (NULL, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    1
    7 |    1
    8 |    1
    9 |    1
(5 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    1
    7 |    1
    8 |    1
    9 |    1
   10 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(10, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (15, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   10 |    1
   11 |    1
   12 |    1
   15 |    1
   16 |    1
   17 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   10 |    1
   11 |    1
   12 |    1
   15 |    1
   16 |    1
   17 |    1
   18 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(20, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (NULL, 1), (NULL, 1), (29, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             21
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   20 |    1
   21 |    1
   22 |    1
   23 |    1
   24 |    1
   29 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   20 |    1
   21 |    1
   22 |    1
   23 |    1
   24 |    1
   29 |    1
   30 |    1
(7 rows)

DELETE FROM test_autoinc_batch_insert;
TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(30, 1);
INSERT INTO test_autoinc_batch_insert VALUES(1, 1), (NULL, 1), (NULL, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             31
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    1
   32 |    1
   33 |    1
   34 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    1
   32 |    1
   33 |    1
   34 |    1
   35 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(40, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (2, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             41
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    2 |    1
   40 |    1
   41 |    1
   42 |    1
   43 |    1
   44 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    2 |    1
   40 |    1
   41 |    1
   42 |    1
   43 |    1
   44 |    1
   45 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(50, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (NULL, 1), (NULL, 1), (3, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             51
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    3 |    1
   50 |    1
   51 |    1
   52 |    1
   53 |    1
   54 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
    3 |    1
   50 |    1
   51 |    1
   52 |    1
   53 |    1
   54 |    1
   55 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(60, 1);
INSERT INTO test_autoinc_batch_insert VALUES(62, 1), (NULL, 1), (NULL, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             63
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
   62 |    1
   63 |    1
   64 |    1
   65 |    1
   66 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
   62 |    1
   63 |    1
   64 |    1
   65 |    1
   66 |    1
   67 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(70, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (74, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             71
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
   71 |    1
   72 |    1
   74 |    1
   75 |    1
   76 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
   71 |    1
   72 |    1
   74 |    1
   75 |    1
   76 |    1
   77 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(80, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (85, 1), (NULL, 1), (NULL, 1);
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             81
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   80 |    1
   81 |    1
   82 |    1
   85 |    1
   86 |    1
   87 |    1
(6 rows)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   80 |    1
   81 |    1
   82 |    1
   85 |    1
   86 |    1
   87 |    1
   88 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(90, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (91, 1), (NULL, 1), (NULL, 1);
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_insert_pkey"
DETAIL:  Key (col1)=(91) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             91
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
(1 row)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
   93 |    1
(2 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(100, 1);
INSERT INTO test_autoinc_batch_insert VALUES(NULL, 1), (NULL, 1), (102, 1), (NULL, 1), (109, 1);
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_insert_pkey"
DETAIL:  Key (col1)=(102) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
(1 row)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
  103 |    1
(2 rows)

TRUNCATE TABLE test_autoinc_batch_insert;
INSERT INTO test_autoinc_batch_insert VALUES(110, 1);
INSERT INTO test_autoinc_batch_insert VALUES(120, 1), (NULL, 1), (NULL, 1), (NULL, 1), (123, 1);
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_insert_pkey"
DETAIL:  Key (col1)=(123) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            121
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
(1 row)

INSERT INTO test_autoinc_batch_insert VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_insert ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
  124 |    1
(2 rows)

drop table test_autoinc_batch_insert;
-- test auto_increment insert select
create table test_autoinc_insert_select (
    col1 int auto_increment primary key,
    col2 int 
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_insert_select_col1_seq" for serial column "test_autoinc_insert_select.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_insert_select_pkey" for table "test_autoinc_insert_select"
create table test_autoinc_source (
    col1 int,
    col2 int
);
TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(DEFAULT, 1), (DEFAULT, 2), (DEFAULT, 3), (DEFAULT, 4), (DEFAULT, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    2
    3 |    3
    4 |    4
    5 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    2
    3 |    3
    4 |    4
    5 |    5
    6 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(5, 1), (8, 2), (7, 3), (9, 4), (20, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    7 |    3
    8 |    2
    9 |    4
   20 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    7 |    3
    8 |    2
    9 |    4
   20 |    5
   21 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(5, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
    8 |    4
    9 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
    8 |    4
    9 |    5
   10 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(5, 1), (NULL, 2), (NULL, 3), (4, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    4 |    4
    5 |    1
    6 |    2
    7 |    3
    8 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    4 |    4
    5 |    1
    6 |    2
    7 |    3
    8 |    5
    9 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(5, 1), (NULL, 2), (NULL, 3), (10, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
   10 |    4
   11 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
   10 |    4
   11 |    5
   12 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(5, 1), (NULL, 2), (NULL, 3), (16, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
   16 |    4
   17 |    5
(5 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    5 |    1
    6 |    2
    7 |    3
   16 |    4
   17 |    5
   18 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (15, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(10, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             11
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   10 |    1
   11 |    1
   12 |    2
   15 |    3
   16 |    4
   17 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   10 |    1
   11 |    1
   12 |    2
   15 |    3
   16 |    4
   17 |    5
   18 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (29, 5);
INSERT INTO test_autoinc_insert_select VALUES(20, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             21
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   20 |    1
   21 |    1
   22 |    2
   23 |    3
   24 |    4
   29 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   20 |    1
   21 |    1
   22 |    2
   23 |    3
   24 |    4
   29 |    5
   30 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(1, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(30, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             31
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    2
   32 |    3
   33 |    4
   34 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    2
   32 |    3
   33 |    4
   34 |    5
   35 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (2, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(40, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             41
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    2 |    3
   40 |    1
   41 |    1
   42 |    2
   43 |    4
   44 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    2 |    3
   40 |    1
   41 |    1
   42 |    2
   43 |    4
   44 |    5
   45 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (3, 5);
INSERT INTO test_autoinc_insert_select VALUES(50, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             51
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    3 |    5
   50 |    1
   51 |    1
   52 |    2
   53 |    3
   54 |    4
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
    3 |    5
   50 |    1
   51 |    1
   52 |    2
   53 |    3
   54 |    4
   55 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(62, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(60, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             63
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
   62 |    1
   63 |    2
   64 |    3
   65 |    4
   66 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
   62 |    1
   63 |    2
   64 |    3
   65 |    4
   66 |    5
   67 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (74, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(70, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             71
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
   71 |    1
   72 |    2
   74 |    3
   75 |    4
   76 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
   71 |    1
   72 |    2
   74 |    3
   75 |    4
   76 |    5
   77 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (85, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(80, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             81
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   80 |    1
   81 |    1
   82 |    2
   85 |    3
   86 |    4
   87 |    5
(6 rows)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   80 |    1
   81 |    1
   82 |    2
   85 |    3
   86 |    4
   87 |    5
   88 |    1
(7 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (91, 3), (NULL, 4), (NULL, 5);
INSERT INTO test_autoinc_insert_select VALUES(90, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
ERROR:  duplicate key value violates unique constraint "test_autoinc_insert_select_pkey"
DETAIL:  Key (col1)=(91) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             91
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
(1 row)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
   93 |    1
(2 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(NULL, 1), (NULL, 2), (102, 3), (NULL, 4), (109, 5);
INSERT INTO test_autoinc_insert_select VALUES(100, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
ERROR:  duplicate key value violates unique constraint "test_autoinc_insert_select_pkey"
DETAIL:  Key (col1)=(102) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
(1 row)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 2);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
  103 |    2
(2 rows)

TRUNCATE TABLE test_autoinc_source;
TRUNCATE TABLE test_autoinc_insert_select;
INSERT INTO test_autoinc_source VALUES(120, 1), (NULL, 2), (NULL, 3), (NULL, 4), (123, 5);
INSERT INTO test_autoinc_insert_select VALUES(110, 1);
INSERT INTO test_autoinc_insert_select SELECT * FROM test_autoinc_source order by col2;
ERROR:  duplicate key value violates unique constraint "test_autoinc_insert_select_pkey"
DETAIL:  Key (col1)=(123) already exists.
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            121
(1 row)

SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
(1 row)

INSERT INTO test_autoinc_insert_select VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_insert_select ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
  124 |    1
(2 rows)

drop table test_autoinc_source;
drop table test_autoinc_insert_select;
-- test copy from
create table test_autoinc_batch_copy (
    col1 int auto_increment primary key,
    col2 int 
);
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_batch_copy_col1_seq" for serial column "test_autoinc_batch_copy.col1"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_batch_copy_pkey" for table "test_autoinc_batch_copy"
TRUNCATE TABLE test_autoinc_batch_copy;
COPY test_autoinc_batch_copy (col2) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
(5 rows)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
    6 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_copy;
COPY test_autoinc_batch_copy (col1,col2) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              6
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    4 |    1
    5 |    1
    8 |    1
    9 |    1
(5 rows)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    4 |    1
    5 |    1
    8 |    1
    9 |    1
   10 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_copy;
COPY test_autoinc_batch_copy (col1,col2) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
              1
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
(5 rows)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
    2 |    1
    3 |    1
    4 |    1
    5 |    1
    6 |    1
(6 rows)

TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(30, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             31
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    1
   32 |    1
   33 |    1
   34 |    1
(6 rows)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
    1 |    1
   30 |    1
   31 |    1
   32 |    1
   33 |    1
   34 |    1
   35 |    1
(7 rows)

-- error
TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(60, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_copy_pkey"
DETAIL:  Key (col1)=(62) already exists.
CONTEXT:  COPY test_autoinc_batch_copy, line 6: ""
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             61
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
(1 row)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   60 |    1
   65 |    1
(2 rows)

-- error
TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(70, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_copy_pkey"
DETAIL:  Key (col1)=(74) already exists.
CONTEXT:  COPY test_autoinc_batch_copy, line 6: ""
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             71
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
(1 row)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   70 |    1
   75 |    1
(2 rows)

-- error
TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(90, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_copy_pkey"
DETAIL:  Key (col1)=(91) already exists.
CONTEXT:  COPY test_autoinc_batch_copy, line 6: ""
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
             91
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
(1 row)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
   90 |    1
   95 |    1
(2 rows)

-- error
TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(100, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
ERROR:  duplicate key value violates unique constraint "test_autoinc_batch_copy_pkey"
DETAIL:  Key (col1)=(102) already exists.
CONTEXT:  COPY test_autoinc_batch_copy, line 6: ""
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            101
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
(1 row)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
  100 |    1
  104 |    1
(2 rows)

TRUNCATE TABLE test_autoinc_batch_copy;
INSERT INTO test_autoinc_batch_copy VALUES(110, 1);
COPY test_autoinc_batch_copy (col1,col2) from stdin;
SELECT LAST_INSERT_ID();
 last_insert_id 
----------------
            111
(1 row)

SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
  111 |    1
  112 |    1
  113 |    1
  120 |    1
  123 |    1
(6 rows)

INSERT INTO test_autoinc_batch_copy VALUES(DEFAULT, 1);
SELECT col1,col2 FROM test_autoinc_batch_copy ORDER BY 1;
 col1 | col2 
------+------
  110 |    1
  111 |    1
  112 |    1
  113 |    1
  120 |    1
  123 |    1
  124 |    1
(7 rows)

drop table test_autoinc_batch_copy;
-- upsert not auto_increment column
CREATE TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_upsert_id_seq" for serial column "test_autoinc_upsert.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 1 ), ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE action = 'update';
SELECT LAST_INSERT_ID(); -- 3
 last_insert_id 
----------------
              3
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | update | 
  2 |   2 |                   1 | update | 
  3 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | update | 
  2 |   2 |                   1 | update | 
  3 |   3 |                   1 | insert | 
  4 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 3
CREATE TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_upsert_id_seq" for serial column "test_autoinc_upsert.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE id = '3';
SELECT LAST_INSERT_ID(); -- 4
 last_insert_id 
----------------
              4
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  3 |   2 |                   1 | insert | 
  4 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 3 4 5
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  3 |   2 |                   1 | insert | 
  4 |   3 |                   1 | insert | 
  5 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 2
CREATE TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_upsert_id_seq" for serial column "test_autoinc_upsert.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE id = '2';
SELECT LAST_INSERT_ID(); -- 3
 last_insert_id 
----------------
              3
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
  3 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
  3 |   3 |                   1 | insert | 
  4 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 5
CREATE TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE will create implicit sequence "test_autoinc_upsert_id_seq" for serial column "test_autoinc_upsert.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 ), ( 4 )
ON DUPLICATE KEY UPDATE id = '5';
SELECT LAST_INSERT_ID(); -- 6
 last_insert_id 
----------------
              6
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 5 6 7
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  5 |   2 |                   1 | insert | 
  6 |   3 |                   1 | insert | 
  7 |   4 |                   1 | insert | 
(4 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 5 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 5 6 7 8
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  5 |   2 |                   1 | insert | 
  6 |   3 |                   1 | insert | 
  7 |   4 |                   1 | insert | 
  8 |   5 |                   1 | insert | 
(5 rows)

drop table test_autoinc_upsert;
-- temp table upsert not auto_increment column
CREATE TEMPORARY TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 1 ), ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE action = 'update';
SELECT LAST_INSERT_ID(); -- 3
 last_insert_id 
----------------
              3
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | update | 
  2 |   2 |                   1 | update | 
  3 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | update | 
  2 |   2 |                   1 | update | 
  3 |   3 |                   1 | insert | 
  4 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 3
CREATE TEMPORARY TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE id = '3';
SELECT LAST_INSERT_ID(); -- 4
 last_insert_id 
----------------
              4
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  3 |   2 |                   1 | insert | 
  4 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 3 4 5
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  3 |   2 |                   1 | insert | 
  4 |   3 |                   1 | insert | 
  5 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 2
CREATE TEMPORARY TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 )
ON DUPLICATE KEY UPDATE id = '2';
SELECT LAST_INSERT_ID(); -- 3
 last_insert_id 
----------------
              3
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
  3 |   3 |                   1 | insert | 
(3 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 4 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 2 3 4
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
  3 |   3 |                   1 | insert | 
  4 |   4 |                   1 | insert | 
(4 rows)

drop table test_autoinc_upsert;
-- upsert auto_increment 5
CREATE TEMPORARY TABLE test_autoinc_upsert ( id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY( ID ),
val INT NOT NULL, UNIQUE( val ),
test_autoinc_upsert INT DEFAULT 1,
action varchar( 10 ) DEFAULT 'insert',
comment varchar( 30 ) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_autoinc_upsert_pkey" for table "test_autoinc_upsert"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_autoinc_upsert_val_key" for table "test_autoinc_upsert"
INSERT INTO test_autoinc_upsert ( val ) VALUES ( 1 ), ( 2 ) ON DUPLICATE KEY UPDATE action = 'update';
SELECT * FROM test_autoinc_upsert ORDER BY 2;
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  2 |   2 |                   1 | insert | 
(2 rows)

INSERT INTO test_autoinc_upsert (val )
VALUES ( 2 ), ( 3 ), ( 4 )
ON DUPLICATE KEY UPDATE id = '5';
SELECT LAST_INSERT_ID(); -- 6
 last_insert_id 
----------------
              6
(1 row)

SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 5 6 7
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  5 |   2 |                   1 | insert | 
  6 |   3 |                   1 | insert | 
  7 |   4 |                   1 | insert | 
(4 rows)

INSERT INTO test_autoinc_upsert (val ) VALUES ( 5 );
SELECT * FROM test_autoinc_upsert ORDER BY 2; -- 1 5 6 7 8
 id | val | test_autoinc_upsert | action | comment 
----+-----+---------------------+--------+---------
  1 |   1 |                   1 | insert | 
  5 |   2 |                   1 | insert | 
  6 |   3 |                   1 | insert | 
  7 |   4 |                   1 | insert | 
  8 |   5 |                   1 | insert | 
(5 rows)

drop table test_autoinc_upsert;
\c regression
clean connection to all force for database autoinc_b_db;
drop database if exists autoinc_b_db;
