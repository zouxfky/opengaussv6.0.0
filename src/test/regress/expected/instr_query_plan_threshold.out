\c postgres;
create schema instr_query_plan_threshold;
set current_schema to instr_query_plan_threshold;
create table query_plan_table(id int, num int);
create unique index idIndex on query_plan_table(id);
insert into query_plan_table select generate_series(1,10000),generate_series(1,10000);
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

-- full sql
set track_stmt_stat_level = 'L0,OFF';
set log_min_duration_statement = '0ms';
set statement_timeout = '0ms';
delete statement_history;
select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select t1.num from query_plan_table t1 where t1.num = 1;
 num 
-----
   1
(1 row)

select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- expect 2 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     2
(1 row)

delete statement_history;
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

set log_min_duration_statement = '10ms';
set statement_timeout = '1100ms';
select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select count(t1.num) from query_plan_table t1, query_plan_table t2;
ERROR:  canceling statement due to statement timeout
select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- expect 2 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     2
(1 row)

-- slow sql
set track_stmt_stat_level = 'OFF,L0';
set log_min_duration_statement = '0ms';
delete statement_history;
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select t1.num from query_plan_table t1 where t1.num = 1;
 num 
-----
   1
(1 row)

select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- expect 2 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     2
(1 row)

set log_min_duration_statement = -1;
delete statement_history;
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select t1.num from query_plan_table t1 where t1.num = 1;
 num 
-----
   1
(1 row)

select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- expect 0 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     0
(1 row)

set log_min_duration_statement = '1s';
set statement_timeout = '2s';
delete statement_history;
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select t1.num from query_plan_table t1 where t1.num = 1;
 num 
-----
   1
(1 row)

select t1.num, pg_sleep(1) from query_plan_table t1 where t1.num = 1;
 num | pg_sleep 
-----+----------
   1 | 
(1 row)

select count(t1.num) from query_plan_table t1, query_plan_table t2, query_plan_table t3, query_plan_table t4;
ERROR:  canceling statement due to statement timeout
select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- expect 2 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     2
(1 row)

set log_min_duration_statement = '2s';
set statement_timeout = '1s';
delete statement_history;
select reset_unique_sql('GLOBAL', 'ALL', 0);
 reset_unique_sql 
------------------
 t
(1 row)

select t1.id from query_plan_table t1 where t1.id = 1;
 id 
----
  1
(1 row)

select t1.num from query_plan_table t1 where t1.num = 1;
 num 
-----
   1
(1 row)

select t1.num, pg_sleep(1) from query_plan_table t1 where t1.num = 1;
ERROR:  canceling statement due to statement timeout
CONTEXT:  referenced column: pg_sleep
select pg_sleep(1);
ERROR:  canceling statement due to statement timeout
CONTEXT:  referenced column: pg_sleep
-- expect 0 row
select count(*) from statement_history where query like '%from query_plan_table%' and query_plan is not null;
 count 
-------
     0
(1 row)

set track_stmt_stat_level = 'OFF,L0';
set log_min_duration_statement = '30min';
set statement_timeout = '0ms';
drop table query_plan_table;
drop schema instr_query_plan_threshold cascade;
\c regression;
