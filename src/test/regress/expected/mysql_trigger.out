-- 1. test B_FORMAT trigger
drop database if exists testdb_m;
NOTICE:  database "testdb_m" does not exist, skipping
create database testdb_m dbcompatibility 'B';
\c testdb_m
create schema testscm;
create schema testscm2;
create table animals (id int, name char(30));
create table food (id int, foodtype varchar(32), remark varchar(32), time_flag timestamp);
create table testscm.animals_scm (id int, name char(30));
create table testscm.food_scm (id int, foodtype varchar(32), remark varchar(32), time_flag timestamp);
CREATE OR REPLACE FUNCTION food_insert_func() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
INSERT INTO food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
-- 1.1 create trigger
-- 1.1.1 create trigger + drop trigger
-- 1.1.1.1 trigger without schema
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger "animals_trigger1" already exists
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into animals(id, name) values (1,'panda');
select * from animals;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from animals;
delete from food;
drop trigger animals_trigger1;
drop trigger animals_trigger1;
ERROR:  trigger "animals_trigger1" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger "animals_trigger2" already exists
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from food;
drop trigger animals_trigger2;
drop trigger animals_trigger2;
ERROR:  trigger "animals_trigger2" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger "animals_trigger3" already exists
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger3
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from testscm.food_scm;
drop trigger animals_trigger3;
drop trigger animals_trigger3;
ERROR:  trigger "animals_trigger3" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.1.1.2 trigger with right schema
create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger "animals_trigger2" already exists
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from food;
drop trigger testscm.animals_trigger2;
drop trigger testscm.animals_trigger2;
ERROR:  trigger "animals_trigger2" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger testscm.animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger testscm.animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger "animals_trigger3" already exists
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger3
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from testscm.food_scm;
drop trigger testscm.animals_trigger3;
drop trigger testscm.animals_trigger3;
ERROR:  trigger "animals_trigger3" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.1.1.3 trigger with wrong schema
create trigger testscm.animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
create trigger testscm_no.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  schema "testscm_no" does not exist
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
-- ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
drop trigger testscm.animals_trigger1;
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
-- OK
drop trigger animals_trigger1;
-- ERROR:  schema "testscm_no" does not exist
drop trigger testscm_no.animals_trigger2;
ERROR:  schema "testscm_no" does not exist
-- OK
drop trigger animals_trigger2;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- ERROR:  trigger "animals_trigger_no" does not exist
drop trigger animals_trigger_no;
ERROR:  trigger "animals_trigger_no" does not exist
drop trigger testscm.animals_trigger_no;
ERROR:  trigger "animals_trigger_no" does not exist
drop trigger testscm_no.animals_trigger_no;
ERROR:  trigger "animals_trigger_no" does not exist
-- 1.1.1.4 trigger with bad schema
create trigger testscm.
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near "insert"
LINE 2: after insert on testscm.animals_scm
              ^
create trigger .animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near "."
LINE 1: create trigger .animals_trigger2
                       ^
create trigger .
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near "."
LINE 1: create trigger .
                       ^
create trigger testscm..animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near ".."
LINE 1: create trigger testscm..animals_trigger2
                              ^
create trigger testscm..
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near ".."
LINE 1: create trigger testscm..
                              ^
create trigger testscm..
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near ".."
LINE 1: create trigger testscm..
                              ^
create trigger ..
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  syntax error at or near ".."
LINE 1: create trigger ..
                       ^
create trigger testctg.testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  improper qualified name (too many dotted names): testctg.testscm.animals_trigger2
LINE 1: create trigger testctg.testscm.animals_trigger2
                       ^
-- 1.1.2 create trigger if not exists  + drop trigger if exists
-- 1.1.2.1 trigger without schema
create trigger if not exists animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger if not exists animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
NOTICE:  trigger "animals_trigger1" already exists, skipping
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into animals(id, name) values (1,'panda');
select * from animals;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from animals;
delete from food;
drop trigger if exists animals_trigger1;
drop trigger if exists animals_trigger1;
NOTICE:  trigger "animals_trigger1" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger if not exists animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger if not exists animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
NOTICE:  trigger "animals_trigger2" already exists, skipping
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from food;
drop trigger if exists animals_trigger2;
drop trigger if exists animals_trigger2;
NOTICE:  trigger "animals_trigger2" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger if not exists animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger if not exists animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
NOTICE:  trigger "animals_trigger3" already exists, skipping
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger3
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from testscm.food_scm;
drop trigger if exists animals_trigger3;
drop trigger if exists animals_trigger3;
NOTICE:  trigger "animals_trigger3" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.1.2.2 trigger with right schema
create trigger if not exists testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger if not exists testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
NOTICE:  trigger "animals_trigger2" already exists, skipping
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

select count(*) from food;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from food;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from food;
drop trigger if exists testscm.animals_trigger2;
drop trigger if exists testscm.animals_trigger2;
NOTICE:  trigger "animals_trigger2" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger if not exists testscm.animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger if not exists testscm.animals_trigger3
after insert on testscm.animals_scm
for each row
begin
    insert into testscm.food_scm(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
NOTICE:  trigger "animals_trigger3" already exists, skipping
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger3
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     0
(1 row)

insert into testscm.animals_scm(id, name) values (1,'panda');
select * from testscm.animals_scm;
 id |              name              
----+--------------------------------
  1 | panda                         
(1 row)

select count(*) from testscm.food_scm;
 count 
-------
     1
(1 row)

delete from testscm.animals_scm;
delete from testscm.food_scm;
drop trigger if exists testscm.animals_trigger3;
drop trigger if exists testscm.animals_trigger3;
NOTICE:  trigger "animals_trigger3" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.1.2.3 trigger with wrong schema
create trigger if not exists testscm.animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
create trigger if not exists testscm_no.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
ERROR:  schema "testscm_no" does not exist
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
-- NOTICE:  trigger "animals_trigger1" does not exist, skipping
drop trigger if exists testscm.animals_trigger1;
NOTICE:  trigger "animals_trigger1" does not exist, skipping
-- OK
drop trigger if exists animals_trigger1;
-- NOTICE:  trigger "animals_trigger1" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger2;
NOTICE:  trigger "animals_trigger2" does not exist, skipping
-- OK
drop trigger if exists animals_trigger2;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- NOTICE:  trigger "animals_trigger_no" does not exist, skipping
drop trigger if exists animals_trigger_no;
NOTICE:  trigger "animals_trigger_no" does not exist, skipping
drop trigger if exists testscm.animals_trigger_no;
NOTICE:  trigger "animals_trigger_no" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger_no;
NOTICE:  trigger "animals_trigger_no" does not exist, skipping
-- 1.1.3 create trigger execute procedure
create trigger animals_trigger1
after insert on animals
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

drop trigger animals_trigger1;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

drop trigger testscm.animals_trigger2;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.1.4 create constrain trigger execute procedure
create constraint trigger animals_trigger1
after insert on animals
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

drop trigger animals_trigger1;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create constraint trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

drop trigger testscm.animals_trigger2;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.2 drop trigger on table
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

-- ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
drop trigger testscm.animals_trigger1 on animals;
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
-- ERROR:  schema "testscm_no" does not exist
drop trigger testscm_no.animals_trigger1 on animals;
ERROR:  schema "testscm_no" does not exist
-- ERROR:  trigger "animals_trigger_no" for table "animals" does not exist
drop trigger animals_trigger_no on animals;
ERROR:  trigger "animals_trigger_no" for table "animals" does not exist
drop trigger testscm.animals_trigger_no on animals;
ERROR:  trigger "animals_trigger_no" for table "animals" does not exist
drop trigger testscm_no.animals_trigger_no on animals;
ERROR:  trigger "animals_trigger_no" for table "animals" does not exist
-- OK
drop trigger animals_trigger1 on animals;
drop trigger animals_trigger1 on animals;
ERROR:  trigger "animals_trigger1" for table "animals" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

-- NOTICE:  trigger "animals.animals_trigger1" for table "animals" does not exist, skipping
drop trigger if exists testscm.animals_trigger1 on animals;
NOTICE:  trigger "animals.animals_trigger1" for table "animals" does not exist, skipping
-- NOTICE:  trigger "animals.animals_trigger1" for table "animals" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger1 on animals;
NOTICE:  trigger "animals.animals_trigger1" for table "animals" does not exist, skipping
-- NOTICE:  trigger "animals.animals_trigger_no" for table "animals" does not exist, skipping
drop trigger if exists animals_trigger_no on animals;
NOTICE:  trigger "animals.animals_trigger_no" for table "animals" does not exist, skipping
drop trigger if exists testscm.animals_trigger_no on animals;
NOTICE:  trigger "animals.animals_trigger_no" for table "animals" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger_no on animals;
NOTICE:  trigger "animals.animals_trigger_no" for table "animals" does not exist, skipping
-- OK
drop trigger if exists animals_trigger1 on animals;
drop trigger if exists animals_trigger1 on animals;
NOTICE:  trigger "animals.animals_trigger1" for table "animals" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

-- ERROR:  trigger in wrong schema: "testscm2"."animals_trigger2"
drop trigger testscm2.animals_trigger2 on testscm.animals_scm;
ERROR:  trigger in wrong schema: "testscm2"."animals_trigger2"
-- ERROR:  schema "testscm_no" does not exist
drop trigger testscm_no.animals_trigger2 on testscm.animals_scm;
ERROR:  schema "testscm_no" does not exist
-- ERROR:  trigger "animals_trigger_no" for table "animals_scm" does not exist
drop trigger animals_trigger_no on testscm.animals_scm;
ERROR:  trigger "animals_trigger_no" for table "animals_scm" does not exist
drop trigger testscm.animals_trigger_no on testscm.animals_scm;
ERROR:  trigger "animals_trigger_no" for table "animals_scm" does not exist
drop trigger testscm_no.animals_trigger_no on testscm.animals_scm;
ERROR:  trigger "animals_trigger_no" for table "animals_scm" does not exist
-- OK
drop trigger testscm.animals_trigger2 on testscm.animals_scm;
drop trigger testscm.animals_trigger2 on testscm.animals_scm;
ERROR:  trigger "animals_trigger2" for table "animals_scm" does not exist
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

-- NOTICE:  trigger "testscm.animals_scm.animals_trigger2" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists testscm2.animals_trigger2 on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger2" for table "testscm.animals_scm" does not exist, skipping
-- NOTICE:  trigger "testscm.animals_scm.animals_trigger2" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger2 on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger2" for table "testscm.animals_scm" does not exist, skipping
-- NOTICE:  trigger "testscm.animals_scm.animals_trigger_no" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists animals_trigger_no on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger_no" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists testscm.animals_trigger_no on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger_no" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists testscm2.animals_trigger_no on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger_no" for table "testscm.animals_scm" does not exist, skipping
drop trigger if exists testscm_no.animals_trigger_no on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger_no" for table "testscm.animals_scm" does not exist, skipping
-- OK
drop trigger if exists testscm.animals_trigger2 on testscm.animals_scm;
drop trigger if exists testscm.animals_trigger2 on testscm.animals_scm;
NOTICE:  trigger "testscm.animals_scm.animals_trigger2" for table "testscm.animals_scm" does not exist, skipping
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

-- 1.3 alter trigger
create trigger animals_trigger1
after insert on animals
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

alter trigger animals_trigger1 on animals rename to animals_trigger1_1;
select tgname from pg_trigger;
       tgname       
--------------------
 animals_trigger1_1
(1 row)

alter trigger testscm.animals_trigger1 on animals rename to animals_trigger1_2;
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1"
alter trigger testscm.animals_trigger1_1 on animals rename to animals_trigger1_2;
ERROR:  trigger in wrong schema: "testscm"."animals_trigger1_1"
alter trigger testscm_no.animals_trigger1_1 on animals rename to animals_trigger1_2;
ERROR:  schema "testscm_no" does not exist
drop trigger animals_trigger1_1 on animals;
create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

alter trigger animals_trigger2 on testscm.animals_scm rename to animals_trigger2_1;
select tgname from pg_trigger;
       tgname       
--------------------
 animals_trigger2_1
(1 row)

alter trigger testscm.animals_trigger2_1 on testscm.animals_scm rename to animals_trigger2_2;
select tgname from pg_trigger;
       tgname       
--------------------
 animals_trigger2_2
(1 row)

alter trigger testscm.animals_trigger2_1 on testscm.animals_scm rename to animals_trigger2_2;
ERROR:  trigger "animals_trigger2_2" for relation "animals_scm" already exists
alter trigger testscm_no.animals_trigger2_2 on testscm.animals_scm rename to animals_trigger2_3;
ERROR:  schema "testscm_no" does not exist
drop trigger testscm.animals_trigger2_2 on testscm.animals_scm;
-- 1.4 set search_path to schema
set search_path to testscm;
create trigger animals_trigger2
after insert on animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
alter trigger animals_trigger2 on animals_scm rename to animals_trigger2_1;
drop trigger animals_trigger2_1 on animals_scm;
create trigger testscm.animals_trigger2
after insert on animals_scm
for each row
begin
    insert into food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
end;
/
alter trigger testscm.animals_trigger2 on animals_scm rename to animals_trigger2_1;
drop trigger testscm.animals_trigger2_1 on animals_scm;
set search_path to public;
--bugfix for name long
drop table if exists T_ignore_case_in_dquotes_use_case0007;
NOTICE:  table "t_ignore_case_in_dquotes_use_case0007" does not exist, skipping
drop table if exists T_ignore_case_in_dquotes_use_case0007_1;
NOTICE:  table "t_ignore_case_in_dquotes_use_case0007_1" does not exist, skipping
create table T_ignore_case_in_dquotes_use_case0007(col1 int,col2 varchar(20));
create table T_ignore_case_in_dquotes_use_case0007_1(col1 int,col2 varchar(20));
create trigger Tri_ignore_case_in_dquotes_use_case0007
after insert on T_ignore_case_in_dquotes_use_case0007
for each row
begin
insert into T_ignore_case_in_dquotes_use_case0007_1 values (1,'INSERT');
end;
/
create trigger Tri_ignore_case_in_dquotes_use_case0008
after insert on T_ignore_case_in_dquotes_use_case0007
for each row
begin
insert into T_ignore_case_in_dquotes_use_case0007_1 values (1,'INSERT');
end;
/
create trigger Tri_ignore_case_in_dquotes_use_case0009
after insert on T_ignore_case_in_dquotes_use_case0007
for each row
begin
insert into T_ignore_case_in_dquotes_use_case0007_1 values (1,'INSERT');
end;
/
create trigger Tri_ignore_case_in_dquotes_use_case0011
after insert on T_ignore_case_in_dquotes_use_case0007
for each row
begin
insert into T_ignore_case_in_dquotes_use_case0007_1 values (1,'INSERT');
end;
/
insert into T_ignore_case_in_dquotes_use_case0007 values(11,'test');
select * from T_ignore_case_in_dquotes_use_case0007;
 col1 | col2 
------+------
   11 | test
(1 row)

select * from T_ignore_case_in_dquotes_use_case0007_1;
 col1 |  col2  
------+--------
    1 | INSERT
    1 | INSERT
    1 | INSERT
    1 | INSERT
(4 rows)

-- 1.5 cleanup
\c regression
drop database testdb_m;
-- 2. test non B_FORMAT trigger
drop database if exists testdb;
NOTICE:  database "testdb" does not exist, skipping
create database testdb;
\c testdb
create schema testscm;
create table animals (id int, name char(30));
create table food (id int, foodtype varchar(32), remark varchar(32), time_flag timestamp);
create table testscm.animals_scm (id int, name char(30));
create table testscm.food_scm (id int, foodtype varchar(32), remark varchar(32), time_flag timestamp);
CREATE OR REPLACE FUNCTION food_insert_func() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
INSERT INTO food(id, foodtype, remark, time_flag) values (1,'bamboo', 'healthy', now());
RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
-- 2.1 create trigger + alter trigger + drop trigger
create trigger animals_trigger1
after insert on animals
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger1
(1 row)

alter trigger animals_trigger1 on animals rename to animals_trigger1_1;
select tgname from pg_trigger;
       tgname       
--------------------
 animals_trigger1_1
(1 row)

drop trigger animals_trigger1_1;
ERROR:  drop trigger without table name only support in B-format database
drop trigger animals_trigger1_1 on animals;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger animals_trigger2
after insert on testscm.animals_scm
for each row
execute procedure food_insert_func();
select tgname from pg_trigger;
      tgname      
------------------
 animals_trigger2
(1 row)

alter trigger animals_trigger2 on testscm.animals_scm rename to animals_trigger2_1;
select tgname from pg_trigger;
       tgname       
--------------------
 animals_trigger2_1
(1 row)

drop trigger animals_trigger2_1;
ERROR:  drop trigger without table name only support in B-format database
drop trigger animals_trigger2_1 on testscm.animals_scm;
select tgname from pg_trigger;
 tgname 
--------
(0 rows)

create trigger testscm.animals_trigger2
after insert on testscm.animals_scm
for each row
execute procedure food_insert_func();
ERROR:  only support trigger in schema in B compatibility database
LINE 1: create trigger testscm.animals_trigger2
                       ^
alter trigger testscm.animals_trigger2 on testscm.animals_scm rename to animals_trigger2_1;
ERROR:  only support trigger in schema in B compatibility database
LINE 1: alter trigger testscm.animals_trigger2 on testscm.animals_sc...
                      ^
drop trigger testscm.animals_trigger2;
ERROR:  only support trigger in schema in B compatibility database
LINE 1: drop trigger testscm.animals_trigger2;
                     ^
create trigger testscm_no.animals_trigger2
after insert on testscm.animals_scm
for each row
execute procedure food_insert_func();
ERROR:  only support trigger in schema in B compatibility database
LINE 1: create trigger testscm_no.animals_trigger2
                       ^
alter trigger testscm_no.animals_trigger2 on testscm.animals_scm rename to animals_trigger2_1;
ERROR:  only support trigger in schema in B compatibility database
LINE 1: alter trigger testscm_no.animals_trigger2 on testscm.animals...
                      ^
drop trigger testscm_no.animals_trigger2;
ERROR:  only support trigger in schema in B compatibility database
LINE 1: drop trigger testscm_no.animals_trigger2;
                     ^
-- 2.2 cleanup
\c regression
drop database testdb;
