--
-- Test for pg_get_object_address,also test effect caused by object_address
--
create database test_obj_address dbcompatibility 'PG';
\c test_obj_address;
-- test commemt on type and domain using schema.typename or schema.domainname
create schema commenton_schema;
-- type and domain
create type typ1 as (f1 int, f2 text);
create domain dom1 as text check(value > 'comment');
comment on type typ1 is 'type typ1';
comment on domain dom1 is 'domain dom1';
create type commenton_schema.typ2 as (f1 int, f2 text);
create domain commenton_schema.dom2 as text check(value > 'comment');
comment on type commenton_schema.typ2 is 'commenton_schema.typ2 ';
comment on domain commenton_schema.dom2 is 'commenton_schema.dom2';
drop type typ1 CASCADE;
drop domain dom1 CASCADE;
drop type commenton_schema.typ1 CASCADE;
ERROR:  type "commenton_schema.typ1" does not exist
drop domain commenton_schema.dom1 CASCADE;
ERROR:  type "commenton_schema.dom1" does not exist
drop schema commenton_schema CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to type commenton_schema.typ2
drop cascades to type commenton_schema.dom2
-- Clean up in case a prior regression run failed
SET client_min_messages TO 'warning';
DROP ROLE IF EXISTS regress_addr_user;
RESET client_min_messages;
CREATE USER regress_addr_user with sysadmin password 'Gaussdba@Mpp';
-- Test generic object addressing/identification functions
CREATE SCHEMA addr_nsp;
SET search_path TO 'addr_nsp';
CREATE FOREIGN DATA WRAPPER addr_fdw;
CREATE SERVER addr_fserv FOREIGN DATA WRAPPER addr_fdw;
CREATE TEXT SEARCH DICTIONARY addr_ts_dict (template=simple);
CREATE TEXT SEARCH CONFIGURATION addr_ts_conf (copy=english);
CREATE TABLE addr_nsp.gentable (
	a serial primary key CONSTRAINT a_chk CHECK (a > 0),
	b text DEFAULT 'hello');
NOTICE:  CREATE TABLE will create implicit sequence "gentable_a_seq" for serial column "gentable.a"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gentable_pkey" for table "gentable"
CREATE VIEW addr_nsp.genview AS SELECT * from addr_nsp.gentable;
CREATE MATERIALIZED VIEW addr_nsp.genmatview AS SELECT * FROM addr_nsp.gentable;
CREATE TYPE addr_nsp.gencomptype AS (a int);
CREATE TYPE addr_nsp.genenum AS ENUM ('one', 'two');
CREATE FOREIGN TABLE addr_nsp.genftable (a int) SERVER addr_fserv;
CREATE AGGREGATE addr_nsp.genaggr(int4) (sfunc = int4pl, stype = int4);
CREATE DOMAIN addr_nsp.gendomain AS int4 CONSTRAINT domconstr CHECK (value > 0);
CREATE FUNCTION addr_nsp.trig() RETURNS TRIGGER LANGUAGE plpgsql AS $$ BEGIN END; $$;
CREATE TRIGGER t BEFORE INSERT ON addr_nsp.gentable FOR EACH ROW EXECUTE PROCEDURE addr_nsp.trig();
CREATE SERVER "integer" FOREIGN DATA WRAPPER addr_fdw;
CREATE USER MAPPING FOR regress_addr_user SERVER "integer";
ALTER DEFAULT PRIVILEGES FOR ROLE regress_addr_user IN SCHEMA public GRANT ALL ON TABLES TO regress_addr_user;
ALTER DEFAULT PRIVILEGES FOR ROLE regress_addr_user REVOKE DELETE ON TABLES FROM regress_addr_user;
CREATE PUBLICATION addr_pub FOR TABLE addr_nsp.gentable;
WARNING:  wal_level is insufficient to publish logical changes
HINT:  Set wal_level to logical before creating subscriptions.
CREATE SUBSCRIPTION addr_sub CONNECTION 'host=abc port=12345' publication pub WITH (CONNECT=false);
WARNING:  tables were not subscribed, you will have to run ALTER SUBSCRIPTION ... REFRESH PUBLICATION to subscribe the tables
create function test_event_trigger() returns event_trigger as $$
BEGIN
    RAISE NOTICE 'test_event_trigger: % %', tg_event, tg_tag;
END
$$ language plpgsql;
create event trigger regress_event_trigger on ddl_command_start
   execute procedure test_event_trigger();
-- test some error cases
SELECT * from pg_get_object_address('stone', '{}', '{}');
ERROR:  unrecognized object type "stone"
SELECT * from pg_get_object_address('table', '{}', '{}');
ERROR:  name list must be of length at least 1
SELECT * from pg_get_object_address('table', '{NULL}', '{}');
ERROR:  name or argument lists may not contain nulls
-- unrecognized object types
DO $$
DECLARE
	objtype text;
BEGIN
	FOR objtype IN VALUES ('toast table'), ('index column'), ('sequence column'),
		('toast table column'), ('view column'), ('materialized view column')
	LOOP
		BEGIN
			PERFORM pg_get_object_address(objtype, '{one}', '{}');
		EXCEPTION WHEN invalid_parameter_value THEN
			RAISE WARNING 'error for %: %', objtype, sqlerrm;
		END;
	END LOOP;
END;
$$;
WARNING:  error for toast table: unsupported object type "toast table"
WARNING:  error for index column: unsupported object type "index column"
WARNING:  error for sequence column: unsupported object type "sequence column"
WARNING:  error for toast table column: unsupported object type "toast table column"
WARNING:  error for view column: unsupported object type "view column"
WARNING:  error for materialized view column: unsupported object type "materialized view column"
-- miscellaneous other errors
select * from pg_get_object_address('operator of access method', '{btree,integer_ops,1}', '{int4,bool}');
ERROR:  operator 1 (int4, bool) of operator family integer_ops for access method btree does not exist
select * from pg_get_object_address('operator of access method', '{btree,integer_ops,99}', '{int4,int4}');
ERROR:  operator 99 (int4, int4) of operator family integer_ops for access method btree does not exist
select * from pg_get_object_address('function of access method', '{btree,integer_ops,1}', '{int4,bool}');
ERROR:  function 1 (int4, bool) of operator family integer_ops for access method btree does not exist
select * from pg_get_object_address('function of access method', '{btree,integer_ops,99}', '{int4,int4}');
ERROR:  function 99 (int4, int4) of operator family integer_ops for access method btree does not exist
DO $$
DECLARE
	objtype text;
	names	text[];
	args	text[];
BEGIN
	FOR objtype IN VALUES
		('table'), ('index'), ('sequence'), ('view'),
		('materialized view'), ('foreign table'),
		('table column'), ('foreign table column'),
		('aggregate'), ('function'), ('type'), ('cast'),
		('table constraint'), ('domain constraint'), ('conversion'), ('default value'),
		('operator'), ('operator class'), ('operator family'), ('rule'), ('trigger'),
		('text search parser'), ('text search dictionary'),
		('text search template'), ('text search configuration'),
		('user mapping'),
		('operator of access method'), ('function of access method'),
		('publication relation')
	LOOP
		FOR names IN VALUES ('{eins}'), ('{addr_nsp, zwei}'), ('{eins, zwei, drei}')
		LOOP
			FOR args IN VALUES ('{}'), ('{integer}')
			LOOP
				BEGIN
					PERFORM pg_get_object_address(objtype, names, args);
				EXCEPTION WHEN OTHERS THEN
						RAISE WARNING 'error for %,%,%: %', objtype, names, args, sqlerrm;
				END;
			END LOOP;
		END LOOP;
	END LOOP;
END;
$$;
WARNING:  error for table,{eins},{}: relation "eins" does not exist
WARNING:  error for table,{eins},{integer}: relation "eins" does not exist
WARNING:  error for table,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for table,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for table,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for table,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for index,{eins},{}: relation "eins" does not exist
WARNING:  error for index,{eins},{integer}: relation "eins" does not exist
WARNING:  error for index,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for index,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for index,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for index,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for sequence,{eins},{}: relation "eins" does not exist
WARNING:  error for sequence,{eins},{integer}: relation "eins" does not exist
WARNING:  error for sequence,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for sequence,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for sequence,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for sequence,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for view,{eins},{}: relation "eins" does not exist
WARNING:  error for view,{eins},{integer}: relation "eins" does not exist
WARNING:  error for view,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for view,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for view,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for view,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for materialized view,{eins},{}: relation "eins" does not exist
WARNING:  error for materialized view,{eins},{integer}: relation "eins" does not exist
WARNING:  error for materialized view,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for materialized view,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for materialized view,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for materialized view,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for foreign table,{eins},{}: relation "eins" does not exist
WARNING:  error for foreign table,{eins},{integer}: relation "eins" does not exist
WARNING:  error for foreign table,{addr_nsp,zwei},{}: relation "addr_nsp.zwei" does not exist
WARNING:  error for foreign table,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for foreign table,{eins,zwei,drei},{}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for foreign table,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
WARNING:  error for table column,{eins},{}: column name must be qualified
WARNING:  error for table column,{eins},{integer}: column name must be qualified
WARNING:  error for table column,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for table column,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for table column,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for table column,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for foreign table column,{eins},{}: column name must be qualified
WARNING:  error for foreign table column,{eins},{integer}: column name must be qualified
WARNING:  error for foreign table column,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for foreign table column,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for foreign table column,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for foreign table column,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for aggregate,{eins},{}: aggregate eins(*) does not exist
WARNING:  error for aggregate,{eins},{integer}: aggregate eins(integer) does not exist
WARNING:  error for aggregate,{addr_nsp,zwei},{}: aggregate addr_nsp.zwei(*) does not exist
WARNING:  error for aggregate,{addr_nsp,zwei},{integer}: aggregate addr_nsp.zwei(integer) does not exist
WARNING:  error for aggregate,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for aggregate,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for function,{eins},{}: function eins does not exist
WARNING:  error for function,{eins},{integer}: function eins(integer) does not exist
WARNING:  error for function,{addr_nsp,zwei},{}: function addr_nsp.zwei does not exist
WARNING:  error for function,{addr_nsp,zwei},{integer}: function addr_nsp.zwei(integer) does not exist
WARNING:  error for function,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for function,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for type,{eins},{}: type "eins" does not exist
WARNING:  error for type,{eins},{integer}: type "eins" does not exist
WARNING:  error for type,{addr_nsp,zwei},{}: name list length must be exactly 1
WARNING:  error for type,{addr_nsp,zwei},{integer}: name list length must be exactly 1
WARNING:  error for type,{eins,zwei,drei},{}: name list length must be exactly 1
WARNING:  error for type,{eins,zwei,drei},{integer}: name list length must be exactly 1
WARNING:  error for cast,{eins},{}: argument list length must be exactly 1
WARNING:  error for cast,{eins},{integer}: type "eins" does not exist
WARNING:  error for cast,{addr_nsp,zwei},{}: name list length must be exactly 1
WARNING:  error for cast,{addr_nsp,zwei},{integer}: name list length must be exactly 1
WARNING:  error for cast,{eins,zwei,drei},{}: name list length must be exactly 1
WARNING:  error for cast,{eins,zwei,drei},{integer}: name list length must be exactly 1
WARNING:  error for table constraint,{eins},{}: must specify relation and object name
WARNING:  error for table constraint,{eins},{integer}: must specify relation and object name
WARNING:  error for table constraint,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for table constraint,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for table constraint,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for table constraint,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for domain constraint,{eins},{}: type "eins" does not exist
WARNING:  error for domain constraint,{eins},{integer}: type "eins" does not exist
WARNING:  error for domain constraint,{addr_nsp,zwei},{}: name list length must be exactly 1
WARNING:  error for domain constraint,{addr_nsp,zwei},{integer}: name list length must be exactly 1
WARNING:  error for domain constraint,{eins,zwei,drei},{}: name list length must be exactly 1
WARNING:  error for domain constraint,{eins,zwei,drei},{integer}: name list length must be exactly 1
WARNING:  error for conversion,{eins},{}: conversion "eins" does not exist
WARNING:  error for conversion,{eins},{integer}: conversion "eins" does not exist
WARNING:  error for conversion,{addr_nsp,zwei},{}: conversion "addr_nsp.zwei" does not exist
WARNING:  error for conversion,{addr_nsp,zwei},{integer}: conversion "addr_nsp.zwei" does not exist
WARNING:  error for conversion,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for conversion,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for default value,{eins},{}: column name must be qualified
WARNING:  error for default value,{eins},{integer}: column name must be qualified
WARNING:  error for default value,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for default value,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for default value,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for default value,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for operator,{eins},{}: argument list length must be exactly 2
WARNING:  error for operator,{eins},{integer}: argument list length must be exactly 2
WARNING:  error for operator,{addr_nsp,zwei},{}: argument list length must be exactly 2
WARNING:  error for operator,{addr_nsp,zwei},{integer}: argument list length must be exactly 2
WARNING:  error for operator,{eins,zwei,drei},{}: argument list length must be exactly 2
WARNING:  error for operator,{eins,zwei,drei},{integer}: argument list length must be exactly 2
WARNING:  error for operator class,{eins},{}: name list length must be at least 2
WARNING:  error for operator class,{eins},{integer}: name list length must be at least 2
WARNING:  error for operator class,{addr_nsp,zwei},{}: access method "addr_nsp" does not exist
WARNING:  error for operator class,{addr_nsp,zwei},{integer}: access method "addr_nsp" does not exist
WARNING:  error for operator class,{eins,zwei,drei},{}: access method "eins" does not exist
WARNING:  error for operator class,{eins,zwei,drei},{integer}: access method "eins" does not exist
WARNING:  error for operator family,{eins},{}: name list length must be at least 2
WARNING:  error for operator family,{eins},{integer}: name list length must be at least 2
WARNING:  error for operator family,{addr_nsp,zwei},{}: access method "addr_nsp" does not exist
WARNING:  error for operator family,{addr_nsp,zwei},{integer}: access method "addr_nsp" does not exist
WARNING:  error for operator family,{eins,zwei,drei},{}: access method "eins" does not exist
WARNING:  error for operator family,{eins,zwei,drei},{integer}: access method "eins" does not exist
WARNING:  error for rule,{eins},{}: rule "eins" does not exist
WARNING:  error for rule,{eins},{integer}: rule "eins" does not exist
WARNING:  error for rule,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for rule,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for rule,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for rule,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for trigger,{eins},{}: must specify relation and object name
WARNING:  error for trigger,{eins},{integer}: must specify relation and object name
WARNING:  error for trigger,{addr_nsp,zwei},{}: relation "addr_nsp" does not exist
WARNING:  error for trigger,{addr_nsp,zwei},{integer}: relation "addr_nsp" does not exist
WARNING:  error for trigger,{eins,zwei,drei},{}: schema "eins" does not exist
WARNING:  error for trigger,{eins,zwei,drei},{integer}: schema "eins" does not exist
WARNING:  error for text search parser,{eins},{}: text search parser "eins" does not exist
WARNING:  error for text search parser,{eins},{integer}: text search parser "eins" does not exist
WARNING:  error for text search parser,{addr_nsp,zwei},{}: text search parser "addr_nsp.zwei" does not exist
WARNING:  error for text search parser,{addr_nsp,zwei},{integer}: text search parser "addr_nsp.zwei" does not exist
WARNING:  error for text search parser,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for text search parser,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for text search dictionary,{eins},{}: text search dictionary "eins" does not exist
WARNING:  error for text search dictionary,{eins},{integer}: text search dictionary "eins" does not exist
WARNING:  error for text search dictionary,{addr_nsp,zwei},{}: text search dictionary "addr_nsp.zwei" does not exist
WARNING:  error for text search dictionary,{addr_nsp,zwei},{integer}: text search dictionary "addr_nsp.zwei" does not exist
WARNING:  error for text search dictionary,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for text search dictionary,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for text search template,{eins},{}: text search template "eins" does not exist
WARNING:  error for text search template,{eins},{integer}: text search template "eins" does not exist
WARNING:  error for text search template,{addr_nsp,zwei},{}: text search template "addr_nsp.zwei" does not exist
WARNING:  error for text search template,{addr_nsp,zwei},{integer}: text search template "addr_nsp.zwei" does not exist
WARNING:  error for text search template,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for text search template,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for text search configuration,{eins},{}: text search configuration "eins" does not exist
WARNING:  error for text search configuration,{eins},{integer}: text search configuration "eins" does not exist
WARNING:  error for text search configuration,{addr_nsp,zwei},{}: text search configuration "addr_nsp.zwei" does not exist
WARNING:  error for text search configuration,{addr_nsp,zwei},{integer}: text search configuration "addr_nsp.zwei" does not exist
WARNING:  error for text search configuration,{eins,zwei,drei},{}: schema "zwei" does not exist
WARNING:  error for text search configuration,{eins,zwei,drei},{integer}: schema "zwei" does not exist
WARNING:  error for user mapping,{eins},{}: argument list length must be exactly 1
WARNING:  error for user mapping,{eins},{integer}: user mapping for user "eins" in server "integer" does not exist
WARNING:  error for user mapping,{addr_nsp,zwei},{}: argument list length must be exactly 1
WARNING:  error for user mapping,{addr_nsp,zwei},{integer}: user mapping for user "addr_nsp" in server "integer" does not exist
WARNING:  error for user mapping,{eins,zwei,drei},{}: argument list length must be exactly 1
WARNING:  error for user mapping,{eins,zwei,drei},{integer}: user mapping for user "eins" in server "integer" does not exist
WARNING:  error for operator of access method,{eins},{}: name list length must be at least 3
WARNING:  error for operator of access method,{eins},{integer}: name list length must be at least 3
WARNING:  error for operator of access method,{addr_nsp,zwei},{}: name list length must be at least 3
WARNING:  error for operator of access method,{addr_nsp,zwei},{integer}: name list length must be at least 3
WARNING:  error for operator of access method,{eins,zwei,drei},{}: argument list length must be exactly 2
WARNING:  error for operator of access method,{eins,zwei,drei},{integer}: argument list length must be exactly 2
WARNING:  error for function of access method,{eins},{}: name list length must be at least 3
WARNING:  error for function of access method,{eins},{integer}: name list length must be at least 3
WARNING:  error for function of access method,{addr_nsp,zwei},{}: name list length must be at least 3
WARNING:  error for function of access method,{addr_nsp,zwei},{integer}: name list length must be at least 3
WARNING:  error for function of access method,{eins,zwei,drei},{}: argument list length must be exactly 2
WARNING:  error for function of access method,{eins,zwei,drei},{integer}: argument list length must be exactly 2
WARNING:  error for publication relation,{eins},{}: argument list length must be exactly 1
WARNING:  error for publication relation,{eins},{integer}: relation "eins" does not exist
WARNING:  error for publication relation,{addr_nsp,zwei},{}: argument list length must be exactly 1
WARNING:  error for publication relation,{addr_nsp,zwei},{integer}: relation "addr_nsp.zwei" does not exist
WARNING:  error for publication relation,{eins,zwei,drei},{}: argument list length must be exactly 1
WARNING:  error for publication relation,{eins,zwei,drei},{integer}: cross-database references are not implemented: "eins.zwei.drei"
-- these object types cannot be qualified names
SELECT * from pg_get_object_address('language', '{one}', '{}');
ERROR:  language "one" does not exist
SELECT * from pg_get_object_address('language', '{one,two}', '{}');
ERROR:  language name cannot be qualified
SELECT * from pg_get_object_address('large object', '{123}', '{}');
ERROR:  large object 123 does not exist
SELECT * from pg_get_object_address('large object', '{123,456}', '{}');
ERROR:  name list length must be exactly 1
SELECT * from pg_get_object_address('large object', '{blargh}', '{}');
ERROR:  invalid input syntax for type oid: "blargh"
SELECT * from pg_get_object_address('schema', '{one}', '{}');
ERROR:  schema "one" does not exist
SELECT * from pg_get_object_address('schema', '{one,two}', '{}');
ERROR:  schema name cannot be qualified
SELECT * from pg_get_object_address('role', '{one}', '{}');
ERROR:  role "one" does not exist
SELECT * from pg_get_object_address('role', '{one,two}', '{}');
ERROR:  role name cannot be qualified
SELECT * from pg_get_object_address('database', '{one}', '{}');
ERROR:  database "one" does not exist
SELECT * from pg_get_object_address('database', '{one,two}', '{}');
ERROR:  database name cannot be qualified
SELECT * from pg_get_object_address('tablespace', '{one}', '{}');
ERROR:  tablespace "one" does not exist
SELECT * from pg_get_object_address('tablespace', '{one,two}', '{}');
ERROR:  tablespace name cannot be qualified
SELECT * from pg_get_object_address('foreign-data wrapper', '{one}', '{}');
ERROR:  foreign-data wrapper "one" does not exist
SELECT * from pg_get_object_address('foreign-data wrapper', '{one,two}', '{}');
ERROR:  foreign-data wrapper name cannot be qualified
SELECT * from pg_get_object_address('server', '{one}', '{}');
ERROR:  server "one" does not exist
SELECT * from pg_get_object_address('server', '{one,two}', '{}');
ERROR:  server name cannot be qualified
SELECT * from pg_get_object_address('extension', '{one}', '{}');
ERROR:  extension "one" does not exist
SELECT * from pg_get_object_address('extension', '{one,two}', '{}');
ERROR:  extension name cannot be qualified
SELECT * from pg_get_object_address('event trigger', '{one}', '{}');
ERROR:  event trigger "one" does not exist
SELECT * from pg_get_object_address('event trigger', '{one,two}', '{}');
ERROR:  event trigger name cannot be qualified
SELECT * from pg_get_object_address('publication', '{one}', '{}');
ERROR:  publication "one" does not exist
SELECT * from pg_get_object_address('publication', '{one,two}', '{}');
ERROR:  publication name cannot be qualified
SELECT * from pg_get_object_address('subscription', '{one}', '{}');
ERROR:  subscription "one" does not exist
SELECT * from pg_get_object_address('subscription', '{one,two}', '{}');
ERROR:  subscription name cannot be qualified
-- test uncovered object class
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_rlspolicy');
ERROR:  could not find tuple for policy 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_constraint');
ERROR:  cache lookup failed for constraint 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_largeobject');
     type     | schema | name | identity 
--------------+--------+------+----------
 large object |        |      | 0
(1 row)

SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_opclass');
ERROR:  cache lookup failed for opclass 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_ts_parser');
ERROR:  cache lookup failed for text search parser 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_ts_template');
ERROR:  cache lookup failed for text search template 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_ts_template');
ERROR:  cache lookup failed for text search template 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_default_acl');
ERROR:  could not find tuple for default ACL 0
CONTEXT:  referenced column: type
/*unsupported object class*/
SELECT (pg_identify_object(oid, 0, 0)).* FROM (select oid from pg_class where relname='pg_job');
      type      | schema | name |           identity           
----------------+--------+------+------------------------------
 unsupport type |        |      | unrecognized object 9022 0 0
(1 row)

-- test wrong oid cases
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('table', '{addr_nsp, gentable}'::text[], '{}'::text[]);
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('index', '{addr_nsp, gentable_pkey}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('sequence', '{addr_nsp, gentable_a_seq}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('view', '{addr_nsp, genview}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('materialized view', '{addr_nsp, genmatview}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('foreign table', '{addr_nsp, genftable}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('table column', '{addr_nsp, gentable, b}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('aggregate', '{addr_nsp, genaggr}', '{int4}');
ERROR:  cache lookup failed for procedure 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('foreign table column', '{addr_nsp, genftable, a}', '{}');
ERROR:  cache lookup failed for relation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('function', '{pg_catalog, pg_identify_object}', '{pg_catalog.oid, pg_catalog.oid, int4}');
ERROR:  cache lookup failed for procedure 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('type', '{addr_nsp.gendomain}', '{}');
ERROR:  cache lookup failed for type 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('cast', '{int8}', '{int4}');
ERROR:  could not find tuple for cast 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('collation', '{default}', '{}');
ERROR:  cache lookup failed for collation 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('table constraint', '{addr_nsp, gentable, a_chk}', '{}');
ERROR:  cache lookup failed for constraint 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('domain constraint', '{addr_nsp.gendomain}', '{domconstr}');
ERROR:  cache lookup failed for constraint 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('conversion', '{pg_catalog, ascii_to_mic}', '{}');
ERROR:  cache lookup failed for conversion 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('default value', '{addr_nsp, gentable, b}', '{}');
ERROR:  could not find tuple for attrdef 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('language', '{plpgsql}', '{}');
ERROR:  cache lookup failed for language 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('operator class', '{btree, int4_ops}', '{}');
ERROR:  cache lookup failed for opclass 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('operator family', '{btree, integer_ops}', '{}');
ERROR:  cache lookup failed for opfamily 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('operator of access method', '{btree,integer_ops,1}', '{integer,integer}');
ERROR:  could not find tuple for amop entry 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('function of access method', '{btree,integer_ops,2}', '{integer,integer}');
ERROR:  could not find tuple for amproc entry 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('rule', '{addr_nsp, genview, _RETURN}', '{}');
ERROR:  could not find tuple for rule 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('trigger', '{addr_nsp, gentable, t}', '{}');
ERROR:  could not find tuple for trigger 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('schema', '{addr_nsp}', '{}');
ERROR:  cache lookup failed for namespace 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('text search dictionary', '{addr_ts_dict}', '{}');
ERROR:  cache lookup failed for text search dictionary 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('text search configuration', '{addr_ts_conf}', '{}');
ERROR:  cache lookup failed for text search configuration 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('role', '{regress_addr_user}', '{}');
ERROR:  invalid role OID: 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('database', '{test_obj_address}', '{}');
ERROR:  cache lookup failed for database 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('tablespace', '{pg_default}', '{}');
ERROR:  cache lookup failed for tablespace 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('foreign-data wrapper', '{addr_fdw}', '{}');
ERROR:  cache lookup failed for foreign-data wrapper 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('server', '{addr_fserv}', '{}');
ERROR:  cache lookup failed for foreign server 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('user mapping', '{regress_addr_user}', '{integer}');
ERROR:  cache lookup failed for user mapping 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('extension', '{hstore}', '{}');
ERROR:  cache lookup failed for extension 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('event trigger', '{regress_event_trigger}', '{}');
ERROR:  cache lookup failed for event trigger 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('publication', '{addr_pub}', '{}');
ERROR:  cache lookup failed for publication 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('publication relation', '{addr_nsp, gentable}', '{addr_pub}');
ERROR:  could not find tuple for publication 0
CONTEXT:  referenced column: type
SELECT (pg_identify_object(classid, 0, subobjid)).* FROM pg_get_object_address('subscription', '{addr_sub}', '{}');
ERROR:  cache lookup failed for subscription 0
CONTEXT:  referenced column: type
-- test successful cases
WITH objects (type, name, args) AS (VALUES
				('table', '{addr_nsp, gentable}'::text[], '{}'::text[]),
				('index', '{addr_nsp, gentable_pkey}', '{}'),
				('sequence', '{addr_nsp, gentable_a_seq}', '{}'),
				-- toast table
				('view', '{addr_nsp, genview}', '{}'),
				('materialized view', '{addr_nsp, genmatview}', '{}'),
				('foreign table', '{addr_nsp, genftable}', '{}'),
				('table column', '{addr_nsp, gentable, b}', '{}'),
				('foreign table column', '{addr_nsp, genftable, a}', '{}'),
				('aggregate', '{addr_nsp, genaggr}', '{int4}'),
				('function', '{pg_catalog, pg_identify_object}', '{pg_catalog.oid, pg_catalog.oid, int4}'),
				('type', '{pg_catalog._int4}', '{}'),
				('type', '{addr_nsp.gendomain}', '{}'),
				('type', '{addr_nsp.gencomptype}', '{}'),
				('type', '{addr_nsp.genenum}', '{}'),
				('cast', '{int8}', '{int4}'),
				('collation', '{default}', '{}'),
				('table constraint', '{addr_nsp, gentable, a_chk}', '{}'),
				('domain constraint', '{addr_nsp.gendomain}', '{domconstr}'),
				('conversion', '{pg_catalog, ascii_to_mic}', '{}'),
				('default value', '{addr_nsp, gentable, b}', '{}'),
				('language', '{plpgsql}', '{}'),
				-- large object
				('operator', '{+}', '{int4, int4}'),
				('operator class', '{btree, int4_ops}', '{}'),
				('operator family', '{btree, integer_ops}', '{}'),
				('operator of access method', '{btree,integer_ops,1}', '{integer,integer}'),
				('function of access method', '{btree,integer_ops,2}', '{integer,integer}'),
				('rule', '{addr_nsp, genview, _RETURN}', '{}'),
				('trigger', '{addr_nsp, gentable, t}', '{}'),
				('schema', '{addr_nsp}', '{}'),
				('text search dictionary', '{addr_ts_dict}', '{}'),
				('text search configuration', '{addr_ts_conf}', '{}'),
				('role', '{regress_addr_user}', '{}'),
				('database', '{test_obj_address}', '{}'),
				('tablespace', '{pg_default}', '{}'),
				('foreign-data wrapper', '{addr_fdw}', '{}'),
				('server', '{addr_fserv}', '{}'),
				('user mapping', '{regress_addr_user}', '{integer}'),
				('extension', '{hstore}', '{}'),
				('event trigger', '{regress_event_trigger}', '{}'),
				('publication', '{addr_pub}', '{}'),
				('publication relation', '{addr_nsp, gentable}', '{addr_pub}'),
				('subscription', '{addr_sub}', '{}')
        )
SELECT (pg_identify_object(addr1.classid, addr1.objid, addr1.subobjid)).*
	  FROM (SELECT (pg_get_object_address(type, name, args)).* FROM objects) AS addr1
	ORDER BY addr1.classid, addr1.objid, addr1.subobjid;
           type            |   schema   |         name          |                             identity                              
---------------------------+------------+-----------------------+-------------------------------------------------------------------
 tablespace                |            | pg_default            | pg_default
 type                      | pg_catalog | _int4                 | integer[]
 type                      | addr_nsp   | gencomptype           | addr_nsp.gencomptype
 type                      | addr_nsp   | genenum               | addr_nsp.genenum
 type                      | addr_nsp   | gendomain             | addr_nsp.gendomain
 function                  | pg_catalog |                       | pg_catalog.pg_identify_object(oid,oid,integer)
 function                  | addr_nsp   |                       | addr_nsp.genaggr(integer)
 sequence                  | addr_nsp   | gentable_a_seq        | addr_nsp.gentable_a_seq
 table                     | addr_nsp   | gentable              | addr_nsp.gentable
 table column              | addr_nsp   | gentable              | addr_nsp.gentable.b
 index                     | addr_nsp   | gentable_pkey         | addr_nsp.gentable_pkey
 view                      | addr_nsp   | genview               | addr_nsp.genview
 relation                  | addr_nsp   | genmatview            | addr_nsp.genmatview
 foreign table             | addr_nsp   | genftable             | addr_nsp.genftable
 foreign table column      | addr_nsp   | genftable             | addr_nsp.genftable.a
 role                      |            | regress_addr_user     | regress_addr_user
 database                  |            | test_obj_address      | test_obj_address
 server                    |            | addr_fserv            | addr_fserv
 user mapping              |            |                       | regress_addr_user on server integer
 foreign-data wrapper      |            | addr_fdw              | addr_fdw
 operator of access method |            |                       | operator 1 (integer, integer) of pg_catalog.integer_ops for btree
 function of access method |            |                       | function 2 (integer, integer) of pg_catalog.integer_ops for btree
 default value             |            |                       | for addr_nsp.gentable.b
 cast                      |            |                       | (bigint AS integer)
 table constraint          | addr_nsp   |                       | a_chk on addr_nsp.gentable
 domain constraint         | addr_nsp   |                       | domconstr on addr_nsp.gendomain
 conversion                | pg_catalog | ascii_to_mic          | pg_catalog.ascii_to_mic
 language                  |            | plpgsql               | plpgsql
 schema                    |            | addr_nsp              | addr_nsp
 operator class            | pg_catalog | int4_ops              | pg_catalog.int4_ops USING btree
 operator                  | pg_catalog |                       | pg_catalog.+(integer,integer)
 rule                      |            |                       | "_RETURN" on addr_nsp.genview
 trigger                   |            |                       | t on addr_nsp.gentable
 operator family           | pg_catalog | integer_ops           | pg_catalog.integer_ops for btree
 extension                 |            | hstore                | hstore
 collation                 | pg_catalog | "default"             | pg_catalog."default"
 event trigger             |            | regress_event_trigger | regress_event_trigger
 text search dictionary    | addr_nsp   | addr_ts_dict          | addr_nsp.addr_ts_dict
 text search configuration | addr_nsp   | addr_ts_conf          | addr_nsp.addr_ts_conf
 subscription              |            | addr_sub              | addr_sub
 publication               |            | addr_pub              | addr_pub
 publication relation      |            |                       | addr_nsp.gentable in publication addr_pub
(42 rows)

	
---
--- Cleanup resources
---
\set VERBOSITY terse \\ -- suppress cascade details
DROP EVENT TRIGGER regress_event_trigger;
DROP FOREIGN DATA WRAPPER addr_fdw CASCADE;
NOTICE:  drop cascades to 4 other objects
DROP PUBLICATION addr_pub;
DROP SUBSCRIPTION addr_sub;
DROP SCHEMA addr_nsp CASCADE;
NOTICE:  drop cascades to 11 other objects
DROP OWNED BY regress_addr_user;
DROP USER regress_addr_user;
\c regression
drop database test_obj_address;
