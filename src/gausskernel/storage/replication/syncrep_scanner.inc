#line 2 "syncrep_scanner.inc"

#line 4 "syncrep_scanner.inc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define syncrep_scanner_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer syncrep_scanner_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define syncrep_scanner_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer syncrep_scanner_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define syncrep_scanner_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer syncrep_scanner_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define syncrep_scanner_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string syncrep_scanner_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define syncrep_scanner_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes syncrep_scanner_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define syncrep_scanner_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer syncrep_scanner_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define syncrep_scanner_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer syncrep_scanner_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define syncrep_scanner_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state syncrep_scanner_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define syncrep_scanner_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer syncrep_scanner_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define syncrep_scanner_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state syncrep_scanner_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define syncrep_scanner_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state syncrep_scanner_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define syncrep_scanner_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack syncrep_scanner_yyensure_buffer_stack
#endif

#ifdef yylex
#define syncrep_scanner_yylex_ALREADY_DEFINED
#else
#define yylex syncrep_scanner_yylex
#endif

#ifdef yyrestart
#define syncrep_scanner_yyrestart_ALREADY_DEFINED
#else
#define yyrestart syncrep_scanner_yyrestart
#endif

#ifdef yylex_init
#define syncrep_scanner_yylex_init_ALREADY_DEFINED
#else
#define yylex_init syncrep_scanner_yylex_init
#endif

#ifdef yylex_init_extra
#define syncrep_scanner_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra syncrep_scanner_yylex_init_extra
#endif

#ifdef yylex_destroy
#define syncrep_scanner_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy syncrep_scanner_yylex_destroy
#endif

#ifdef yyget_debug
#define syncrep_scanner_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug syncrep_scanner_yyget_debug
#endif

#ifdef yyset_debug
#define syncrep_scanner_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug syncrep_scanner_yyset_debug
#endif

#ifdef yyget_extra
#define syncrep_scanner_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra syncrep_scanner_yyget_extra
#endif

#ifdef yyset_extra
#define syncrep_scanner_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra syncrep_scanner_yyset_extra
#endif

#ifdef yyget_in
#define syncrep_scanner_yyget_in_ALREADY_DEFINED
#else
#define yyget_in syncrep_scanner_yyget_in
#endif

#ifdef yyset_in
#define syncrep_scanner_yyset_in_ALREADY_DEFINED
#else
#define yyset_in syncrep_scanner_yyset_in
#endif

#ifdef yyget_out
#define syncrep_scanner_yyget_out_ALREADY_DEFINED
#else
#define yyget_out syncrep_scanner_yyget_out
#endif

#ifdef yyset_out
#define syncrep_scanner_yyset_out_ALREADY_DEFINED
#else
#define yyset_out syncrep_scanner_yyset_out
#endif

#ifdef yyget_leng
#define syncrep_scanner_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng syncrep_scanner_yyget_leng
#endif

#ifdef yyget_text
#define syncrep_scanner_yyget_text_ALREADY_DEFINED
#else
#define yyget_text syncrep_scanner_yyget_text
#endif

#ifdef yyget_lineno
#define syncrep_scanner_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno syncrep_scanner_yyget_lineno
#endif

#ifdef yyset_lineno
#define syncrep_scanner_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno syncrep_scanner_yyset_lineno
#endif

#ifdef yyget_column
#define syncrep_scanner_yyget_column_ALREADY_DEFINED
#else
#define yyget_column syncrep_scanner_yyget_column
#endif

#ifdef yyset_column
#define syncrep_scanner_yyset_column_ALREADY_DEFINED
#else
#define yyset_column syncrep_scanner_yyset_column
#endif

#ifdef yywrap
#define syncrep_scanner_yywrap_ALREADY_DEFINED
#else
#define yywrap syncrep_scanner_yywrap
#endif

#ifdef yyget_lval
#define syncrep_scanner_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval syncrep_scanner_yyget_lval
#endif

#ifdef yyset_lval
#define syncrep_scanner_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval syncrep_scanner_yyset_lval
#endif

#ifdef yyget_lloc
#define syncrep_scanner_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc syncrep_scanner_yyget_lloc
#endif

#ifdef yyset_lloc
#define syncrep_scanner_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc syncrep_scanner_yyset_lloc
#endif

#ifdef yyalloc
#define syncrep_scanner_yyalloc_ALREADY_DEFINED
#else
#define yyalloc syncrep_scanner_yyalloc
#endif

#ifdef yyrealloc
#define syncrep_scanner_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc syncrep_scanner_yyrealloc
#endif

#ifdef yyfree
#define syncrep_scanner_yyfree_ALREADY_DEFINED
#else
#define yyfree syncrep_scanner_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_ZERO 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define syncrep_scanner_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef const struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[4451] =
    {
 {   0,   0 }, {   0,4195 }, {   0,   0 }, {   0,4193 }, {   1,1032 },
 {   2,1032 }, {   3,1032 }, {   4,1032 }, {   5,1032 }, {   6,1032 },
 {   7,1032 }, {   8,1032 }, {   9,1034 }, {  10,1039 }, {  11,1034 },
 {  12,1034 }, {  13,1034 }, {  14,1032 }, {  15,1032 }, {  16,1032 },
 {  17,1032 }, {  18,1032 }, {  19,1032 }, {  20,1032 }, {  21,1032 },
 {  22,1032 }, {  23,1032 }, {  24,1032 }, {  25,1032 }, {  26,1032 },
 {  27,1032 }, {  28,1032 }, {  29,1032 }, {  30,1032 }, {  31,1032 },
 {  32,1034 }, {  33,1032 }, {  34,1036 }, {  35,1032 }, {  36,1032 },
 {  37,1032 }, {  38,1032 }, {  39,1032 }, {  40,1041 }, {  41,1054 },
 {  42,1056 }, {  43,1032 }, {  44,1058 }, {  45,1032 }, {  46,1032 },

 {  47,1032 }, {  48,1060 }, {  49,1060 }, {  50,1060 }, {  51,1060 },
 {  52,1060 }, {  53,1060 }, {  54,1060 }, {  55,1060 }, {  56,1060 },
 {  57,1060 }, {  58,1032 }, {  59,1032 }, {  60,1032 }, {  61,1032 },
 {  62,1032 }, {  63,1032 }, {  64,1032 }, {  65,1082 }, {  66,1339 },
 {  67,1339 }, {  68,1339 }, {  69,1339 }, {  70,1596 }, {  71,1339 },
 {  72,1339 }, {  73,1339 }, {  74,1339 }, {  75,1339 }, {  76,1339 },
 {  77,1339 }, {  78,1339 }, {  79,1339 }, {  80,1339 }, {  81,1339 },
 {  82,1339 }, {  83,1339 }, {  84,1339 }, {  85,1339 }, {  86,1339 },
 {  87,1339 }, {  88,1339 }, {  89,1339 }, {  90,1339 }, {  91,1032 },
 {  92,1032 }, {  93,1032 }, {  94,1032 }, {  95,1339 }, {  96,1032 },

 {  97,1082 }, {  98,1339 }, {  99,1339 }, { 100,1339 }, { 101,1339 },
 { 102,1596 }, { 103,1339 }, { 104,1339 }, { 105,1339 }, { 106,1339 },
 { 107,1339 }, { 108,1339 }, { 109,1339 }, { 110,1339 }, { 111,1339 },
 { 112,1339 }, { 113,1339 }, { 114,1339 }, { 115,1339 }, { 116,1339 },
 { 117,1339 }, { 118,1339 }, { 119,1339 }, { 120,1339 }, { 121,1339 },
 { 122,1339 }, { 123,1032 }, { 124,1032 }, { 125,1032 }, { 126,1032 },
 { 127,1032 }, { 128,1339 }, { 129,1339 }, { 130,1339 }, { 131,1339 },
 { 132,1339 }, { 133,1339 }, { 134,1339 }, { 135,1339 }, { 136,1339 },
 { 137,1339 }, { 138,1339 }, { 139,1339 }, { 140,1339 }, { 141,1339 },
 { 142,1339 }, { 143,1339 }, { 144,1339 }, { 145,1339 }, { 146,1339 },

 { 147,1339 }, { 148,1339 }, { 149,1339 }, { 150,1339 }, { 151,1339 },
 { 152,1339 }, { 153,1339 }, { 154,1339 }, { 155,1339 }, { 156,1339 },
 { 157,1339 }, { 158,1339 }, { 159,1339 }, { 160,1339 }, { 161,1339 },
 { 162,1339 }, { 163,1339 }, { 164,1339 }, { 165,1339 }, { 166,1339 },
 { 167,1339 }, { 168,1339 }, { 169,1339 }, { 170,1339 }, { 171,1339 },
 { 172,1339 }, { 173,1339 }, { 174,1339 }, { 175,1339 }, { 176,1339 },
 { 177,1339 }, { 178,1339 }, { 179,1339 }, { 180,1339 }, { 181,1339 },
 { 182,1339 }, { 183,1339 }, { 184,1339 }, { 185,1339 }, { 186,1339 },
 { 187,1339 }, { 188,1339 }, { 189,1339 }, { 190,1339 }, { 191,1339 },
 { 192,1339 }, { 193,1339 }, { 194,1339 }, { 195,1339 }, { 196,1339 },

 { 197,1339 }, { 198,1339 }, { 199,1339 }, { 200,1339 }, { 201,1339 },
 { 202,1339 }, { 203,1339 }, { 204,1339 }, { 205,1339 }, { 206,1339 },
 { 207,1339 }, { 208,1339 }, { 209,1339 }, { 210,1339 }, { 211,1339 },
 { 212,1339 }, { 213,1339 }, { 214,1339 }, { 215,1339 }, { 216,1339 },
 { 217,1339 }, { 218,1339 }, { 219,1339 }, { 220,1339 }, { 221,1339 },
 { 222,1339 }, { 223,1339 }, { 224,1339 }, { 225,1339 }, { 226,1339 },
 { 227,1339 }, { 228,1339 }, { 229,1339 }, { 230,1339 }, { 231,1339 },
 { 232,1339 }, { 233,1339 }, { 234,1339 }, { 235,1339 }, { 236,1339 },
 { 237,1339 }, { 238,1339 }, { 239,1339 }, { 240,1339 }, { 241,1339 },
 { 242,1339 }, { 243,1339 }, { 244,1339 }, { 245,1339 }, { 246,1339 },

 { 247,1339 }, { 248,1339 }, { 249,1339 }, { 250,1339 }, { 251,1339 },
 { 252,1339 }, { 253,1339 }, { 254,1339 }, { 255,1339 }, { 256,1032 },
 {   0,   0 }, {   0,3935 }, {   1, 774 }, {   2, 774 }, {   3, 774 },
 {   4, 774 }, {   5, 774 }, {   6, 774 }, {   7, 774 }, {   8, 774 },
 {   9, 776 }, {  10, 781 }, {  11, 776 }, {  12, 776 }, {  13, 776 },
 {  14, 774 }, {  15, 774 }, {  16, 774 }, {  17, 774 }, {  18, 774 },
 {  19, 774 }, {  20, 774 }, {  21, 774 }, {  22, 774 }, {  23, 774 },
 {  24, 774 }, {  25, 774 }, {  26, 774 }, {  27, 774 }, {  28, 774 },
 {  29, 774 }, {  30, 774 }, {  31, 774 }, {  32, 776 }, {  33, 774 },
 {  34, 778 }, {  35, 774 }, {  36, 774 }, {  37, 774 }, {  38, 774 },

 {  39, 774 }, {  40, 783 }, {  41, 796 }, {  42, 798 }, {  43, 774 },
 {  44, 800 }, {  45, 774 }, {  46, 774 }, {  47, 774 }, {  48, 802 },
 {  49, 802 }, {  50, 802 }, {  51, 802 }, {  52, 802 }, {  53, 802 },
 {  54, 802 }, {  55, 802 }, {  56, 802 }, {  57, 802 }, {  58, 774 },
 {  59, 774 }, {  60, 774 }, {  61, 774 }, {  62, 774 }, {  63, 774 },
 {  64, 774 }, {  65, 824 }, {  66,1081 }, {  67,1081 }, {  68,1081 },
 {  69,1081 }, {  70,1338 }, {  71,1081 }, {  72,1081 }, {  73,1081 },
 {  74,1081 }, {  75,1081 }, {  76,1081 }, {  77,1081 }, {  78,1081 },
 {  79,1081 }, {  80,1081 }, {  81,1081 }, {  82,1081 }, {  83,1081 },
 {  84,1081 }, {  85,1081 }, {  86,1081 }, {  87,1081 }, {  88,1081 },

 {  89,1081 }, {  90,1081 }, {  91, 774 }, {  92, 774 }, {  93, 774 },
 {  94, 774 }, {  95,1081 }, {  96, 774 }, {  97, 824 }, {  98,1081 },
 {  99,1081 }, { 100,1081 }, { 101,1081 }, { 102,1338 }, { 103,1081 },
 { 104,1081 }, { 105,1081 }, { 106,1081 }, { 107,1081 }, { 108,1081 },
 { 109,1081 }, { 110,1081 }, { 111,1081 }, { 112,1081 }, { 113,1081 },
 { 114,1081 }, { 115,1081 }, { 116,1081 }, { 117,1081 }, { 118,1081 },
 { 119,1081 }, { 120,1081 }, { 121,1081 }, { 122,1081 }, { 123, 774 },
 { 124, 774 }, { 125, 774 }, { 126, 774 }, { 127, 774 }, { 128,1081 },
 { 129,1081 }, { 130,1081 }, { 131,1081 }, { 132,1081 }, { 133,1081 },
 { 134,1081 }, { 135,1081 }, { 136,1081 }, { 137,1081 }, { 138,1081 },

 { 139,1081 }, { 140,1081 }, { 141,1081 }, { 142,1081 }, { 143,1081 },
 { 144,1081 }, { 145,1081 }, { 146,1081 }, { 147,1081 }, { 148,1081 },
 { 149,1081 }, { 150,1081 }, { 151,1081 }, { 152,1081 }, { 153,1081 },
 { 154,1081 }, { 155,1081 }, { 156,1081 }, { 157,1081 }, { 158,1081 },
 { 159,1081 }, { 160,1081 }, { 161,1081 }, { 162,1081 }, { 163,1081 },
 { 164,1081 }, { 165,1081 }, { 166,1081 }, { 167,1081 }, { 168,1081 },
 { 169,1081 }, { 170,1081 }, { 171,1081 }, { 172,1081 }, { 173,1081 },
 { 174,1081 }, { 175,1081 }, { 176,1081 }, { 177,1081 }, { 178,1081 },
 { 179,1081 }, { 180,1081 }, { 181,1081 }, { 182,1081 }, { 183,1081 },
 { 184,1081 }, { 185,1081 }, { 186,1081 }, { 187,1081 }, { 188,1081 },

 { 189,1081 }, { 190,1081 }, { 191,1081 }, { 192,1081 }, { 193,1081 },
 { 194,1081 }, { 195,1081 }, { 196,1081 }, { 197,1081 }, { 198,1081 },
 { 199,1081 }, { 200,1081 }, { 201,1081 }, { 202,1081 }, { 203,1081 },
 { 204,1081 }, { 205,1081 }, { 206,1081 }, { 207,1081 }, { 208,1081 },
 { 209,1081 }, { 210,1081 }, { 211,1081 }, { 212,1081 }, { 213,1081 },
 { 214,1081 }, { 215,1081 }, { 216,1081 }, { 217,1081 }, { 218,1081 },
 { 219,1081 }, { 220,1081 }, { 221,1081 }, { 222,1081 }, { 223,1081 },
 { 224,1081 }, { 225,1081 }, { 226,1081 }, { 227,1081 }, { 228,1081 },
 { 229,1081 }, { 230,1081 }, { 231,1081 }, { 232,1081 }, { 233,1081 },
 { 234,1081 }, { 235,1081 }, { 236,1081 }, { 237,1081 }, { 238,1081 },

 { 239,1081 }, { 240,1081 }, { 241,1081 }, { 242,1081 }, { 243,1081 },
 { 244,1081 }, { 245,1081 }, { 246,1081 }, { 247,1081 }, { 248,1081 },
 { 249,1081 }, { 250,1081 }, { 251,1081 }, { 252,1081 }, { 253,1081 },
 { 254,1081 }, { 255,1081 }, { 256, 774 }, {   0,   0 }, {   0,3677 },
 {   1,1337 }, {   2,1337 }, {   3,1337 }, {   4,1337 }, {   5,1337 },
 {   6,1337 }, {   7,1337 }, {   8,1337 }, {   9,1337 }, {  10,1337 },
 {  11,1337 }, {  12,1337 }, {  13,1337 }, {  14,1337 }, {  15,1337 },
 {  16,1337 }, {  17,1337 }, {  18,1337 }, {  19,1337 }, {  20,1337 },
 {  21,1337 }, {  22,1337 }, {  23,1337 }, {  24,1337 }, {  25,1337 },
 {  26,1337 }, {  27,1337 }, {  28,1337 }, {  29,1337 }, {  30,1337 },

 {  31,1337 }, {  32,1337 }, {  33,1337 }, {  34, 546 }, {  35,1337 },
 {  36,1337 }, {  37,1337 }, {  38,1337 }, {  39,1337 }, {  40,1337 },
 {  41,1337 }, {  42,1337 }, {  43,1337 }, {  44,1337 }, {  45,1337 },
 {  46,1337 }, {  47,1337 }, {  48,1337 }, {  49,1337 }, {  50,1337 },
 {  51,1337 }, {  52,1337 }, {  53,1337 }, {  54,1337 }, {  55,1337 },
 {  56,1337 }, {  57,1337 }, {  58,1337 }, {  59,1337 }, {  60,1337 },
 {  61,1337 }, {  62,1337 }, {  63,1337 }, {  64,1337 }, {  65,1337 },
 {  66,1337 }, {  67,1337 }, {  68,1337 }, {  69,1337 }, {  70,1337 },
 {  71,1337 }, {  72,1337 }, {  73,1337 }, {  74,1337 }, {  75,1337 },
 {  76,1337 }, {  77,1337 }, {  78,1337 }, {  79,1337 }, {  80,1337 },

 {  81,1337 }, {  82,1337 }, {  83,1337 }, {  84,1337 }, {  85,1337 },
 {  86,1337 }, {  87,1337 }, {  88,1337 }, {  89,1337 }, {  90,1337 },
 {  91,1337 }, {  92,1337 }, {  93,1337 }, {  94,1337 }, {  95,1337 },
 {  96,1337 }, {  97,1337 }, {  98,1337 }, {  99,1337 }, { 100,1337 },
 { 101,1337 }, { 102,1337 }, { 103,1337 }, { 104,1337 }, { 105,1337 },
 { 106,1337 }, { 107,1337 }, { 108,1337 }, { 109,1337 }, { 110,1337 },
 { 111,1337 }, { 112,1337 }, { 113,1337 }, { 114,1337 }, { 115,1337 },
 { 116,1337 }, { 117,1337 }, { 118,1337 }, { 119,1337 }, { 120,1337 },
 { 121,1337 }, { 122,1337 }, { 123,1337 }, { 124,1337 }, { 125,1337 },
 { 126,1337 }, { 127,1337 }, { 128,1337 }, { 129,1337 }, { 130,1337 },

 { 131,1337 }, { 132,1337 }, { 133,1337 }, { 134,1337 }, { 135,1337 },
 { 136,1337 }, { 137,1337 }, { 138,1337 }, { 139,1337 }, { 140,1337 },
 { 141,1337 }, { 142,1337 }, { 143,1337 }, { 144,1337 }, { 145,1337 },
 { 146,1337 }, { 147,1337 }, { 148,1337 }, { 149,1337 }, { 150,1337 },
 { 151,1337 }, { 152,1337 }, { 153,1337 }, { 154,1337 }, { 155,1337 },
 { 156,1337 }, { 157,1337 }, { 158,1337 }, { 159,1337 }, { 160,1337 },
 { 161,1337 }, { 162,1337 }, { 163,1337 }, { 164,1337 }, { 165,1337 },
 { 166,1337 }, { 167,1337 }, { 168,1337 }, { 169,1337 }, { 170,1337 },
 { 171,1337 }, { 172,1337 }, { 173,1337 }, { 174,1337 }, { 175,1337 },
 { 176,1337 }, { 177,1337 }, { 178,1337 }, { 179,1337 }, { 180,1337 },

 { 181,1337 }, { 182,1337 }, { 183,1337 }, { 184,1337 }, { 185,1337 },
 { 186,1337 }, { 187,1337 }, { 188,1337 }, { 189,1337 }, { 190,1337 },
 { 191,1337 }, { 192,1337 }, { 193,1337 }, { 194,1337 }, { 195,1337 },
 { 196,1337 }, { 197,1337 }, { 198,1337 }, { 199,1337 }, { 200,1337 },
 { 201,1337 }, { 202,1337 }, { 203,1337 }, { 204,1337 }, { 205,1337 },
 { 206,1337 }, { 207,1337 }, { 208,1337 }, { 209,1337 }, { 210,1337 },
 { 211,1337 }, { 212,1337 }, { 213,1337 }, { 214,1337 }, { 215,1337 },
 { 216,1337 }, { 217,1337 }, { 218,1337 }, { 219,1337 }, { 220,1337 },
 { 221,1337 }, { 222,1337 }, { 223,1337 }, { 224,1337 }, { 225,1337 },
 { 226,1337 }, { 227,1337 }, { 228,1337 }, { 229,1337 }, { 230,1337 },

 { 231,1337 }, { 232,1337 }, { 233,1337 }, { 234,1337 }, { 235,1337 },
 { 236,1337 }, { 237,1337 }, { 238,1337 }, { 239,1337 }, { 240,1337 },
 { 241,1337 }, { 242,1337 }, { 243,1337 }, { 244,1337 }, { 245,1337 },
 { 246,1337 }, { 247,1337 }, { 248,1337 }, { 249,1337 }, { 250,1337 },
 { 251,1337 }, { 252,1337 }, { 253,1337 }, { 254,1337 }, { 255,1337 },
 { 256,1337 }, {   0,   0 }, {   0,3419 }, {   1,1079 }, {   2,1079 },
 {   3,1079 }, {   4,1079 }, {   5,1079 }, {   6,1079 }, {   7,1079 },
 {   8,1079 }, {   9,1079 }, {  10,1079 }, {  11,1079 }, {  12,1079 },
 {  13,1079 }, {  14,1079 }, {  15,1079 }, {  16,1079 }, {  17,1079 },
 {  18,1079 }, {  19,1079 }, {  20,1079 }, {  21,1079 }, {  22,1079 },

 {  23,1079 }, {  24,1079 }, {  25,1079 }, {  26,1079 }, {  27,1079 },
 {  28,1079 }, {  29,1079 }, {  30,1079 }, {  31,1079 }, {  32,1079 },
 {  33,1079 }, {  34, 288 }, {  35,1079 }, {  36,1079 }, {  37,1079 },
 {  38,1079 }, {  39,1079 }, {  40,1079 }, {  41,1079 }, {  42,1079 },
 {  43,1079 }, {  44,1079 }, {  45,1079 }, {  46,1079 }, {  47,1079 },
 {  48,1079 }, {  49,1079 }, {  50,1079 }, {  51,1079 }, {  52,1079 },
 {  53,1079 }, {  54,1079 }, {  55,1079 }, {  56,1079 }, {  57,1079 },
 {  58,1079 }, {  59,1079 }, {  60,1079 }, {  61,1079 }, {  62,1079 },
 {  63,1079 }, {  64,1079 }, {  65,1079 }, {  66,1079 }, {  67,1079 },
 {  68,1079 }, {  69,1079 }, {  70,1079 }, {  71,1079 }, {  72,1079 },

 {  73,1079 }, {  74,1079 }, {  75,1079 }, {  76,1079 }, {  77,1079 },
 {  78,1079 }, {  79,1079 }, {  80,1079 }, {  81,1079 }, {  82,1079 },
 {  83,1079 }, {  84,1079 }, {  85,1079 }, {  86,1079 }, {  87,1079 },
 {  88,1079 }, {  89,1079 }, {  90,1079 }, {  91,1079 }, {  92,1079 },
 {  93,1079 }, {  94,1079 }, {  95,1079 }, {  96,1079 }, {  97,1079 },
 {  98,1079 }, {  99,1079 }, { 100,1079 }, { 101,1079 }, { 102,1079 },
 { 103,1079 }, { 104,1079 }, { 105,1079 }, { 106,1079 }, { 107,1079 },
 { 108,1079 }, { 109,1079 }, { 110,1079 }, { 111,1079 }, { 112,1079 },
 { 113,1079 }, { 114,1079 }, { 115,1079 }, { 116,1079 }, { 117,1079 },
 { 118,1079 }, { 119,1079 }, { 120,1079 }, { 121,1079 }, { 122,1079 },

 { 123,1079 }, { 124,1079 }, { 125,1079 }, { 126,1079 }, { 127,1079 },
 { 128,1079 }, { 129,1079 }, { 130,1079 }, { 131,1079 }, { 132,1079 },
 { 133,1079 }, { 134,1079 }, { 135,1079 }, { 136,1079 }, { 137,1079 },
 { 138,1079 }, { 139,1079 }, { 140,1079 }, { 141,1079 }, { 142,1079 },
 { 143,1079 }, { 144,1079 }, { 145,1079 }, { 146,1079 }, { 147,1079 },
 { 148,1079 }, { 149,1079 }, { 150,1079 }, { 151,1079 }, { 152,1079 },
 { 153,1079 }, { 154,1079 }, { 155,1079 }, { 156,1079 }, { 157,1079 },
 { 158,1079 }, { 159,1079 }, { 160,1079 }, { 161,1079 }, { 162,1079 },
 { 163,1079 }, { 164,1079 }, { 165,1079 }, { 166,1079 }, { 167,1079 },
 { 168,1079 }, { 169,1079 }, { 170,1079 }, { 171,1079 }, { 172,1079 },

 { 173,1079 }, { 174,1079 }, { 175,1079 }, { 176,1079 }, { 177,1079 },
 { 178,1079 }, { 179,1079 }, { 180,1079 }, { 181,1079 }, { 182,1079 },
 { 183,1079 }, { 184,1079 }, { 185,1079 }, { 186,1079 }, { 187,1079 },
 { 188,1079 }, { 189,1079 }, { 190,1079 }, { 191,1079 }, { 192,1079 },
 { 193,1079 }, { 194,1079 }, { 195,1079 }, { 196,1079 }, { 197,1079 },
 { 198,1079 }, { 199,1079 }, { 200,1079 }, { 201,1079 }, { 202,1079 },
 { 203,1079 }, { 204,1079 }, { 205,1079 }, { 206,1079 }, { 207,1079 },
 { 208,1079 }, { 209,1079 }, { 210,1079 }, { 211,1079 }, { 212,1079 },
 { 213,1079 }, { 214,1079 }, { 215,1079 }, { 216,1079 }, { 217,1079 },
 { 218,1079 }, { 219,1079 }, { 220,1079 }, { 221,1079 }, { 222,1079 },

 { 223,1079 }, { 224,1079 }, { 225,1079 }, { 226,1079 }, { 227,1079 },
 { 228,1079 }, { 229,1079 }, { 230,1079 }, { 231,1079 }, { 232,1079 },
 { 233,1079 }, { 234,1079 }, { 235,1079 }, { 236,1079 }, { 237,1079 },
 { 238,1079 }, { 239,1079 }, { 240,1079 }, { 241,1079 }, { 242,1079 },
 { 243,1079 }, { 244,1079 }, { 245,1079 }, { 246,1079 }, { 247,1079 },
 { 248,1079 }, { 249,1079 }, { 250,1079 }, { 251,1079 }, { 252,1079 },
 { 253,1079 }, { 254,1079 }, { 255,1079 }, { 256,1079 }, {   0,  14 },
 {   0,3161 }, {   0,   1 }, {   0,3159 }, {   0,   4 }, {   0,3157 },
 {   0,   0 }, {   0,   1 }, {   0,3154 }, {   0,  12 }, {   0,3152 },
 {   0,   0 }, {   9,1077 }, {  10,1077 }, {  11,1077 }, {  12,1077 },

 {  13,1077 }, {   9,1072 }, {  10,1072 }, {  11,1072 }, {  12,1072 },
 {  13,1072 }, {   0,  13 }, {   0,3139 }, {   0,  10 }, {   0,3137 },
 {   0,  11 }, {   0,3135 }, {   0,   9 }, {   0,3133 }, {   0,   7 },
 {   0,3131 }, {   0,   5 }, {   0,3129 }, {   0,   0 }, {  32,1077 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,1072 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   8 },
 {   0,3111 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  34,   2 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,1053 }, {  49,1053 }, {  50,1053 }, {  51,1053 },
 {  52,1053 }, {  53,1053 }, {  54,1053 }, {  55,1053 }, {  56,1053 },
 {  57,1053 }, {  36,1053 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  45,1053 }, {  46,1053 }, {  47,1053 }, {  48,1053 }, {  49,1053 },
 {  50,1053 }, {  51,1053 }, {  52,1053 }, {  53,1053 }, {  54,1053 },
 {  55,1053 }, {  56,1053 }, {  57,1053 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  65,1053 }, {  66,1053 }, {  67,1053 }, {  68,1053 }, {  69,1053 },
 {  70,1053 }, {  71,1053 }, {  72,1053 }, {  73,1053 }, {  74,1053 },
 {  75,1053 }, {  76,1053 }, {  77,1053 }, {  78,1310 }, {  79,1053 },
 {  80,1053 }, {  81,1053 }, {  82,1053 }, {  83,1053 }, {  84,1053 },
 {  85,1053 }, {  86,1053 }, {  87,1053 }, {  88,1053 }, {  89,1053 },
 {  90,1053 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,1053 }, {   0,   0 }, {  97,1053 }, {  98,1053 }, {  99,1053 },
 { 100,1053 }, { 101,1053 }, { 102,1053 }, { 103,1053 }, { 104,1053 },
 { 105,1053 }, { 106,1053 }, { 107,1053 }, { 108,1053 }, { 109,1053 },
 { 110,1310 }, { 111,1053 }, { 112,1053 }, { 113,1053 }, { 114,1053 },

 { 115,1053 }, { 116,1053 }, { 117,1053 }, { 118,1053 }, { 119,1053 },
 { 120,1053 }, { 121,1053 }, { 122,1053 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128,1053 }, { 129,1053 },
 { 130,1053 }, { 131,1053 }, { 132,1053 }, { 133,1053 }, { 134,1053 },
 { 135,1053 }, { 136,1053 }, { 137,1053 }, { 138,1053 }, { 139,1053 },
 { 140,1053 }, { 141,1053 }, { 142,1053 }, { 143,1053 }, { 144,1053 },
 { 145,1053 }, { 146,1053 }, { 147,1053 }, { 148,1053 }, { 149,1053 },
 { 150,1053 }, { 151,1053 }, { 152,1053 }, { 153,1053 }, { 154,1053 },
 { 155,1053 }, { 156,1053 }, { 157,1053 }, { 158,1053 }, { 159,1053 },
 { 160,1053 }, { 161,1053 }, { 162,1053 }, { 163,1053 }, { 164,1053 },

 { 165,1053 }, { 166,1053 }, { 167,1053 }, { 168,1053 }, { 169,1053 },
 { 170,1053 }, { 171,1053 }, { 172,1053 }, { 173,1053 }, { 174,1053 },
 { 175,1053 }, { 176,1053 }, { 177,1053 }, { 178,1053 }, { 179,1053 },
 { 180,1053 }, { 181,1053 }, { 182,1053 }, { 183,1053 }, { 184,1053 },
 { 185,1053 }, { 186,1053 }, { 187,1053 }, { 188,1053 }, { 189,1053 },
 { 190,1053 }, { 191,1053 }, { 192,1053 }, { 193,1053 }, { 194,1053 },
 { 195,1053 }, { 196,1053 }, { 197,1053 }, { 198,1053 }, { 199,1053 },
 { 200,1053 }, { 201,1053 }, { 202,1053 }, { 203,1053 }, { 204,1053 },
 { 205,1053 }, { 206,1053 }, { 207,1053 }, { 208,1053 }, { 209,1053 },
 { 210,1053 }, { 211,1053 }, { 212,1053 }, { 213,1053 }, { 214,1053 },

 { 215,1053 }, { 216,1053 }, { 217,1053 }, { 218,1053 }, { 219,1053 },
 { 220,1053 }, { 221,1053 }, { 222,1053 }, { 223,1053 }, { 224,1053 },
 { 225,1053 }, { 226,1053 }, { 227,1053 }, { 228,1053 }, { 229,1053 },
 { 230,1053 }, { 231,1053 }, { 232,1053 }, { 233,1053 }, { 234,1053 },
 { 235,1053 }, { 236,1053 }, { 237,1053 }, { 238,1053 }, { 239,1053 },
 { 240,1053 }, { 241,1053 }, { 242,1053 }, { 243,1053 }, { 244,1053 },
 { 245,1053 }, { 246,1053 }, { 247,1053 }, { 248,1053 }, { 249,1053 },
 { 250,1053 }, { 251,1053 }, { 252,1053 }, { 253,1053 }, { 254,1053 },
 { 255,1053 }, {   0,   8 }, {   0,2854 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36, 796 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  45, 796 }, {  46, 796 }, {  47, 796 },
 {  48, 796 }, {  49, 796 }, {  50, 796 }, {  51, 796 }, {  52, 796 },
 {  53, 796 }, {  54, 796 }, {  55, 796 }, {  56, 796 }, {  57, 796 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 796 }, {  66, 796 }, {  67, 796 },
 {  68, 796 }, {  69, 796 }, {  70, 796 }, {  71, 796 }, {  72, 796 },
 {  73, 796 }, {  74, 796 }, {  75, 796 }, {  76, 796 }, {  77, 796 },
 {  78, 796 }, {  79, 796 }, {  80, 796 }, {  81, 796 }, {  82, 796 },
 {  83, 796 }, {  84, 796 }, {  85, 796 }, {  86, 796 }, {  87, 796 },
 {  88, 796 }, {  89, 796 }, {  90, 796 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95, 796 }, {   0,   0 }, {  97, 796 },
 {  98, 796 }, {  99, 796 }, { 100, 796 }, { 101, 796 }, { 102, 796 },
 { 103, 796 }, { 104, 796 }, { 105, 796 }, { 106, 796 }, { 107, 796 },

 { 108, 796 }, { 109, 796 }, { 110, 796 }, { 111, 796 }, { 112, 796 },
 { 113, 796 }, { 114, 796 }, { 115, 796 }, { 116, 796 }, { 117, 796 },
 { 118, 796 }, { 119, 796 }, { 120, 796 }, { 121, 796 }, { 122, 796 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 128, 796 }, { 129, 796 }, { 130, 796 }, { 131, 796 }, { 132, 796 },
 { 133, 796 }, { 134, 796 }, { 135, 796 }, { 136, 796 }, { 137, 796 },
 { 138, 796 }, { 139, 796 }, { 140, 796 }, { 141, 796 }, { 142, 796 },
 { 143, 796 }, { 144, 796 }, { 145, 796 }, { 146, 796 }, { 147, 796 },
 { 148, 796 }, { 149, 796 }, { 150, 796 }, { 151, 796 }, { 152, 796 },
 { 153, 796 }, { 154, 796 }, { 155, 796 }, { 156, 796 }, { 157, 796 },

 { 158, 796 }, { 159, 796 }, { 160, 796 }, { 161, 796 }, { 162, 796 },
 { 163, 796 }, { 164, 796 }, { 165, 796 }, { 166, 796 }, { 167, 796 },
 { 168, 796 }, { 169, 796 }, { 170, 796 }, { 171, 796 }, { 172, 796 },
 { 173, 796 }, { 174, 796 }, { 175, 796 }, { 176, 796 }, { 177, 796 },
 { 178, 796 }, { 179, 796 }, { 180, 796 }, { 181, 796 }, { 182, 796 },
 { 183, 796 }, { 184, 796 }, { 185, 796 }, { 186, 796 }, { 187, 796 },
 { 188, 796 }, { 189, 796 }, { 190, 796 }, { 191, 796 }, { 192, 796 },
 { 193, 796 }, { 194, 796 }, { 195, 796 }, { 196, 796 }, { 197, 796 },
 { 198, 796 }, { 199, 796 }, { 200, 796 }, { 201, 796 }, { 202, 796 },
 { 203, 796 }, { 204, 796 }, { 205, 796 }, { 206, 796 }, { 207, 796 },

 { 208, 796 }, { 209, 796 }, { 210, 796 }, { 211, 796 }, { 212, 796 },
 { 213, 796 }, { 214, 796 }, { 215, 796 }, { 216, 796 }, { 217, 796 },
 { 218, 796 }, { 219, 796 }, { 220, 796 }, { 221, 796 }, { 222, 796 },
 { 223, 796 }, { 224, 796 }, { 225, 796 }, { 226, 796 }, { 227, 796 },
 { 228, 796 }, { 229, 796 }, { 230, 796 }, { 231, 796 }, { 232, 796 },
 { 233, 796 }, { 234, 796 }, { 235, 796 }, { 236, 796 }, { 237, 796 },
 { 238, 796 }, { 239, 796 }, { 240, 796 }, { 241, 796 }, { 242, 796 },
 { 243, 796 }, { 244, 796 }, { 245, 796 }, { 246, 796 }, { 247, 796 },
 { 248, 796 }, { 249, 796 }, { 250, 796 }, { 251, 796 }, { 252, 796 },
 { 253, 796 }, { 254, 796 }, { 255, 796 }, {   0,   8 }, {   0,2597 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  36, 539 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45, 539 },
 {  46, 539 }, {  47, 539 }, {  48, 539 }, {  49, 539 }, {  50, 539 },

 {  51, 539 }, {  52, 539 }, {  53, 539 }, {  54, 539 }, {  55, 539 },
 {  56, 539 }, {  57, 539 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 539 },
 {  66, 539 }, {  67, 539 }, {  68, 539 }, {  69, 539 }, {  70, 539 },
 {  71, 539 }, {  72, 539 }, {  73,1053 }, {  74, 539 }, {  75, 539 },
 {  76, 539 }, {  77, 539 }, {  78, 539 }, {  79, 539 }, {  80, 539 },
 {  81, 539 }, {  82, 539 }, {  83, 539 }, {  84, 539 }, {  85, 539 },
 {  86, 539 }, {  87, 539 }, {  88, 539 }, {  89, 539 }, {  90, 539 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95, 539 },
 {   0,   0 }, {  97, 539 }, {  98, 539 }, {  99, 539 }, { 100, 539 },

 { 101, 539 }, { 102, 539 }, { 103, 539 }, { 104, 539 }, { 105,1053 },
 { 106, 539 }, { 107, 539 }, { 108, 539 }, { 109, 539 }, { 110, 539 },
 { 111, 539 }, { 112, 539 }, { 113, 539 }, { 114, 539 }, { 115, 539 },
 { 116, 539 }, { 117, 539 }, { 118, 539 }, { 119, 539 }, { 120, 539 },
 { 121, 539 }, { 122, 539 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 128, 539 }, { 129, 539 }, { 130, 539 },
 { 131, 539 }, { 132, 539 }, { 133, 539 }, { 134, 539 }, { 135, 539 },
 { 136, 539 }, { 137, 539 }, { 138, 539 }, { 139, 539 }, { 140, 539 },
 { 141, 539 }, { 142, 539 }, { 143, 539 }, { 144, 539 }, { 145, 539 },
 { 146, 539 }, { 147, 539 }, { 148, 539 }, { 149, 539 }, { 150, 539 },

 { 151, 539 }, { 152, 539 }, { 153, 539 }, { 154, 539 }, { 155, 539 },
 { 156, 539 }, { 157, 539 }, { 158, 539 }, { 159, 539 }, { 160, 539 },
 { 161, 539 }, { 162, 539 }, { 163, 539 }, { 164, 539 }, { 165, 539 },
 { 166, 539 }, { 167, 539 }, { 168, 539 }, { 169, 539 }, { 170, 539 },
 { 171, 539 }, { 172, 539 }, { 173, 539 }, { 174, 539 }, { 175, 539 },
 { 176, 539 }, { 177, 539 }, { 178, 539 }, { 179, 539 }, { 180, 539 },
 { 181, 539 }, { 182, 539 }, { 183, 539 }, { 184, 539 }, { 185, 539 },
 { 186, 539 }, { 187, 539 }, { 188, 539 }, { 189, 539 }, { 190, 539 },
 { 191, 539 }, { 192, 539 }, { 193, 539 }, { 194, 539 }, { 195, 539 },
 { 196, 539 }, { 197, 539 }, { 198, 539 }, { 199, 539 }, { 200, 539 },

 { 201, 539 }, { 202, 539 }, { 203, 539 }, { 204, 539 }, { 205, 539 },
 { 206, 539 }, { 207, 539 }, { 208, 539 }, { 209, 539 }, { 210, 539 },
 { 211, 539 }, { 212, 539 }, { 213, 539 }, { 214, 539 }, { 215, 539 },
 { 216, 539 }, { 217, 539 }, { 218, 539 }, { 219, 539 }, { 220, 539 },
 { 221, 539 }, { 222, 539 }, { 223, 539 }, { 224, 539 }, { 225, 539 },
 { 226, 539 }, { 227, 539 }, { 228, 539 }, { 229, 539 }, { 230, 539 },
 { 231, 539 }, { 232, 539 }, { 233, 539 }, { 234, 539 }, { 235, 539 },
 { 236, 539 }, { 237, 539 }, { 238, 539 }, { 239, 539 }, { 240, 539 },
 { 241, 539 }, { 242, 539 }, { 243, 539 }, { 244, 539 }, { 245, 539 },
 { 246, 539 }, { 247, 539 }, { 248, 539 }, { 249, 539 }, { 250, 539 },

 { 251, 539 }, { 252, 539 }, { 253, 539 }, { 254, 539 }, { 255, 539 },
 {   0,   6 }, {   0,2340 }, {   1,1053 }, {   2,1053 }, {   3,1053 },
 {   4,1053 }, {   5,1053 }, {   6,1053 }, {   7,1053 }, {   8,1053 },
 {   9,1053 }, {  10,1053 }, {  11,1053 }, {  12,1053 }, {  13,1053 },
 {  14,1053 }, {  15,1053 }, {  16,1053 }, {  17,1053 }, {  18,1053 },
 {  19,1053 }, {  20,1053 }, {  21,1053 }, {  22,1053 }, {  23,1053 },
 {  24,1053 }, {  25,1053 }, {  26,1053 }, {  27,1053 }, {  28,1053 },
 {  29,1053 }, {  30,1053 }, {  31,1053 }, {  32,1053 }, {  33,1053 },
 {   0,   0 }, {  35,1053 }, {  36,1053 }, {  37,1053 }, {  38,1053 },
 {  39,1053 }, {  40,1053 }, {  41,1053 }, {  42,1053 }, {  43,1053 },

 {  44,1053 }, {  45,1053 }, {  46,1053 }, {  47,1053 }, {  48,1053 },
 {  49,1053 }, {  50,1053 }, {  51,1053 }, {  52,1053 }, {  53,1053 },
 {  54,1053 }, {  55,1053 }, {  56,1053 }, {  57,1053 }, {  58,1053 },
 {  59,1053 }, {  60,1053 }, {  61,1053 }, {  62,1053 }, {  63,1053 },
 {  64,1053 }, {  65,1053 }, {  66,1053 }, {  67,1053 }, {  68,1053 },
 {  69,1053 }, {  70,1053 }, {  71,1053 }, {  72,1053 }, {  73,1053 },
 {  74,1053 }, {  75,1053 }, {  76,1053 }, {  77,1053 }, {  78,1053 },
 {  79,1053 }, {  80,1053 }, {  81,1053 }, {  82,1053 }, {  83,1053 },
 {  84,1053 }, {  85,1053 }, {  86,1053 }, {  87,1053 }, {  88,1053 },
 {  89,1053 }, {  90,1053 }, {  91,1053 }, {  92,1053 }, {  93,1053 },

 {  94,1053 }, {  95,1053 }, {  96,1053 }, {  97,1053 }, {  98,1053 },
 {  99,1053 }, { 100,1053 }, { 101,1053 }, { 102,1053 }, { 103,1053 },
 { 104,1053 }, { 105,1053 }, { 106,1053 }, { 107,1053 }, { 108,1053 },
 { 109,1053 }, { 110,1053 }, { 111,1053 }, { 112,1053 }, { 113,1053 },
 { 114,1053 }, { 115,1053 }, { 116,1053 }, { 117,1053 }, { 118,1053 },
 { 119,1053 }, { 120,1053 }, { 121,1053 }, { 122,1053 }, { 123,1053 },
 { 124,1053 }, { 125,1053 }, { 126,1053 }, { 127,1053 }, { 128,1053 },
 { 129,1053 }, { 130,1053 }, { 131,1053 }, { 132,1053 }, { 133,1053 },
 { 134,1053 }, { 135,1053 }, { 136,1053 }, { 137,1053 }, { 138,1053 },
 { 139,1053 }, { 140,1053 }, { 141,1053 }, { 142,1053 }, { 143,1053 },

 { 144,1053 }, { 145,1053 }, { 146,1053 }, { 147,1053 }, { 148,1053 },
 { 149,1053 }, { 150,1053 }, { 151,1053 }, { 152,1053 }, { 153,1053 },
 { 154,1053 }, { 155,1053 }, { 156,1053 }, { 157,1053 }, { 158,1053 },
 { 159,1053 }, { 160,1053 }, { 161,1053 }, { 162,1053 }, { 163,1053 },
 { 164,1053 }, { 165,1053 }, { 166,1053 }, { 167,1053 }, { 168,1053 },
 { 169,1053 }, { 170,1053 }, { 171,1053 }, { 172,1053 }, { 173,1053 },
 { 174,1053 }, { 175,1053 }, { 176,1053 }, { 177,1053 }, { 178,1053 },
 { 179,1053 }, { 180,1053 }, { 181,1053 }, { 182,1053 }, { 183,1053 },
 { 184,1053 }, { 185,1053 }, { 186,1053 }, { 187,1053 }, { 188,1053 },
 { 189,1053 }, { 190,1053 }, { 191,1053 }, { 192,1053 }, { 193,1053 },

 { 194,1053 }, { 195,1053 }, { 196,1053 }, { 197,1053 }, { 198,1053 },
 { 199,1053 }, { 200,1053 }, { 201,1053 }, { 202,1053 }, { 203,1053 },
 { 204,1053 }, { 205,1053 }, { 206,1053 }, { 207,1053 }, { 208,1053 },
 { 209,1053 }, { 210,1053 }, { 211,1053 }, { 212,1053 }, { 213,1053 },
 { 214,1053 }, { 215,1053 }, { 216,1053 }, { 217,1053 }, { 218,1053 },
 { 219,1053 }, { 220,1053 }, { 221,1053 }, { 222,1053 }, { 223,1053 },
 { 224,1053 }, { 225,1053 }, { 226,1053 }, { 227,1053 }, { 228,1053 },
 { 229,1053 }, { 230,1053 }, { 231,1053 }, { 232,1053 }, { 233,1053 },
 { 234,1053 }, { 235,1053 }, { 236,1053 }, { 237,1053 }, { 238,1053 },
 { 239,1053 }, { 240,1053 }, { 241,1053 }, { 242,1053 }, { 243,1053 },

 { 244,1053 }, { 245,1053 }, { 246,1053 }, { 247,1053 }, { 248,1053 },
 { 249,1053 }, { 250,1053 }, { 251,1053 }, { 252,1053 }, { 253,1053 },
 { 254,1053 }, { 255,1053 }, { 256,1053 }, {   0,   1 }, {   0,2082 },
 {   0,   9 }, {   0,2080 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   8 }, {   0,2058 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  36,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,   0 }, {   0,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },

 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },

 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },
 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },

 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },
 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, {   0,   8 },
 {   0,1801 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  36,-257 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  45,-257 }, {  46,-257 }, {  47,-257 }, {  48,-257 }, {  49,-257 },
 {  50,-257 }, {  51,-257 }, {  52,-257 }, {  53,-257 }, {  54,-257 },

 {  55,-257 }, {  56,-257 }, {  57,-257 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-257 }, {  66,-257 }, {  67,-257 }, {  68,-257 }, {  69,-257 },
 {  70,-257 }, {  71,-257 }, {  72,-257 }, {  73,-257 }, {  74,-257 },
 {  75,-257 }, {  76,-257 }, {  77,-257 }, {  78,-257 }, {  79,-257 },
 {  80,-257 }, {  81,-257 }, {  82,-257 }, {  83,-257 }, {  84,-257 },
 {  85,-257 }, {  86,-257 }, {  87,-257 }, {  88,-257 }, {  89, 772 },
 {  90,-257 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,-257 }, {   0,   0 }, {  97,-257 }, {  98,-257 }, {  99,-257 },
 { 100,-257 }, { 101,-257 }, { 102,-257 }, { 103,-257 }, { 104,-257 },

 { 105,-257 }, { 106,-257 }, { 107,-257 }, { 108,-257 }, { 109,-257 },
 { 110,-257 }, { 111,-257 }, { 112,-257 }, { 113,-257 }, { 114,-257 },
 { 115,-257 }, { 116,-257 }, { 117,-257 }, { 118,-257 }, { 119,-257 },
 { 120,-257 }, { 121, 772 }, { 122,-257 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128,-257 }, { 129,-257 },
 { 130,-257 }, { 131,-257 }, { 132,-257 }, { 133,-257 }, { 134,-257 },
 { 135,-257 }, { 136,-257 }, { 137,-257 }, { 138,-257 }, { 139,-257 },
 { 140,-257 }, { 141,-257 }, { 142,-257 }, { 143,-257 }, { 144,-257 },
 { 145,-257 }, { 146,-257 }, { 147,-257 }, { 148,-257 }, { 149,-257 },
 { 150,-257 }, { 151,-257 }, { 152,-257 }, { 153,-257 }, { 154,-257 },

 { 155,-257 }, { 156,-257 }, { 157,-257 }, { 158,-257 }, { 159,-257 },
 { 160,-257 }, { 161,-257 }, { 162,-257 }, { 163,-257 }, { 164,-257 },
 { 165,-257 }, { 166,-257 }, { 167,-257 }, { 168,-257 }, { 169,-257 },
 { 170,-257 }, { 171,-257 }, { 172,-257 }, { 173,-257 }, { 174,-257 },
 { 175,-257 }, { 176,-257 }, { 177,-257 }, { 178,-257 }, { 179,-257 },
 { 180,-257 }, { 181,-257 }, { 182,-257 }, { 183,-257 }, { 184,-257 },
 { 185,-257 }, { 186,-257 }, { 187,-257 }, { 188,-257 }, { 189,-257 },
 { 190,-257 }, { 191,-257 }, { 192,-257 }, { 193,-257 }, { 194,-257 },
 { 195,-257 }, { 196,-257 }, { 197,-257 }, { 198,-257 }, { 199,-257 },
 { 200,-257 }, { 201,-257 }, { 202,-257 }, { 203,-257 }, { 204,-257 },

 { 205,-257 }, { 206,-257 }, { 207,-257 }, { 208,-257 }, { 209,-257 },
 { 210,-257 }, { 211,-257 }, { 212,-257 }, { 213,-257 }, { 214,-257 },
 { 215,-257 }, { 216,-257 }, { 217,-257 }, { 218,-257 }, { 219,-257 },
 { 220,-257 }, { 221,-257 }, { 222,-257 }, { 223,-257 }, { 224,-257 },
 { 225,-257 }, { 226,-257 }, { 227,-257 }, { 228,-257 }, { 229,-257 },
 { 230,-257 }, { 231,-257 }, { 232,-257 }, { 233,-257 }, { 234,-257 },
 { 235,-257 }, { 236,-257 }, { 237,-257 }, { 238,-257 }, { 239,-257 },
 { 240,-257 }, { 241,-257 }, { 242,-257 }, { 243,-257 }, { 244,-257 },
 { 245,-257 }, { 246,-257 }, { 247,-257 }, { 248,-257 }, { 249,-257 },
 { 250,-257 }, { 251,-257 }, { 252,-257 }, { 253,-257 }, { 254,-257 },

 { 255,-257 }, {   0,   8 }, {   0,1544 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-514 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  45,-514 }, {  46,-514 }, {  47,-514 },

 {  48,-514 }, {  49,-514 }, {  50,-514 }, {  51,-514 }, {  52,-514 },
 {  53,-514 }, {  54,-514 }, {  55,-514 }, {  56,-514 }, {  57,-514 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-514 }, {  66,-514 }, {  67,-514 },
 {  68,-514 }, {  69,-514 }, {  70,-514 }, {  71,-514 }, {  72,-514 },
 {  73,-514 }, {  74,-514 }, {  75,-514 }, {  76,-514 }, {  77,-514 },
 {  78,-514 }, {  79,-514 }, {  80,-514 }, {  81,-514 }, {  82, 772 },
 {  83,-514 }, {  84,-514 }, {  85,-514 }, {  86,-514 }, {  87,-514 },
 {  88,-514 }, {  89,-514 }, {  90,-514 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,-514 }, {   0,   0 }, {  97,-514 },

 {  98,-514 }, {  99,-514 }, { 100,-514 }, { 101,-514 }, { 102,-514 },
 { 103,-514 }, { 104,-514 }, { 105,-514 }, { 106,-514 }, { 107,-514 },
 { 108,-514 }, { 109,-514 }, { 110,-514 }, { 111,-514 }, { 112,-514 },
 { 113,-514 }, { 114, 772 }, { 115,-514 }, { 116,-514 }, { 117,-514 },
 { 118,-514 }, { 119,-514 }, { 120,-514 }, { 121,-514 }, { 122,-514 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 128,-514 }, { 129,-514 }, { 130,-514 }, { 131,-514 }, { 132,-514 },
 { 133,-514 }, { 134,-514 }, { 135,-514 }, { 136,-514 }, { 137,-514 },
 { 138,-514 }, { 139,-514 }, { 140,-514 }, { 141,-514 }, { 142,-514 },
 { 143,-514 }, { 144,-514 }, { 145,-514 }, { 146,-514 }, { 147,-514 },

 { 148,-514 }, { 149,-514 }, { 150,-514 }, { 151,-514 }, { 152,-514 },
 { 153,-514 }, { 154,-514 }, { 155,-514 }, { 156,-514 }, { 157,-514 },
 { 158,-514 }, { 159,-514 }, { 160,-514 }, { 161,-514 }, { 162,-514 },
 { 163,-514 }, { 164,-514 }, { 165,-514 }, { 166,-514 }, { 167,-514 },
 { 168,-514 }, { 169,-514 }, { 170,-514 }, { 171,-514 }, { 172,-514 },
 { 173,-514 }, { 174,-514 }, { 175,-514 }, { 176,-514 }, { 177,-514 },
 { 178,-514 }, { 179,-514 }, { 180,-514 }, { 181,-514 }, { 182,-514 },
 { 183,-514 }, { 184,-514 }, { 185,-514 }, { 186,-514 }, { 187,-514 },
 { 188,-514 }, { 189,-514 }, { 190,-514 }, { 191,-514 }, { 192,-514 },
 { 193,-514 }, { 194,-514 }, { 195,-514 }, { 196,-514 }, { 197,-514 },

 { 198,-514 }, { 199,-514 }, { 200,-514 }, { 201,-514 }, { 202,-514 },
 { 203,-514 }, { 204,-514 }, { 205,-514 }, { 206,-514 }, { 207,-514 },
 { 208,-514 }, { 209,-514 }, { 210,-514 }, { 211,-514 }, { 212,-514 },
 { 213,-514 }, { 214,-514 }, { 215,-514 }, { 216,-514 }, { 217,-514 },
 { 218,-514 }, { 219,-514 }, { 220,-514 }, { 221,-514 }, { 222,-514 },
 { 223,-514 }, { 224,-514 }, { 225,-514 }, { 226,-514 }, { 227,-514 },
 { 228,-514 }, { 229,-514 }, { 230,-514 }, { 231,-514 }, { 232,-514 },
 { 233,-514 }, { 234,-514 }, { 235,-514 }, { 236,-514 }, { 237,-514 },
 { 238,-514 }, { 239,-514 }, { 240,-514 }, { 241,-514 }, { 242,-514 },
 { 243,-514 }, { 244,-514 }, { 245,-514 }, { 246,-514 }, { 247,-514 },

 { 248,-514 }, { 249,-514 }, { 250,-514 }, { 251,-514 }, { 252,-514 },
 { 253,-514 }, { 254,-514 }, { 255,-514 }, {   0,   6 }, {   0,1287 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {   0,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },

 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },

 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },

 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },
 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },
 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },
 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },
 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },

 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },
 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },
 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },
 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },
 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },

 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },
 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,   2 }, {   0,1029 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-1029 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  45,-1029 }, {  46,-1029 }, {  47,-1029 },
 {  48,-1029 }, {  49,-1029 }, {  50,-1029 }, {  51,-1029 }, {  52,-1029 },
 {  53,-1029 }, {  54,-1029 }, {  55,-1029 }, {  56,-1029 }, {  57,-1029 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-1029 }, {  66,-1029 }, {  67,-1029 },
 {  68,-1029 }, {  69,-1029 }, {  70,-1029 }, {  71,-1029 }, {  72,-1029 },
 {  73,-1029 }, {  74,-1029 }, {  75,-1029 }, {  76,-1029 }, {  77,-1029 },
 {  78,-1029 }, {  79,-1029 }, {  80,-1029 }, {  81,-1029 }, {  82,-1029 },

 {  83,-1029 }, {  84,-1029 }, {  85,-1029 }, {  86,-1029 }, {  87,-1029 },
 {  88,-1029 }, {  89,-1029 }, {  90,-1029 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,-1029 }, {   0,   0 }, {  97,-1029 },
 {  98,-1029 }, {  99,-1029 }, { 100,-1029 }, { 101,-1029 }, { 102,-1029 },
 { 103,-1029 }, { 104,-1029 }, { 105,-1029 }, { 106,-1029 }, { 107,-1029 },
 { 108,-1029 }, { 109,-1029 }, { 110,-1029 }, { 111,-1029 }, { 112,-1029 },
 { 113,-1029 }, { 114,-1029 }, { 115,-1029 }, { 116,-1029 }, { 117,-1029 },
 { 118,-1029 }, { 119,-1029 }, { 120,-1029 }, { 121,-1029 }, { 122,-1029 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 128,-1029 }, { 129,-1029 }, { 130,-1029 }, { 131,-1029 }, { 132,-1029 },

 { 133,-1029 }, { 134,-1029 }, { 135,-1029 }, { 136,-1029 }, { 137,-1029 },
 { 138,-1029 }, { 139,-1029 }, { 140,-1029 }, { 141,-1029 }, { 142,-1029 },
 { 143,-1029 }, { 144,-1029 }, { 145,-1029 }, { 146,-1029 }, { 147,-1029 },
 { 148,-1029 }, { 149,-1029 }, { 150,-1029 }, { 151,-1029 }, { 152,-1029 },
 { 153,-1029 }, { 154,-1029 }, { 155,-1029 }, { 156,-1029 }, { 157,-1029 },
 { 158,-1029 }, { 159,-1029 }, { 160,-1029 }, { 161,-1029 }, { 162,-1029 },
 { 163,-1029 }, { 164,-1029 }, { 165,-1029 }, { 166,-1029 }, { 167,-1029 },
 { 168,-1029 }, { 169,-1029 }, { 170,-1029 }, { 171,-1029 }, { 172,-1029 },
 { 173,-1029 }, { 174,-1029 }, { 175,-1029 }, { 176,-1029 }, { 177,-1029 },
 { 178,-1029 }, { 179,-1029 }, { 180,-1029 }, { 181,-1029 }, { 182,-1029 },

 { 183,-1029 }, { 184,-1029 }, { 185,-1029 }, { 186,-1029 }, { 187,-1029 },
 { 188,-1029 }, { 189,-1029 }, { 190,-1029 }, { 191,-1029 }, { 192,-1029 },
 { 193,-1029 }, { 194,-1029 }, { 195,-1029 }, { 196,-1029 }, { 197,-1029 },
 { 198,-1029 }, { 199,-1029 }, { 200,-1029 }, { 201,-1029 }, { 202,-1029 },
 { 203,-1029 }, { 204,-1029 }, { 205,-1029 }, { 206,-1029 }, { 207,-1029 },
 { 208,-1029 }, { 209,-1029 }, { 210,-1029 }, { 211,-1029 }, { 212,-1029 },
 { 213,-1029 }, { 214,-1029 }, { 215,-1029 }, { 216,-1029 }, { 217,-1029 },
 { 218,-1029 }, { 219,-1029 }, { 220,-1029 }, { 221,-1029 }, { 222,-1029 },
 { 223,-1029 }, { 224,-1029 }, { 225,-1029 }, { 226,-1029 }, { 227,-1029 },
 { 228,-1029 }, { 229,-1029 }, { 230,-1029 }, { 231,-1029 }, { 232,-1029 },

 { 233,-1029 }, { 234,-1029 }, { 235,-1029 }, { 236,-1029 }, { 237,-1029 },
 { 238,-1029 }, { 239,-1029 }, { 240,-1029 }, { 241,-1029 }, { 242,-1029 },
 { 243,-1029 }, { 244,-1029 }, { 245,-1029 }, { 246,-1029 }, { 247,-1029 },
 { 248,-1029 }, { 249,-1029 }, { 250,-1029 }, { 251,-1029 }, { 252,-1029 },
 { 253,-1029 }, { 254,-1029 }, { 255,-1029 }, {   0,   8 }, {   0, 772 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  36,-1286 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,-1286 },
 {  46,-1286 }, {  47,-1286 }, {  48,-1286 }, {  49,-1286 }, {  50,-1286 },
 {  51,-1286 }, {  52,-1286 }, {  53,-1286 }, {  54,-1286 }, {  55,-1286 },
 {  56,-1286 }, {  57,-1286 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1286 },
 {  66,-1286 }, {  67,-1286 }, {  68,-1286 }, {  69,-1286 }, {  70,-1286 },
 {  71,-1286 }, {  72,-1286 }, {  73,-1286 }, {  74,-1286 }, {  75,-1286 },

 {  76,-1286 }, {  77,-1286 }, {  78,-1286 }, {  79,-1286 }, {  80,-1286 },
 {  81,-1286 }, {  82,-1286 }, {  83, 257 }, {  84,-1286 }, {  85,-1286 },
 {  86,-1286 }, {  87,-1286 }, {  88,-1286 }, {  89,-1286 }, {  90,-1286 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1286 },
 {   0,   0 }, {  97,-1286 }, {  98,-1286 }, {  99,-1286 }, { 100,-1286 },
 { 101,-1286 }, { 102,-1286 }, { 103,-1286 }, { 104,-1286 }, { 105,-1286 },
 { 106,-1286 }, { 107,-1286 }, { 108,-1286 }, { 109,-1286 }, { 110,-1286 },
 { 111,-1286 }, { 112,-1286 }, { 113,-1286 }, { 114,-1286 }, { 115, 257 },
 { 116,-1286 }, { 117,-1286 }, { 118,-1286 }, { 119,-1286 }, { 120,-1286 },
 { 121,-1286 }, { 122,-1286 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 128,-1286 }, { 129,-1286 }, { 130,-1286 },
 { 131,-1286 }, { 132,-1286 }, { 133,-1286 }, { 134,-1286 }, { 135,-1286 },
 { 136,-1286 }, { 137,-1286 }, { 138,-1286 }, { 139,-1286 }, { 140,-1286 },
 { 141,-1286 }, { 142,-1286 }, { 143,-1286 }, { 144,-1286 }, { 145,-1286 },
 { 146,-1286 }, { 147,-1286 }, { 148,-1286 }, { 149,-1286 }, { 150,-1286 },
 { 151,-1286 }, { 152,-1286 }, { 153,-1286 }, { 154,-1286 }, { 155,-1286 },
 { 156,-1286 }, { 157,-1286 }, { 158,-1286 }, { 159,-1286 }, { 160,-1286 },
 { 161,-1286 }, { 162,-1286 }, { 163,-1286 }, { 164,-1286 }, { 165,-1286 },
 { 166,-1286 }, { 167,-1286 }, { 168,-1286 }, { 169,-1286 }, { 170,-1286 },
 { 171,-1286 }, { 172,-1286 }, { 173,-1286 }, { 174,-1286 }, { 175,-1286 },

 { 176,-1286 }, { 177,-1286 }, { 178,-1286 }, { 179,-1286 }, { 180,-1286 },
 { 181,-1286 }, { 182,-1286 }, { 183,-1286 }, { 184,-1286 }, { 185,-1286 },
 { 186,-1286 }, { 187,-1286 }, { 188,-1286 }, { 189,-1286 }, { 190,-1286 },
 { 191,-1286 }, { 192,-1286 }, { 193,-1286 }, { 194,-1286 }, { 195,-1286 },
 { 196,-1286 }, { 197,-1286 }, { 198,-1286 }, { 199,-1286 }, { 200,-1286 },
 { 201,-1286 }, { 202,-1286 }, { 203,-1286 }, { 204,-1286 }, { 205,-1286 },
 { 206,-1286 }, { 207,-1286 }, { 208,-1286 }, { 209,-1286 }, { 210,-1286 },
 { 211,-1286 }, { 212,-1286 }, { 213,-1286 }, { 214,-1286 }, { 215,-1286 },
 { 216,-1286 }, { 217,-1286 }, { 218,-1286 }, { 219,-1286 }, { 220,-1286 },
 { 221,-1286 }, { 222,-1286 }, { 223,-1286 }, { 224,-1286 }, { 225,-1286 },

 { 226,-1286 }, { 227,-1286 }, { 228,-1286 }, { 229,-1286 }, { 230,-1286 },
 { 231,-1286 }, { 232,-1286 }, { 233,-1286 }, { 234,-1286 }, { 235,-1286 },
 { 236,-1286 }, { 237,-1286 }, { 238,-1286 }, { 239,-1286 }, { 240,-1286 },
 { 241,-1286 }, { 242,-1286 }, { 243,-1286 }, { 244,-1286 }, { 245,-1286 },
 { 246,-1286 }, { 247,-1286 }, { 248,-1286 }, { 249,-1286 }, { 250,-1286 },
 { 251,-1286 }, { 252,-1286 }, { 253,-1286 }, { 254,-1286 }, { 255,-1286 },
 {   0,   8 }, {   0, 515 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  36,-1543 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  45,-1543 }, {  46,-1543 }, {  47,-1543 }, {  48,-1543 },
 {  49,-1543 }, {  50,-1543 }, {  51,-1543 }, {  52,-1543 }, {  53,-1543 },
 {  54,-1543 }, {  55,-1543 }, {  56,-1543 }, {  57,-1543 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-1543 }, {  66,-1543 }, {  67,-1543 }, {  68,-1543 },

 {  69,-1543 }, {  70,-1543 }, {  71,-1543 }, {  72,-1543 }, {  73,-1543 },
 {  74,-1543 }, {  75,-1543 }, {  76,-1543 }, {  77,-1543 }, {  78,-1543 },
 {  79,-1543 }, {  80,-1543 }, {  81,-1543 }, {  82,-1543 }, {  83,-1543 },
 {  84, 257 }, {  85,-1543 }, {  86,-1543 }, {  87,-1543 }, {  88,-1543 },
 {  89,-1543 }, {  90,-1543 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,-1543 }, {   0,   0 }, {  97,-1543 }, {  98,-1543 },
 {  99,-1543 }, { 100,-1543 }, { 101,-1543 }, { 102,-1543 }, { 103,-1543 },
 { 104,-1543 }, { 105,-1543 }, { 106,-1543 }, { 107,-1543 }, { 108,-1543 },
 { 109,-1543 }, { 110,-1543 }, { 111,-1543 }, { 112,-1543 }, { 113,-1543 },
 { 114,-1543 }, { 115,-1543 }, { 116, 257 }, { 117,-1543 }, { 118,-1543 },

 { 119,-1543 }, { 120,-1543 }, { 121,-1543 }, { 122,-1543 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128,-1543 },
 { 129,-1543 }, { 130,-1543 }, { 131,-1543 }, { 132,-1543 }, { 133,-1543 },
 { 134,-1543 }, { 135,-1543 }, { 136,-1543 }, { 137,-1543 }, { 138,-1543 },
 { 139,-1543 }, { 140,-1543 }, { 141,-1543 }, { 142,-1543 }, { 143,-1543 },
 { 144,-1543 }, { 145,-1543 }, { 146,-1543 }, { 147,-1543 }, { 148,-1543 },
 { 149,-1543 }, { 150,-1543 }, { 151,-1543 }, { 152,-1543 }, { 153,-1543 },
 { 154,-1543 }, { 155,-1543 }, { 156,-1543 }, { 157,-1543 }, { 158,-1543 },
 { 159,-1543 }, { 160,-1543 }, { 161,-1543 }, { 162,-1543 }, { 163,-1543 },
 { 164,-1543 }, { 165,-1543 }, { 166,-1543 }, { 167,-1543 }, { 168,-1543 },

 { 169,-1543 }, { 170,-1543 }, { 171,-1543 }, { 172,-1543 }, { 173,-1543 },
 { 174,-1543 }, { 175,-1543 }, { 176,-1543 }, { 177,-1543 }, { 178,-1543 },
 { 179,-1543 }, { 180,-1543 }, { 181,-1543 }, { 182,-1543 }, { 183,-1543 },
 { 184,-1543 }, { 185,-1543 }, { 186,-1543 }, { 187,-1543 }, { 188,-1543 },
 { 189,-1543 }, { 190,-1543 }, { 191,-1543 }, { 192,-1543 }, { 193,-1543 },
 { 194,-1543 }, { 195,-1543 }, { 196,-1543 }, { 197,-1543 }, { 198,-1543 },
 { 199,-1543 }, { 200,-1543 }, { 201,-1543 }, { 202,-1543 }, { 203,-1543 },
 { 204,-1543 }, { 205,-1543 }, { 206,-1543 }, { 207,-1543 }, { 208,-1543 },
 { 209,-1543 }, { 210,-1543 }, { 211,-1543 }, { 212,-1543 }, { 213,-1543 },
 { 214,-1543 }, { 215,-1543 }, { 216,-1543 }, { 217,-1543 }, { 218,-1543 },

 { 219,-1543 }, { 220,-1543 }, { 221,-1543 }, { 222,-1543 }, { 223,-1543 },
 { 224,-1543 }, { 225,-1543 }, { 226,-1543 }, { 227,-1543 }, { 228,-1543 },
 { 229,-1543 }, { 230,-1543 }, { 231,-1543 }, { 232,-1543 }, { 233,-1543 },
 { 234,-1543 }, { 235,-1543 }, { 236,-1543 }, { 237,-1543 }, { 238,-1543 },
 { 239,-1543 }, { 240,-1543 }, { 241,-1543 }, { 242,-1543 }, { 243,-1543 },
 { 244,-1543 }, { 245,-1543 }, { 246,-1543 }, { 247,-1543 }, { 248,-1543 },
 { 249,-1543 }, { 250,-1543 }, { 251,-1543 }, { 252,-1543 }, { 253,-1543 },
 { 254,-1543 }, { 255,-1543 }, {   0,   3 }, {   0, 258 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-1800 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  45,-1800 }, {  46,-1800 },
 {  47,-1800 }, {  48,-1800 }, {  49,-1800 }, {  50,-1800 }, {  51,-1800 },
 {  52,-1800 }, {  53,-1800 }, {  54,-1800 }, {  55,-1800 }, {  56,-1800 },
 {  57,-1800 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1800 }, {  66,-1800 },
 {  67,-1800 }, {  68,-1800 }, {  69,-1800 }, {  70,-1800 }, {  71,-1800 },
 {  72,-1800 }, {  73,-1800 }, {  74,-1800 }, {  75,-1800 }, {  76,-1800 },
 {  77,-1800 }, {  78,-1800 }, {  79,-1800 }, {  80,-1800 }, {  81,-1800 },
 {  82,-1800 }, {  83,-1800 }, {  84,-1800 }, {  85,-1800 }, {  86,-1800 },
 {  87,-1800 }, {  88,-1800 }, {  89,-1800 }, {  90,-1800 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1800 }, {   0,   0 },
 {  97,-1800 }, {  98,-1800 }, {  99,-1800 }, { 100,-1800 }, { 101,-1800 },
 { 102,-1800 }, { 103,-1800 }, { 104,-1800 }, { 105,-1800 }, { 106,-1800 },
 { 107,-1800 }, { 108,-1800 }, { 109,-1800 }, { 110,-1800 }, { 111,-1800 },

 { 112,-1800 }, { 113,-1800 }, { 114,-1800 }, { 115,-1800 }, { 116,-1800 },
 { 117,-1800 }, { 118,-1800 }, { 119,-1800 }, { 120,-1800 }, { 121,-1800 },
 { 122,-1800 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 128,-1800 }, { 129,-1800 }, { 130,-1800 }, { 131,-1800 },
 { 132,-1800 }, { 133,-1800 }, { 134,-1800 }, { 135,-1800 }, { 136,-1800 },
 { 137,-1800 }, { 138,-1800 }, { 139,-1800 }, { 140,-1800 }, { 141,-1800 },
 { 142,-1800 }, { 143,-1800 }, { 144,-1800 }, { 145,-1800 }, { 146,-1800 },
 { 147,-1800 }, { 148,-1800 }, { 149,-1800 }, { 150,-1800 }, { 151,-1800 },
 { 152,-1800 }, { 153,-1800 }, { 154,-1800 }, { 155,-1800 }, { 156,-1800 },
 { 157,-1800 }, { 158,-1800 }, { 159,-1800 }, { 160,-1800 }, { 161,-1800 },

 { 162,-1800 }, { 163,-1800 }, { 164,-1800 }, { 165,-1800 }, { 166,-1800 },
 { 167,-1800 }, { 168,-1800 }, { 169,-1800 }, { 170,-1800 }, { 171,-1800 },
 { 172,-1800 }, { 173,-1800 }, { 174,-1800 }, { 175,-1800 }, { 176,-1800 },
 { 177,-1800 }, { 178,-1800 }, { 179,-1800 }, { 180,-1800 }, { 181,-1800 },
 { 182,-1800 }, { 183,-1800 }, { 184,-1800 }, { 185,-1800 }, { 186,-1800 },
 { 187,-1800 }, { 188,-1800 }, { 189,-1800 }, { 190,-1800 }, { 191,-1800 },
 { 192,-1800 }, { 193,-1800 }, { 194,-1800 }, { 195,-1800 }, { 196,-1800 },
 { 197,-1800 }, { 198,-1800 }, { 199,-1800 }, { 200,-1800 }, { 201,-1800 },
 { 202,-1800 }, { 203,-1800 }, { 204,-1800 }, { 205,-1800 }, { 206,-1800 },
 { 207,-1800 }, { 208,-1800 }, { 209,-1800 }, { 210,-1800 }, { 211,-1800 },

 { 212,-1800 }, { 213,-1800 }, { 214,-1800 }, { 215,-1800 }, { 216,-1800 },
 { 217,-1800 }, { 218,-1800 }, { 219,-1800 }, { 220,-1800 }, { 221,-1800 },
 { 222,-1800 }, { 223,-1800 }, { 224,-1800 }, { 225,-1800 }, { 226,-1800 },
 { 227,-1800 }, { 228,-1800 }, { 229,-1800 }, { 230,-1800 }, { 231,-1800 },
 { 232,-1800 }, { 233,-1800 }, { 234,-1800 }, { 235,-1800 }, { 236,-1800 },
 { 237,-1800 }, { 238,-1800 }, { 239,-1800 }, { 240,-1800 }, { 241,-1800 },
 { 242,-1800 }, { 243,-1800 }, { 244,-1800 }, { 245,-1800 }, { 246,-1800 },
 { 247,-1800 }, { 248,-1800 }, { 249,-1800 }, { 250,-1800 }, { 251,-1800 },
 { 252,-1800 }, { 253,-1800 }, { 254,-1800 }, { 255,-1800 }, {   0,   0 },
 { 257,  16 }, {   1,   0 },    };

static const struct yy_trans_info *yy_start_state_list[5] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "syncrep_scanner.l"
#line 2 "syncrep_scanner.l"
/* -------------------------------------------------------------------------
 *
 * syncrep_scanner.l
 *	  a lexical scanner for synchronous_standby_names
 *
 * Portions Copyright (c) 1996-2016, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/replication/syncrep_scanner.l
 *
 * -------------------------------------------------------------------------
 */
#include "postgres.h"
#include "knl/knl_variable.h"

#include "lib/stringinfo.h"

/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */
#undef fprintf
#define fprintf(file, fmt, msg)  fprintf_to_ereport(fmt, msg)

#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-variable"

#define YYSTYPE			syncrep_scanner_YYSTYPE
#define yyerror(msg)	syncrep_scanner_yyerror(msg, yyscanner)

long getDynaParam(const char *string, bool initflag);

static void
fprintf_to_ereport(const char *fmt, const char *msg)
{
	ereport(ERROR, (errcode(ERRCODE_SYNTAX_ERROR), errmsg("%s", msg)));
}

/*
 * define syncrep_scanner_yylex for flex >= 2.6
 */
#if FLEX_MAJOR_VERSION >= 2 && FLEX_MINOR_VERSION >= 6
#define YY_DECL int syncrep_scanner_yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif
#line 1573 "syncrep_scanner.inc"
#define YY_NO_INPUT 1
/*
 * <xd> delimited identifiers (double-quoted identifiers)
 */

#line 1579 "syncrep_scanner.inc"

#define INITIAL 0
#define xd 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_ZERO,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_ZERO
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 80 "syncrep_scanner.l"

#line 1864 "syncrep_scanner.inc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			yy_current_state += yy_trans_info->yy_nxt;
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 81 "syncrep_scanner.l"
{ /* ignore */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "syncrep_scanner.l"
{ return ANY; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "syncrep_scanner.l"
{ return FIRST; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "syncrep_scanner.l"
{
				initStringInfo(t_thrd.syncrepscanner_cxt.xdbuf);
				BEGIN(xd);
		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 90 "syncrep_scanner.l"
{
				appendStringInfoChar(t_thrd.syncrepscanner_cxt.xdbuf, '"');
		}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 93 "syncrep_scanner.l"
{
				appendStringInfoString(t_thrd.syncrepscanner_cxt.xdbuf, yytext);
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "syncrep_scanner.l"
{
				yylval->str = t_thrd.syncrepscanner_cxt.xdbuf->data;
				t_thrd.syncrepscanner_cxt.xdbuf->data = NULL;
				BEGIN(INITIAL);
				return NAME;
		}
	YY_BREAK
case YY_STATE_EOF(xd):
#line 102 "syncrep_scanner.l"
{
				yyerror("unterminated quoted identifier");
				return JUNK;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "syncrep_scanner.l"
{
				yylval->str = pstrdup(yytext);
				return NAME;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "syncrep_scanner.l"
{
				yylval->str = pstrdup(yytext);
				return NUM;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "syncrep_scanner.l"
{
				yylval->str = "*";
				return NAME;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "syncrep_scanner.l"
{ return ','; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "syncrep_scanner.l"
{ return '('; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "syncrep_scanner.l"
{ return ')'; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 126 "syncrep_scanner.l"
{ return JUNK; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 127 "syncrep_scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2006 "syncrep_scanner.inc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_ZERO, it'll still work - another
					 * YY_ZERO will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	int yy_c = 256;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 127 "syncrep_scanner.l"


/*
 * Arrange access to yyextra for subroutines of the main yylex() function.
 * We expect each subroutine to have a yyscanner parameter.  Rather than
 * use the yyget_xxx functions, which might or might not get inlined by the
 * compiler, we cheat just a bit and cast yyscanner to the right type.
 */
#undef yyextra
#define yyextra  (((struct yyguts_t *) yyscanner)->yyextra_r)
/* Likewise for a couple of other things we need. */
#undef yytext
#define yytext (((struct yyguts_t*)yyscanner)->yytext_r)
#undef yylloc
#define yylloc  (((struct yyguts_t *) yyscanner)->yylloc_r)
#undef yyleng
#define yyleng  (((struct yyguts_t *) yyscanner)->yyleng_r)

/* Needs to be here for access to yytext */
void
syncrep_scanner_yyerror(const char *message, syncrep_scanner_yyscan_t yyscanner)
{
	/* report only the first error in a parse operation */
	return;
}

syncrep_scanner_yyscan_t
syncrep_scanner_init(const char *query_string)
{
	Size		slen = strlen(query_string);
	char	   *scanbuf;
	yyscan_t	scanner;
	errno_t     rc;

	if (yylex_init(&scanner) != 0)
	{
		ereport(ERROR,
				(errcode(ERRCODE_SYNTAX_ERROR),
							 errmsg("yylex_init() failed: %m")));
	}

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	scanbuf = (char *) palloc(slen + 2);
	rc = memcpy_s(scanbuf, slen, query_string, slen);
	securec_check(rc, "\0", "\0");

	scanbuf[slen] = scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	t_thrd.syncrepscanner_cxt.scanbufhandle = yy_scan_buffer(scanbuf, slen + 2, scanner);

	getDynaParam("init", true);

	return scanner;
}

void
syncrep_scanner_finish(syncrep_scanner_yyscan_t yyscanner)
{
	if ((YY_BUFFER_STATE*)t_thrd.syncrepscanner_cxt.scanbufhandle->yy_ch_buf)
		yyfree((YY_BUFFER_STATE*)t_thrd.syncrepscanner_cxt.scanbufhandle->yy_ch_buf ,yyscanner );
	yy_delete_buffer(t_thrd.syncrepscanner_cxt.scanbufhandle, yyscanner);
	t_thrd.syncrepscanner_cxt.scanbufhandle = NULL;
	yylex_destroy(yyscanner);
}

void *
syncrep_scanner_yyalloc(yy_size_t bytes, syncrep_scanner_yyscan_t yyscanner)
{
	return palloc(bytes);
}

void *
syncrep_scanner_yyrealloc(void *ptr, yy_size_t bytes, syncrep_scanner_yyscan_t yyscanner)
{
	if (ptr)
		return repalloc(ptr, bytes);
	else
		return palloc(bytes);
}

void
syncrep_scanner_yyfree(void *ptr, syncrep_scanner_yyscan_t yyscanner)
{
	if (ptr)
		pfree(ptr);
}

long
getDynaParam(const char *string, bool initflag)
{
	if (initflag)
		t_thrd.syncrepscanner_cxt.result = 0;

	return t_thrd.syncrepscanner_cxt.result++;
}

